// shared/utils/qr-generator.js
// QR –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ GENESIS DeFi Platform

export class QRGenerator {
    constructor() {
        this.qrLibraryLoaded = false;
        this.loadingPromise = null;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ QRCode.js
    async loadQRLibrary() {
        if (this.qrLibraryLoaded) return;
        
        if (this.loadingPromise) {
            return this.loadingPromise;
        }

        this.loadingPromise = new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
            if (typeof QRCode !== 'undefined') {
                this.qrLibraryLoaded = true;
                resolve();
                return;
            }

            // –°–æ–∑–¥–∞–µ–º script —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js';
            script.async = true;
            
            script.onload = () => {
                this.qrLibraryLoaded = true;
                console.log('‚úÖ QRCode library loaded successfully');
                resolve();
            };
            
            script.onerror = () => {
                console.error('‚ùå Failed to load QRCode library');
                reject(new Error('Failed to load QRCode library'));
            };
            
            document.head.appendChild(script);
        });

        return this.loadingPromise;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    async generatePaymentQR(options) {
        const {
            container,      // DOM —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ ID
            address,        // –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            amount,         // –°—É–º–º–∞
            token,          // –¢–æ–∫–µ–Ω (USDT/PLEX)
            network = 'BSC' // –°–µ—Ç—å
        } = options;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await this.loadQRLibrary();

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const containerElement = typeof container === 'string' 
                ? document.getElementById(container) 
                : container;

            if (!containerElement) {
                throw new Error('Container element not found');
            }

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            containerElement.innerHTML = '';

            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR –∫–æ–¥–∞
            const qrData = this.createPaymentData(address, amount, token, network);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            const qrcode = new QRCode(containerElement, {
                text: qrData,
                width: 256,
                height: 256,
                colorDark: '#000000',
                colorLight: '#ffffff',
                correctLevel: QRCode.CorrectLevel.H
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            this.styleQRContainer(containerElement, address, amount, token);

            console.log('‚úÖ QR code generated successfully');
            return qrcode;

        } catch (error) {
            console.error('Failed to generate QR code:', error);
            this.showFallback(container, address, amount, token);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QR –∫–æ–¥–∞
    createPaymentData(address, amount, token, network) {
        // –§–æ—Ä–º–∞—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        // –î–ª—è BSC –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        
        if (token === 'BNB') {
            // –î–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            return `ethereum:${address}?value=${amount}`;
        } else {
            // –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (USDT, PLEX)
            const tokenData = this.getTokenData(token);
            if (tokenData) {
                // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
                return `ethereum:${tokenData.contract}/transfer?address=${address}&uint256=${this.parseAmount(amount, tokenData.decimals)}`;
            }
        }
        
        // Fallback - –ø—Ä–æ—Å—Ç–æ –∞–¥—Ä–µ—Å
        return address;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
    getTokenData(token) {
        const tokens = {
            'USDT': {
                contract: '0x55d398326f99059ff775485246999027b3197955',
                decimals: 18,
                symbol: 'USDT'
            },
            'PLEX': {
                contract: '0xdf179b6cAdBC61FFD86A3D2e55f6d6e083ade6c1',
                decimals: 9,
                symbol: 'PLEX'
            }
        };
        
        return tokens[token];
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º decimals
    parseAmount(amount, decimals) {
        const value = parseFloat(amount) * Math.pow(10, decimals);
        return value.toString();
    }

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è QR –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    styleQRContainer(container, address, amount, token) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        container.classList.add('qr-payment-container');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥ QR –∫–æ–¥–æ–º
        const info = document.createElement('div');
        info.className = 'qr-payment-info';
        info.innerHTML = `
            <div class="qr-amount">${amount} ${token}</div>
            <div class="qr-address" title="${address}">
                ${this.formatAddress(address)}
            </div>
            <button class="qr-copy-btn" onclick="window.QRGenerator.copyAddress('${address}')">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
            </button>
        `;
        
        container.appendChild(info);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    formatAddress(address) {
        if (!address) return '';
        return `${address.slice(0, 6)}...${address.slice(-4)}`;
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async copyAddress(address) {
        try {
            await navigator.clipboard.writeText(address);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.eventBus) {
                window.eventBus.emit('notification:show', {
                    message: '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
                    type: 'success'
                });
            } else {
                alert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + address);
            }
            
        } catch (error) {
            console.error('Failed to copy address:', error);
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            this.fallbackCopy(address);
        }
    }

    // Fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    fallbackCopy(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        
        try {
            document.execCommand('copy');
            alert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + text);
        } catch (error) {
            console.error('Fallback copy failed:', error);
            prompt('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:', text);
        }
        
        document.body.removeChild(textArea);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å fallback –µ—Å–ª–∏ QR –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
    showFallback(container, address, amount, token) {
        const containerElement = typeof container === 'string' 
            ? document.getElementById(container) 
            : container;

        if (!containerElement) return;

        containerElement.innerHTML = `
            <div class="qr-fallback">
                <div class="qr-fallback-icon">üì±</div>
                <h4>QR –∫–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h4>
                <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <strong>${amount} ${token}</strong> –Ω–∞ –∞–¥—Ä–µ—Å:</p>
                <div class="qr-fallback-address">
                    <code>${address}</code>
                    <button onclick="window.QRGenerator.copyAddress('${address}')">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞
    async generateDepositQR(container, plan, currency = 'USDT') {
        const config = window.store?.get('config') || {};
        const systemAddress = config.addresses?.system || '0x399B22170B0AC7BB20bdC86772bfF478f201fFCD';
        
        const amount = currency === 'USDT' ? plan.usdtAmount : plan.plexAmount;
        
        return this.generatePaymentQR({
            container,
            address: systemAddress,
            amount: amount,
            token: currency,
            network: 'BSC'
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    async generatePlatformAccessQR(container) {
        const config = window.store?.get('config') || {};
        const accessAddress = config.addresses?.access || '0x28915a33562b58500cf8b5b682C89A3396B8Af76';
        
        return this.generatePaymentQR({
            container,
            address: accessAddress,
            amount: 1,
            token: 'USDT',
            network: 'BSC'
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline QR (base64)
    async generateInlineQR(text, size = 256) {
        try {
            await this.loadQRLibrary();
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const tempContainer = document.createElement('div');
            tempContainer.style.position = 'fixed';
            tempContainer.style.left = '-9999px';
            document.body.appendChild(tempContainer);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
            const qrcode = new QRCode(tempContainer, {
                text: text,
                width: size,
                height: size,
                correctLevel: QRCode.CorrectLevel.H
            });
            
            // –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const img = tempContainer.querySelector('img');
            const base64 = img ? img.src : '';
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            document.body.removeChild(tempContainer);
            
            return base64;
            
        } catch (error) {
            console.error('Failed to generate inline QR:', error);
            return null;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.QRGenerator = new QRGenerator();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –º–æ–¥—É–ª–µ–π
export default QRGenerator;