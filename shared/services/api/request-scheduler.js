/**
 * RequestScheduler - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ BSCScan API
 * BSCScan –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 2 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É
 * 
 * MCP-MARKER:SERVICE:REQUEST_SCHEDULER - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
 */

export class RequestScheduler {
    constructor(options = {}) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        this.maxConcurrent = options.maxConcurrent || 2; // –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.requestInterval = options.requestInterval || 500; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å)
        this.slidingWindowMs = options.slidingWindowMs || 1000; // –û–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
        this.maxRequestsPerWindow = options.maxRequestsPerWindow || 2; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.queue = []; // –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.activeRequests = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.requestHistory = []; // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è sliding window
        this.processing = false; // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        
        // –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.cache = new Map();
        this.cacheMaxAge = options.cacheMaxAge || 30000; // TTL –∫—ç—à–∞ (30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        
        // Backoff –ø—Ä–∏ rate limit
        this.backoffBase = options.backoffBase || 800; // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        this.backoffMultiplier = 2; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
        this.backoffJitter = 120; // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 0-120ms
        this.retryCount = new Map(); // –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        // –ú–µ—Ç—Ä–∏–∫–∏
        this.metrics = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            rateLimitHits: 0,
            cacheHits: 0,
            averageLatency: 0,
            emptyResults: 0
        };
        
        // –°—Ç–∞—Ç—É—Å API
        this.apiHealth = 'UP'; // UP | DEGRADED | THROTTLED
        this.rateLimitWindow = [];
        
        console.log('üöÄ RequestScheduler initialized:', {
            maxConcurrent: this.maxConcurrent,
            requestInterval: this.requestInterval,
            slidingWindowMs: this.slidingWindowMs,
            maxRequestsPerWindow: this.maxRequestsPerWindow
        });
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
     * @param {Function} requestFn - –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
     */
    async schedule(requestFn, options = {}) {
        const requestId = this.generateRequestId();
        const cacheKey = options.cacheKey || this.generateCacheKey(options);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (!options.skipCache && this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheMaxAge) {
                this.metrics.cacheHits++;
                console.log(`üì¶ Cache hit for ${cacheKey}`);
                return cached.data;
            } else {
                this.cache.delete(cacheKey);
            }
        }
        
        return new Promise((resolve, reject) => {
            const request = {
                id: requestId,
                fn: requestFn,
                resolve,
                reject,
                options,
                cacheKey,
                timestamp: Date.now(),
                attempts: 0
            };
            
            this.queue.push(request);
            this.processQueue();
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async processQueue() {
        if (this.processing) return;
        this.processing = true;
        
        while (this.queue.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if (!this.canMakeRequest()) {
                await this.waitForSlot();
                continue;
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            const request = this.queue.shift();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            this.executeRequest(request);
            
            // –ñ–¥–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            await this.delay(this.requestInterval);
        }
        
        this.processing = false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    canMakeRequest() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (this.activeRequests >= this.maxConcurrent) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º sliding window
        const now = Date.now();
        this.requestHistory = this.requestHistory.filter(
            time => now - time < this.slidingWindowMs
        );
        
        if (this.requestHistory.length >= this.maxRequestsPerWindow) {
            return false;
        }
        
        return true;
    }
    
    /**
     * –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
     */
    async waitForSlot() {
        const waitTime = this.calculateWaitTime();
        console.log(`‚è≥ Waiting ${waitTime}ms for rate limit slot...`);
        await this.delay(waitTime);
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
     */
    calculateWaitTime() {
        const now = Date.now();
        const oldestRequest = Math.min(...this.requestHistory);
        const timeSinceOldest = now - oldestRequest;
        const baseWait = Math.max(this.slidingWindowMs - timeSinceOldest, this.requestInterval);
        
        // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const jitter = Math.random() * this.backoffJitter;
        
        return baseWait + jitter;
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    async executeRequest(request) {
        const startTime = Date.now();
        this.activeRequests++;
        this.requestHistory.push(startTime);
        request.attempts++;
        
        try {
            this.metrics.totalRequests++;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞
            const result = await request.fn();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (this.isRateLimitError(result)) {
                throw new Error('RATE_LIMIT');
            }
            
            if (this.isEmptyResult(result)) {
                this.metrics.emptyResults++;
                console.log(`üì≠ Empty result for request ${request.id}`);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if (!request.options.skipCache && result) {
                this.cache.set(request.cacheKey, {
                    data: result,
                    timestamp: Date.now()
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            const latency = Date.now() - startTime;
            this.updateLatency(latency);
            this.metrics.successfulRequests++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å API
            this.updateApiHealth();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            request.resolve(result);
            
        } catch (error) {
            console.error(`‚ùå Request ${request.id} failed:`, error.message);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit
            if (error.message === 'RATE_LIMIT' || error.message.includes('rate limit')) {
                this.metrics.rateLimitHits++;
                this.updateApiHealth('THROTTLED');
                
                // Retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
                if (request.attempts < 3) {
                    const backoffTime = this.calculateBackoff(request.attempts);
                    console.log(`üîÑ Retrying request ${request.id} after ${backoffTime}ms (attempt ${request.attempts})`);
                    
                    await this.delay(backoffTime);
                    this.queue.unshift(request); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                } else {
                    this.metrics.failedRequests++;
                    request.reject(error);
                }
            } else {
                this.metrics.failedRequests++;
                request.reject(error);
            }
        } finally {
            this.activeRequests--;
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è backoff
     */
    calculateBackoff(attemptNumber) {
        const exponentialDelay = this.backoffBase * Math.pow(this.backoffMultiplier, attemptNumber - 1);
        const jitter = Math.random() * this.backoffJitter;
        return exponentialDelay + jitter;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ rate limit
     */
    isRateLimitError(result) {
        if (!result) return false;
        
        if (typeof result === 'string') {
            return result.toLowerCase().includes('rate limit') || 
                   result.toLowerCase().includes('too many requests');
        }
        
        if (result.status === '0' && result.message) {
            return result.message.toLowerCase().includes('rate limit');
        }
        
        return false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç—ã–º
     */
    isEmptyResult(result) {
        if (!result) return true;
        
        if (result.status === '1' && Array.isArray(result.result)) {
            return result.result.length === 0;
        }
        
        if (result.status === '0' && result.message) {
            return result.message.toLowerCase().includes('no transactions found') ||
                   result.message.toLowerCase().includes('no records found');
        }
        
        return false;
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é –∑–∞–¥–µ—Ä–∂–∫—É
     */
    updateLatency(latency) {
        const totalRequests = this.metrics.successfulRequests + 1;
        const currentAvg = this.metrics.averageLatency;
        this.metrics.averageLatency = ((currentAvg * (totalRequests - 1)) + latency) / totalRequests;
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å API
     */
    updateApiHealth(forcedStatus = null) {
        if (forcedStatus) {
            this.apiHealth = forcedStatus;
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ rate limit
        const now = Date.now();
        this.rateLimitWindow = this.rateLimitWindow.filter(
            time => now - time < 60000 // –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        const rateLimitRatio = this.rateLimitWindow.length / 60; // Hits per second
        
        if (rateLimitRatio > 0.5) {
            this.apiHealth = 'THROTTLED';
        } else if (rateLimitRatio > 0.2) {
            this.apiHealth = 'DEGRADED';
        } else {
            this.apiHealth = 'UP';
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID –∑–∞–ø—Ä–æ—Å–∞
     */
    generateRequestId() {
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∫—ç—à–∞
     */
    generateCacheKey(options) {
        return JSON.stringify(options);
    }
    
    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
     */
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è Cache cleared');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
     */
    getMetrics() {
        return {
            ...this.metrics,
            queueLength: this.queue.length,
            activeRequests: this.activeRequests,
            cacheSize: this.cache.size,
            apiHealth: this.apiHealth
        };
    }
    
    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
     */
    resetMetrics() {
        this.metrics = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            rateLimitHits: 0,
            cacheHits: 0,
            averageLatency: 0,
            emptyResults: 0
        };
        console.log('üìä Metrics reset');
    }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let schedulerInstance = null;

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä RequestScheduler
 */
export function getRequestScheduler(options = {}) {
    if (!schedulerInstance) {
        schedulerInstance = new RequestScheduler(options);
    }
    return schedulerInstance;
}

// Export default
export default RequestScheduler;
