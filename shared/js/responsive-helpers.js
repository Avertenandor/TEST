/**
 * GENESIS 1.1 - Responsive Helper Functions
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

(function() {
    'use strict';

    /**
     * –°–æ–∫—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å/—Ö–µ—à –¥–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
     * @param {string} str - –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–∞–¥—Ä–µ—Å, —Ö–µ—à)
     * @param {number} prefixLength - –î–ª–∏–Ω–∞ –Ω–∞—á–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6)
     * @param {number} suffixLength - –î–ª–∏–Ω–∞ –∫–æ–Ω—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6)
     * @returns {string} –°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    function truncateAddress(str, prefixLength = 6, suffixLength = 6) {
        if (!str || str.length <= prefixLength + suffixLength) {
            return str;
        }
        return str.slice(0, prefixLength) + '‚Ä¶' + str.slice(-suffixLength);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
     * @returns {boolean}
     */
    function isMobile() {
        return window.innerWidth <= 767;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∑–∫–∏–º –º–æ–±–∏–ª—å–Ω—ã–º
     * @returns {boolean}
     */
    function isNarrowMobile() {
        return window.innerWidth <= 480;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-address
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
     */
    function initAddressTruncation() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-address
        const addressElements = document.querySelectorAll('[data-address]');

        addressElements.forEach(el => {
            const fullAddress = el.dataset.address || el.textContent.trim();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            if (!el.dataset.full) {
                el.dataset.full = fullAddress;
            }

            // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const updateDisplay = () => {
                if (isNarrowMobile()) {
                    // –ù–∞ —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö - —Å–æ–∫—Ä–∞—â–∞–µ–º
                    el.textContent = truncateAddress(el.dataset.full, 6, 6);
                    el.title = el.dataset.full; // –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
                } else {
                    // –ù–∞ —à–∏—Ä–æ–∫–∏—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    el.textContent = el.dataset.full;
                }
            };

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            updateDisplay();

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(updateDisplay, 100);
            });
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫–ª–∏–∫—É
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º .copy-btn
     */
    function initCopyButtons() {
        const copyButtons = document.querySelectorAll('.copy-btn');

        copyButtons.forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.preventDefault();

                // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∞–¥—Ä–µ—Å–æ–º
                const container = btn.closest('.system-address-container, .address-container, .step-content');
                const addressElement = container?.querySelector('[data-full], code, .address, .system-address');

                if (!addressElement) {
                    console.warn('Address element not found for copy button');
                    return;
                }

                const textToCopy = addressElement.dataset.full || addressElement.textContent.trim();

                try {
                    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
                    if (navigator.clipboard && window.isSecureContext) {
                        await navigator.clipboard.writeText(textToCopy);
                    } else {
                        // –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                        const textarea = document.createElement('textarea');
                        textarea.value = textToCopy;
                        textarea.style.position = 'fixed';
                        textarea.style.opacity = '0';
                        document.body.appendChild(textarea);
                        textarea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textarea);
                    }

                    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                    const originalIcon = btn.innerHTML;
                    btn.innerHTML = '<span class="copy-icon">‚úÖ</span>';
                    btn.classList.add('success');

                    setTimeout(() => {
                        btn.innerHTML = originalIcon;
                        btn.classList.remove('success');
                    }, 2000);

                } catch (err) {
                    console.error('Failed to copy address:', err);

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    const originalIcon = btn.innerHTML;
                    btn.innerHTML = '<span class="copy-icon">‚ùå</span>';
                    btn.classList.add('error');

                    setTimeout(() => {
                        btn.innerHTML = originalIcon;
                        btn.classList.remove('error');
                    }, 2000);
                }
            });
        });
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç safe area padding –¥–ª—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    function applySafeAreaPadding() {
        const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

        if (iOS) {
            document.documentElement.classList.add('ios-device');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã—Ä–µ–∑–æ–≤ (notch)
            const hasNotch = window.CSS?.supports('padding-top: env(safe-area-inset-top)');

            if (hasNotch) {
                document.documentElement.classList.add('ios-notch');
            }
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ touch-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
     */
    function optimizeScrollPerformance() {
        if ('ontouchstart' in window) {
            // –î–æ–±–∞–≤–ª—è–µ–º momentum scrolling –¥–ª—è iOS
            document.body.style.webkitOverflowScrolling = 'touch';

            // –û—Ç–∫–ª—é—á–∞–µ–º pull-to-refresh –Ω–∞ Android Chrome
            document.body.style.overscrollBehavior = 'none';
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö
     */
    function initMobileTabsScroll() {
        const tabContainers = document.querySelectorAll('.device-tabs, .tabs-container');

        tabContainers.forEach(container => {
            if (isMobile()) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                container.classList.add('scrollable');

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                const activeTab = container.querySelector('.tab-btn.active');
                if (activeTab) {
                    setTimeout(() => {
                        activeTab.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
                    }, 100);
                }
            }
        });
    }

    /**
     * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ–∑—É–º –Ω–∞ iOS –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ input
     */
    function preventIOSAutoZoom() {
        const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

        if (iOS) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ input/textarea —Å —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞ –º–µ–Ω—å—à–µ 16px
            const inputs = document.querySelectorAll('input, textarea, select');

            inputs.forEach(input => {
                const fontSize = window.getComputedStyle(input).fontSize;
                const fontSizeValue = parseFloat(fontSize);

                if (fontSizeValue < 16) {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 16px –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑—É–º–∞
                    input.style.fontSize = '16px';
                }
            });
        }
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    function init() {
        // –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initAll);
        } else {
            initAll();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ responsive —Ö–µ–ª–ø–µ—Ä—ã
     */
    function initAll() {
        console.log('üé® Initializing Responsive Helpers...');

        try {
            initAddressTruncation();
            initCopyButtons();
            applySafeAreaPadding();
            optimizeScrollPerformance();
            initMobileTabsScroll();
            preventIOSAutoZoom();

            console.log('‚úÖ Responsive Helpers initialized successfully');
        } catch (error) {
            console.error('‚ùå Error initializing Responsive Helpers:', error);
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
    window.GENESIS = window.GENESIS || {};
    window.GENESIS.responsive = {
        truncateAddress,
        isMobile,
        isNarrowMobile,
        initAddressTruncation,
        initCopyButtons,
        applySafeAreaPadding,
        optimizeScrollPerformance,
        initMobileTabsScroll,
        preventIOSAutoZoom
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

})();
