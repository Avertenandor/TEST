    }
    
    return { allowed: true, message: '–î–µ–ø–æ–∑–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω' };
};

// MCP-MARKER:FUNCTION:GET_PLAN_DURATION - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞
window.getPlanDuration = function(planName) {
    const plan = window.getDepositPlanById(planName);
    return plan ? plan.days : 0;
};

// MCP-MARKER:FUNCTION:GET_PLAN_PERCENT - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –ø–ª–∞–Ω–∞
window.getPlanPercent = function(planName) {
    const plan = window.getDepositPlanById(planName);
    return plan ? plan.percentage : 100;
};

// MCP-MARKER:FUNCTION:CALCULATE_PLAN_PROFIT - –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ –ø–ª–∞–Ω—É
window.calculatePlanProfit = function(planName, investedAmount) {
    const percent = window.getPlanPercent(planName);
    return (investedAmount * percent / 100) - investedAmount;
};

// MCP-MARKER:FUNCTION:IS_PAYMENT_VALID - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
window.isPaymentValid = function(amount, targetAmount, tolerance = 0.05) {
    if (!amount || !targetAmount || isNaN(amount) || isNaN(targetAmount)) return false;
    const minAmount = targetAmount * (1 - tolerance);
    const maxAmount = targetAmount * (1 + tolerance);
    return amount >= minAmount && amount <= maxAmount;
};

// MCP-MARKER:FUNCTION:FORMAT_ADDRESS - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
window.formatAddress = function(address, length = 6) {
    if (!address || typeof address !== 'string') return '';
    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) return address;
    return `${address.substring(0, length)}...${address.substring(address.length - 4)}`;
};

// MCP-MARKER:FUNCTION:FORMAT_CURRENCY - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
window.formatCurrency = function(amount, currency = 'USD', decimals = 2) {
    if (!amount || isNaN(amount)) return '0.00';
    
    const options = {
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals
    };
    
    if (['USDT', 'PLEX', 'BNB'].includes(currency)) {
        return `${parseFloat(amount).toLocaleString('en-US', options)} ${currency}`;
    }
    
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency === 'USDT' ? 'USD' : currency,
        ...options
    }).format(amount);
};

// MCP-MARKER:FUNCTION:LEGACY_API_KEYS - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
window.getCurrentApiKey = function() {
    console.warn('‚ö†Ô∏è getCurrentApiKey() —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getApiKeyForOperation()');
    return window.getApiKeyForOperation('AUTHORIZATION');
};

window.rotateApiKey = function() {
    console.warn('‚ö†Ô∏è rotateApiKey() —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏');
    return window.getApiKeyForOperation('AUTHORIZATION');
};

// MCP-MARKER:FUNCTION:SAFE_GET_CONFIG - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
window.safeGetConfig = function(path, defaultValue = null) {
    try {
        const keys = path.split('.');
        let value = window.GENESIS_CONFIG;
        
        for (const key of keys) {
            if (value && typeof value === 'object' && key in value) {
                value = value[key];
            } else {
                return defaultValue;
            }
        }
        
        return value;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        return defaultValue;
    }
};

// MCP-MARKER:FUNCTION:IS_DEVELOPMENT - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
window.isDevelopment = function() {
    return window.location.hostname === 'localhost' || 
           window.location.hostname === '127.0.0.1' ||
           window.location.hostname.includes('dev') ||
           window.location.hostname.includes('test') ||
           window.location.protocol === 'file:';
};

// MCP-MARKER:FUNCTION:GET_ENVIRONMENT - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
window.getEnvironment = function() {
    if (window.isDevelopment()) return 'development';
    if (window.location.hostname.includes('staging')) return 'staging';
    return 'production';
};

// MCP-MARKER:SECTION:DEVELOPMENT_MODE - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.isDevelopment && window.isDevelopment()) {
    window.GENESIS_CONFIG.app.debug = true;
    console.log('üîß Development mode enabled');
}

// MCP-MARKER:INITIALIZATION:CONFIG_READY - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
window.GENESIS_CONFIG_READY = true;
document.dispatchEvent(new CustomEvent('genesis-config-ready', {
    detail: { version: window.GENESIS_CONFIG.version }
}));

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
window.checkConfig = function() {
    const required = ['depositPlans', 'addresses', 'plex', 'usdt', 'bscscan'];
    const missing = required.filter(key => !window.GENESIS_CONFIG[key]);
    
    if (missing.length > 0) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', missing);
        return false;
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    window.checkConfig();
});

// MCP-MARKER:FUNCTION:WAIT_FOR_DEPENDENCIES - –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
window.waitForDependencies = function(dependencies, timeout = 5000) {
    return new Promise((resolve, reject) => {
        const checkInterval = 100;
        let elapsed = 0;
        
        const check = () => {
            const missing = dependencies.filter(dep => !window[dep]);
            
            if (missing.length === 0) {
                resolve();
                return;
            }
            
            elapsed += checkInterval;
            if (elapsed >= timeout) {
                console.warn(`‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${missing.join(', ')}`);
                resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                return;
            }
            
            setTimeout(check, checkInterval);
        };
        
        check();
    });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (window.GENESIS_CONFIG.bscscan.apiKeys.AUTHORIZATION === '' ||
    window.GENESIS_CONFIG.bscscan.apiKeys.DEPOSITS === '' ||
    window.GENESIS_CONFIG.bscscan.apiKeys.SUBSCRIPTION === '') {
    console.warn('‚ö†Ô∏è WARNING: BSCScan API keys are not configured! Please set them in .env file');
    console.warn('üìù Copy .env.example to .env and fill in your API keys from https://bscscan.com/myapikey');
}

console.log('‚öôÔ∏è GENESIS CONFIG loaded v' + window.GENESIS_CONFIG.version + ' (Terminal v' + window.GENESIS_CONFIG.terminal.version + ')');
console.log('üîí Security: API keys loaded from environment variables');
