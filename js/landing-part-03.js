            const address = AUTH_CONFIG.address;
            
            navigator.clipboard.writeText(address).then(function() {
                console.log('‚úÖ –ê–¥—Ä–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:', address);
                showNotification('–ê–¥—Ä–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
                const addressBox = document.querySelector('.address-display-box');
                if (addressBox) {
                    addressBox.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        addressBox.style.transform = 'scale(1)';
                    }, 150);
                }
            }).catch(function(err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
                showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = address;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    showNotification('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
                } catch (err) {
                    showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                }
                document.body.removeChild(textArea);
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        window.copyAuthAddress = copyAuthAddress;
        
        // MCP-MARKER:FUNCTION:TEST_COPY_FUNCTIONS - –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        function testCopyFunctions() {
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...');
            console.log('üìã AUTH_CONFIG.address:', AUTH_CONFIG.address);
            console.log('üìã copyAuthAddress function:', typeof copyAuthAddress);
            console.log('üìã copyAddress function:', typeof copyAddress);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            copyAuthAddress();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        window.testCopyFunctions = testCopyFunctions;
        
        // MCP-MARKER:ANIMATION:AUTH_INSTRUCTIONS - –ê–Ω–∏–º–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        // MCP-MARKER:FUNCTION:INIT_AUTH_INSTRUCTION_ANIMATION - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        function initAuthInstructionAnimation() {
            const steps = document.querySelectorAll('#auth-steps-list li');
            const words = document.querySelectorAll('#auth-steps-list .word');
            let currentStep = 0;
            let currentWord = 0;
            
        // MCP-MARKER:FUNCTION:ANIMATE_WORDS - –ê–Ω–∏–º–∞—Ü–∏—è —Å–ª–æ–≤
            // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–ª–æ–≤
            function animateWords() {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö —Å–ª–æ–≤
                words.forEach(word => {
                    word.classList.remove('active', 'completed');
                });
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö —à–∞–≥–æ–≤
                steps.forEach(step => {
                    step.classList.remove('step-active');
                });
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
                if (steps[currentStep]) {
                    steps[currentStep].classList.add('step-active');
                }
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
                const currentStepWords = steps[currentStep]?.querySelectorAll('.word');
                if (currentStepWords && currentStepWords[currentWord]) {
                    currentStepWords[currentWord].classList.add('active');
                    
                    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                    for (let i = 0; i < currentWord; i++) {
                        if (currentStepWords[i]) {
                            currentStepWords[i].classList.add('completed');
                        }
                    }
                    
                    currentWord++;
                    
                    // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —à–∞–≥–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    if (currentWord >= currentStepWords.length) {
                        setTimeout(() => {
                            currentStep = (currentStep + 1) % steps.length;
                            currentWord = 0;
                        }, 1000);
                    }
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            setInterval(animateWords, 800);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
            animateWords();
        }
        
        // MCP-MARKER:INIT:ANIMATION_INITIALIZATION - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            setTimeout(() => {
                initAuthInstructionAnimation();
            }, 2000);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        window.initAuthInstructionAnimation = initAuthInstructionAnimation;
        
        // MCP-MARKER:INIT:ENHANCED_DEPOSITS - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        document.addEventListener('DOMContentLoaded', function() {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if (window.EnhancedDepositSystem) {
                initEnhancedDepositUI();
            }
        });
        
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        function initEnhancedDepositUI() {
            loadDepositPlans();
            setupDepositFormHandlers();
            loadUserDepositStats();
        }
        
        function loadDepositPlans() {
            const plansGrid = document.getElementById('deposit-plans-grid');
            if (!plansGrid) return;
            
            const plans = window.EnhancedDepositSystem.getAvailablePlans();
            plansGrid.innerHTML = '';
            
            plans.forEach((plan, index) => {
                const isRecommended = plan.id === 'starter';
                const planCard = createDepositPlanCard(plan, isRecommended);
                plansGrid.appendChild(planCard);
            });
        }
        
        function createDepositPlanCard(plan, isRecommended = false) {
            const card = document.createElement('div');
            card.className = `deposit-plan-card ${isRecommended ? 'recommended' : ''}`;
            
            card.innerHTML = `
                <div class="plan-header">
                    <div class="plan-title">${plan.title}</div>
                    <div class="plan-subtitle">${plan.description}</div>
                    <div class="plan-amount">$${plan.usdtAmount}</div>
                    <div class="plan-percentage">${plan.percentage}% –∑–∞ ${plan.days} –¥–Ω–µ–π</div>
                </div>
                <ul class="plan-features">
                    <li>–ú–∏–Ω–∏–º—É–º: $${plan.usdtAmount}</li>
                    <li>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${plan.percentage}%</li>
                    <li>–°—Ä–æ–∫: ${plan.days} –¥–Ω–µ–π</li>
                    <li>–í–∞–ª—é—Ç—ã: ${plan.currencies.join(', ')}</li>
                    <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã</li>
                    <li>–ü–æ–ª–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è</li>
                </ul>
                <button class="plan-select-btn" onclick="selectDepositPlan('${plan.id}')">
                    üí∞ –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω
                </button>
            `;
            
            return card;
        }
        
        // MCP-MARKER:FUNCTION:SELECT_DEPOSIT_PLAN - –í—ã–±–æ—Ä –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        function selectDepositPlan(planId) {
            const formContainer = document.getElementById('deposit-form-container');
            const planSelect = document.getElementById('deposit-plan');
            
            if (formContainer && planSelect) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                formContainer.style.display = 'block';
                formContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // –í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞–Ω
                planSelect.value = planId;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã –≤ select
                loadPlansIntoSelect();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
                updateDepositCalculation();
            }
        }
        
        function loadPlansIntoSelect() {
            const planSelect = document.getElementById('deposit-plan');
            if (!planSelect) return;
            
            const plans = window.EnhancedDepositSystem.getAvailablePlans();
            planSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω</option>';
            
            plans.forEach(plan => {
                const option = document.createElement('option');
                option.value = plan.id;
                option.textContent = `${plan.title} - ${plan.percentage}% –∑–∞ ${plan.days} –¥–Ω–µ–π`;
                planSelect.appendChild(option);
            });
        }
        
        function setupDepositFormHandlers() {
            const form = document.getElementById('enhanced-deposit-form');
            const amountInput = document.getElementById('deposit-amount');
            const planSelect = document.getElementById('deposit-plan');
            const currencySelect = document.getElementById('deposit-currency');
            
            if (form) {
                form.addEventListener('submit', handleDepositSubmit);
            }
            
            if (amountInput) {
                amountInput.addEventListener('input', updateDepositCalculation);
            }
            
            if (planSelect) {
                planSelect.addEventListener('change', updateDepositCalculation);
            }
            
            if (currencySelect) {
                currencySelect.addEventListener('change', updateDepositCalculation);
            }
        }
        
        function updateDepositCalculation() {
            const amount = parseFloat(document.getElementById('deposit-amount')?.value) || 0;
            const planId = document.getElementById('deposit-plan')?.value;
            
            if (amount > 0 && planId) {
                const returns = window.EnhancedDepositSystem.calculateReturns(amount, planId);
                if (returns) {
                    displayCalculation(returns);
                    checkDepositLimits(amount);
                }
            } else {
                hideCalculation();
            }
        }
        
        function displayCalculation(returns) {
            const calcSection = document.getElementById('deposit-calculation');
            if (!calcSection) return;
            
            calcSection.style.display = 'block';
            
            document.getElementById('calc-principal').textContent = `$${returns.principal.toFixed(2)}`;
            document.getElementById('calc-returns').textContent = `$${returns.totalReturns.toFixed(2)}`;
            document.getElementById('calc-daily').textContent = `$${returns.dailyReturn.toFixed(2)}`;
            document.getElementById('calc-total').textContent = `$${returns.totalAmount.toFixed(2)}`;
            document.getElementById('calc-period').textContent = `${returns.days} –¥–Ω–µ–π`;
            document.getElementById('calc-percentage').textContent = `${returns.percentage}%`;
        }
        
        function hideCalculation() {
            const calcSection = document.getElementById('deposit-calculation');
            if (calcSection) {
                calcSection.style.display = 'none';
            }
        }
        
        function checkDepositLimits(newAmount) {
            const address = document.getElementById('deposit-address')?.value;
            if (!address) return;
            
            window.EnhancedDepositSystem.checkDepositLimits(address, newAmount)
                .then(result => {
                    displayLimitsInfo(result);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
                });
        }
        
        function displayLimitsInfo(limitsResult) {
            const limitsSection = document.getElementById('deposit-limits');
            if (!limitsSection) return;
            
            limitsSection.style.display = 'block';
            
            document.getElementById('current-deposits').textContent = `$${limitsResult.currentAmount.toFixed(2)}`;
            document.getElementById('total-after').textContent = `$${limitsResult.totalAfter.toFixed(2)}`;
            
            const availableLimit = 2500 - limitsResult.totalAfter;
            document.getElementById('available-limit').textContent = `$${availableLimit.toFixed(2)}`;
            
            if (!limitsResult.allowed) {
                showValidationErrors([limitsResult.reason]);
            } else {
                hideValidationErrors();
            }
        }
        
        function showValidationErrors(errors) {
            const errorsSection = document.getElementById('validation-errors');
            const errorsList = document.getElementById('error-list');
            
            if (errorsSection && errorsList) {
                errorsSection.style.display = 'block';
                errorsList.innerHTML = '';
                
                errors.forEach(error => {
                    const li = document.createElement('li');
                    li.textContent = error;
                    errorsList.appendChild(li);
                });
            }
        }
        
        function hideValidationErrors() {
            const errorsSection = document.getElementById('validation-errors');
            if (errorsSection) {
                errorsSection.style.display = 'none';
            }
        }
        
        async function handleDepositSubmit(event) {
            event.preventDefault();
            
            const submitBtn = document.getElementById('create-deposit-btn');
            const btnText = submitBtn.querySelector('.btn-text');
            const btnLoading = submitBtn.querySelector('.btn-loading');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            btnText.style.display = 'none';
            btnLoading.style.display = 'inline-flex';
            submitBtn.disabled = true;
            
            try {
                const formData = {
                    planId: document.getElementById('deposit-plan').value,
                    amount: parseFloat(document.getElementById('deposit-amount').value),
                    currency: document.getElementById('deposit-currency').value,
                    address: document.getElementById('deposit-address').value
                };
                
                const result = await window.EnhancedDepositSystem.createDeposit(formData);
                
                if (result.success) {
                    alert('‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
                    closeDepositForm();
                    loadUserDepositStats();
                } else {
                    showValidationErrors([result.error]);
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
                showValidationErrors(['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞']);
            } finally {
                // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                btnText.style.display = 'inline';
                btnLoading.style.display = 'none';
                submitBtn.disabled = false;
            }
        }
        
        // MCP-MARKER:FUNCTION:CLOSE_DEPOSIT_FORM - –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞
    function closeDepositForm() {
            const formContainer = document.getElementById('deposit-form-container');
            if (formContainer) {
                formContainer.style.display = 'none';
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                const form = document.getElementById('enhanced-deposit-form');
                if (form) {
                    form.reset();
                    hideCalculation();
                    hideValidationErrors();
            const limits = document.getElementById('deposit-limits');
            if (limits) limits.style.display = 'none';
                }
            }
        }
        
        function loadUserDepositStats() {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const elTotal = document.getElementById('total-deposits');
        const elEarnings = document.getElementById('total-earnings');
        const elActive = document.getElementById('active-deposits');
        if (elTotal) elTotal.textContent = '$0';
        if (elEarnings) elEarnings.textContent = '$0';
        if (elActive) elActive.textContent = '0';
        }
        
        // MCP-MARKER:FUNCTION:PASTE_FROM_CLIPBOARD - –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        function pasteFromClipboard(inputId) {
            navigator.clipboard.readText()
                .then(text => {
                    const input = document.getElementById(inputId);
                    if (input) {
                        input.value = text;
                        input.dispatchEvent(new Event('input'));
                    }
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞:', err);
                });
        }
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.selectDepositPlan = selectDepositPlan;
        window.closeDepositForm = closeDepositForm;
        window.pasteFromClipboard = pasteFromClipboard;
        
        // MCP-MARKER:FUNCTION:CHECK_CABINET_ACCESS - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
        function checkCabinetAccess() {
            try {
                const savedAddress = localStorage.getItem('genesis_user_address');
                const authStatus = localStorage.getItem('genesis_auth_status');
                const quickAccess = document.getElementById('quick-cabinet-access');
                const authSection = document.getElementById('genesis-auth-section');
                
                if (savedAddress && quickAccess) {
                    console.log('üè¶ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥');
                    quickAccess.classList.add('show');
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (authSection) {
                        authSection.style.opacity = '0.5';
                        authSection.style.pointerEvents = 'none';
                    }
                } else {
                    if (quickAccess) {
                        quickAccess.classList.remove('show');
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (authSection) {
                        authSection.style.opacity = '1';
                        authSection.style.pointerEvents = 'auto';
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É:', error);
            }
        }
        
