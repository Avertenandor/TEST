/**
 * GENESIS 1.1 - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 * MCP-MARKER:MODULE:ENHANCED_DEPOSITS - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 * MCP-MARKER:FILE:DEPOSITS_ENHANCED_JS - –§–∞–π–ª —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

// MCP-MARKER:CLASS:ENHANCED_DEPOSIT_SYSTEM - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
window.EnhancedDepositSystem = {
    
    // MCP-MARKER:PROPERTY:VALIDATION_RULES - –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validationRules: {
        minAmount: 25,
        maxAmount: 2500,
        allowedCurrencies: ['USDT', 'PLEX'],
        addressPattern: /^0x[a-fA-F0-9]{40}$/
    },
    
    // MCP-MARKER:METHOD:VALIDATE_DEPOSIT - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    async validateDeposit(depositData) {
        const errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
        if (!depositData.address || !this.validationRules.addressPattern.test(depositData.address)) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BSC –∞–¥—Ä–µ—Å–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
        if (!depositData.amount || depositData.amount < this.validationRules.minAmount) {
            errors.push(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: $${this.validationRules.minAmount}`);
        }
        
        if (depositData.amount > this.validationRules.maxAmount) {
            errors.push(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: $${this.validationRules.maxAmount}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã
        if (!depositData.currency || !this.validationRules.allowedCurrencies.includes(depositData.currency)) {
            errors.push(`–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã: ${this.validationRules.allowedCurrencies.join(', ')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
        const plan = this.getDepositPlan(depositData.planId);
        if (!plan) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–∞');
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–ª–∞–Ω–∞
            if (!plan.currencies.includes(depositData.currency)) {
                errors.push(`–ü–ª–∞–Ω "${plan.title}" –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ: ${plan.currencies.join(', ')}`);
            }
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    },
    
    // MCP-MARKER:METHOD:GET_DEPOSIT_PLAN - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
    getDepositPlan(planId) {
        const config = window.GENESIS_CONFIG;
        return config.depositPlans.find(plan => plan.id === planId);
    },
    
    // MCP-MARKER:METHOD:CALCULATE_RETURNS - –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    calculateReturns(amount, planId) {
        const plan = this.getDepositPlan(planId);
        if (!plan) return null;
        
        const principal = parseFloat(amount);
        const returns = (principal * plan.percentage / 100) - principal;
        const dailyReturn = returns / plan.days;
        
        return {
            principal: principal,
            totalReturns: returns,
            totalAmount: principal + returns,
            dailyReturn: dailyReturn,
            percentage: plan.percentage,
            days: plan.days,
            plan: plan
        };
    },
    
    // MCP-MARKER:METHOD:CHECK_DEPOSIT_LIMITS - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    async checkDepositLimits(userAddress, newAmount) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            const result = await window.GenesisAPI.checkDepositLimitsForAddress(userAddress, newAmount);
            return result;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
            return {
                allowed: false,
                reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
                currentAmount: 0,
                newAmount: newAmount,
                totalAfter: newAmount
            };
        }
    },
    
    // MCP-MARKER:METHOD:CREATE_DEPOSIT - –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    async createDeposit(depositData) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = await this.validateDeposit(depositData);
            if (!validation.isValid) {
                throw new Error(validation.errors.join('; '));
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            const limitsCheck = await this.checkDepositLimits(depositData.address, depositData.amount);
            if (!limitsCheck.allowed) {
                throw new Error(limitsCheck.reason);
            }
            
            // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const returns = this.calculateReturns(depositData.amount, depositData.planId);
            if (!returns) {
                throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏');
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
            const transaction = await window.GenesisTransaction.createTransaction('deposit', {
                ...depositData,
                returns: returns,
                status: 'pending',
                createdAt: new Date(),
                expiresAt: new Date(Date.now() + returns.days * 24 * 60 * 60 * 1000)
            });
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(
                    `üí∞ –°–æ–∑–¥–∞–Ω –¥–µ–ø–æ–∑–∏—Ç: $${depositData.amount} ${depositData.currency} (–ü–ª–∞–Ω: ${returns.plan.title})`,
                    'success'
                );
            }
            
            return {
                success: true,
                transaction: transaction,
                returns: returns
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${error.message}`, 'error');
            }
            
            return {
                success: false,
                error: error.message
            };
        }
    },
    
    // MCP-MARKER:METHOD:FORMAT_CURRENCY - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    formatCurrency(amount, currency = 'USD') {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency === 'USDT' ? 'USD' : currency,
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(amount);
    },
    
    // MCP-MARKER:METHOD:GET_AVAILABLE_PLANS - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    getAvailablePlans() {
        const config = window.GENESIS_CONFIG;
        return config.depositPlans.sort((a, b) => a.order - b.order);
    },
    
    // MCP-MARKER:METHOD:INIT - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    init() {
        console.log('üè¶ Enhanced Deposit System initialized');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        window.validateDeposit = this.validateDeposit.bind(this);
        window.createDeposit = this.createDeposit.bind(this);
        window.calculateReturns = this.calculateReturns.bind(this);
        
        return this;
    }
};

// MCP-MARKER:INITIALIZATION:AUTO_INIT - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.EnhancedDepositSystem.init();
});

console.log('üì¶ Enhanced Deposit System loaded successfully');
