/**
 * GENESIS 1.1 - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
 * MCP-MARKER:MODULE:CABINET_DEPOSIT_INTEGRATION - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
 * MCP-MARKER:FILE:CABINET_DEPOSIT_INTEGRATION_JS - –§–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

// MCP-MARKER:CLASS:GENESIS_CABINET - –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
window.GenesisCabinet = {
    
    // MCP-MARKER:PROPERTY:CABINET_STATE - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞
    currentUser: null,
    selectedPlan: null,
    activeModal: null,
    transactionInProgress: false,
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:INIT - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
    init: function(userAddress) {
        console.log('üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Genesis Cabinet...');
        this.currentUser = userAddress;
        this.setupEventListeners();
        this.loadUserDeposits();
        console.log('‚úÖ Genesis Cabinet –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:SETUP_LISTENERS - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners: function() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('click', (e) => {
            if (e.target.closest('.modal-overlay') && !e.target.closest('.modal-container')) {
                this.closeAllModals();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.activeModal) {
                this.closeAllModals();
            }
        });
        
        console.log('üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:LOAD_DEPOSITS - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserDeposits: async function() {
        if (!this.currentUser) return;
        
        try {
            if (window.CabinetDepositService) {
                await window.CabinetDepositService.init(this.currentUser);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
        }
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:SHOW_MODAL - –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    showDepositModal: function(selectedPlanId = null) {
        console.log('üí∞ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞');
        
        this.selectedPlan = selectedPlanId;
        const modal = document.getElementById('create-deposit-modal');
        const content = document.getElementById('deposit-modal-content');
        
        if (!modal || !content) {
            alert('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        content.innerHTML = this.generateDepositModalContent();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.classList.remove('hidden');
        this.activeModal = 'create-deposit';
        
        // –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª–∏
        if (selectedPlanId) {
            this.selectDepositPlan(selectedPlanId);
        }
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:GENERATE_CONTENT - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    generateDepositModalContent: function() {
        if (!window.GENESIS_CONFIG || !window.GENESIS_CONFIG.depositPlans) {
            return `
                <div class="empty-state">
                    <div class="empty-icon">‚ùå</div>
                    <h3>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
                    <p>–ü–ª–∞–Ω—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                </div>
            `;
        }
        
        const plans = window.GENESIS_CONFIG.depositPlans;
        const userPlanIds = this.getUserPlanIds();
        
        return `
            <div class="deposit-wizard">
                <div class="wizard-steps" style="display: flex; justify-content: center; margin-bottom: 2rem; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem;">
                    <div class="step active" data-step="1">
                        <span class="step-number">1</span>
                        <span class="step-title">–í—ã–±–æ—Ä –ø–ª–∞–Ω–∞</span>
                    </div>
                    <div class="step" data-step="2">
                        <span class="step-number">2</span>
                        <span class="step-title">–û–ø–ª–∞—Ç–∞</span>
                    </div>
                    <div class="step" data-step="3">
                        <span class="step-number">3</span>
                        <span class="step-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</span>
                    </div>
                </div>
                
                <div id="step-1" class="wizard-step active">
                    <h4 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">
                        üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–∞
                    </h4>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem; max-height: 400px; overflow-y: auto;">
                        ${plans.map(plan => this.generatePlanOptionCard(plan, userPlanIds)).join('')}
                    </div>
                    
                    <div style="margin-top: 1.5rem; padding: 1rem; background: var(--bg-primary); border-radius: 8px; border-left: 4px solid var(--secondary-color);">
                        <h5 style="color: var(--secondary-color); margin-bottom: 0.5rem;">‚ÑπÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h5>
                        <ul style="color: var(--text-secondary); font-size: 0.9rem; line-height: 1.6; margin: 0; padding-left: 1.5rem;">
                            <li>–î–µ–ø–æ–∑–∏—Ç—ã –ø–æ–∫—É–ø–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)</li>
                            <li>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –æ—Ç–∫—Ä–æ—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö</li>
                            <li>–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ–ø–ª–∞—Ç—É PLEX —Ç–æ–∫–µ–Ω–∞–º–∏</li>
                            <li>–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ BSC</li>
                        </ul>
                    </div>
                </div>
                
                <div id="step-2" class="wizard-step hidden">
                    <div id="payment-details">
                        <!-- –î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
                
                <div id="step-3" class="wizard-step hidden">
                    <div id="confirmation-details">
                        <!-- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
            </div>
            
            <style>
                .wizard-steps {
                    display: flex;
                    justify-content: center;
                    gap: 2rem;
                }
                
                .step {
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                    color: var(--text-secondary);
                    font-size: 0.9rem;
                }
                
                .step.active {
                    color: var(--primary-color);
                }
                
                .step-number {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    background: var(--bg-primary);
                    border: 2px solid var(--border-color);
                    font-weight: 600;
                    font-size: 0.8rem;
                }
                
                .step.active .step-number {
                    background: var(--primary-color);
                    border-color: var(--primary-color);
                    color: white;
                }
                
                .wizard-step {
                    min-height: 400px;
                }
                
                .wizard-step.hidden {
                    display: none;
                }
                
                .plan-option-card {
                    background: var(--bg-primary);
                    border: 2px solid var(--border-color);
                    border-radius: 8px;
                    padding: 1rem;
                    cursor: pointer;
                    transition: all 0.3s ease;
                }
                
                .plan-option-card:hover:not(.disabled) {
                    border-color: var(--primary-color);
                    transform: translateY(-2px);
                }
                
                .plan-option-card.selected {
                    border-color: var(--primary-color);
                    background: rgba(255, 107, 53, 0.1);
                }
                
                .plan-option-card.disabled {
                    opacity: 0.5;
                    cursor: not-allowed;
                }
                
                .plan-option-card.purchased {
                    border-color: var(--success-color);
                    background: rgba(0, 255, 65, 0.1);
                }
            </style>
        `;
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:GENERATE_CARD - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞
    generatePlanOptionCard: function(plan, userPlanIds) {
        const hasThisPlan = userPlanIds.includes(plan.id);
        const isLocked = this.isPlanLocked(plan, userPlanIds);
        const profit = (plan.usdtAmount * plan.percentage / 100) - plan.usdtAmount;
        const dailyProfit = profit / plan.days;
        
        let cardClass = 'plan-option-card';
        let statusBadge = '';
        
        if (hasThisPlan) {
            cardClass += ' purchased';
            statusBadge = '<div style="background: var(--success-color); color: white; padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">‚úÖ –ü–†–ò–û–ë–†–ï–¢–ï–ù</div>';
        } else if (isLocked) {
            cardClass += ' disabled';
            statusBadge = '<div style="background: var(--warning-color); color: var(--bg-primary); padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù</div>';
        } else {
            statusBadge = '<div style="background: var(--secondary-color); color: var(--bg-primary); padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.7rem; font-weight: 600;">üöÄ –î–û–°–¢–£–ü–ï–ù</div>';
        }
        
        const clickHandler = hasThisPlan || isLocked ? '' : `onclick="window.GenesisCabinet.selectDepositPlan('${plan.id}')"`;
        
        return `
            <div class="${cardClass}" ${clickHandler} id="plan-card-${plan.id}">
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem;">
                    <div>
                        <h5 style="color: var(--primary-color); margin: 0 0 0.3rem 0; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">${this.getPlanIcon(plan.name)}</span>
                            ${plan.name}
                        </h5>
                        <p style="color: var(--text-secondary); font-size: 0.8rem; margin: 0;">${plan.description}</p>
                    </div>
                    ${statusBadge}
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                    <div style="text-align: center; padding: 0.5rem; background: var(--bg-secondary); border-radius: 4px;">
                        <div style="font-size: 1.1rem; font-weight: 600; color: var(--text-primary);">$${plan.usdtAmount}</div>
                        <div style="font-size: 0.7rem; color: var(--text-secondary);">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è</div>
                    </div>
                    <div style="text-align: center; padding: 0.5rem; background: var(--bg-secondary); border-radius: 4px;">
                        <div style="font-size: 1.1rem; font-weight: 600; color: var(--success-color);">${plan.percentage}%</div>
                        <div style="font-size: 0.7rem; color: var(--text-secondary);">${plan.days} –¥–Ω–µ–π</div>
                    </div>
                </div>
                
                <div style="font-size: 0.8rem; color: var(--text-secondary); text-align: center;">
                    üí∞ –ü—Ä–∏–±—ã–ª—å: <span style="color: var(--success-color); font-weight: 600;">$${profit.toFixed(2)}</span> 
                    ‚Ä¢ –í –¥–µ–Ω—å: <span style="color: var(--warning-color); font-weight: 600;">$${dailyProfit.toFixed(2)}</span>
                </div>
                
                <div style="margin-top: 1rem; font-size: 0.8rem; color: var(--secondary-color); text-align: center;">
                    –í–∞–ª—é—Ç—ã: ${plan.currencies.join(', ')}
                </div>
            </div>
        `;
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:SELECT_PLAN - –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
    selectDepositPlan: function(planId) {
        console.log('üìã –í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω:', planId);
        
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === planId);
        if (!plan) {
            alert('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞
        const userPlanIds = this.getUserPlanIds();
        if (this.isPlanLocked(plan, userPlanIds)) {
            alert('üîí –≠—Ç–æ—Ç –ø–ª–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–ª–∞–Ω—ã.');
            return;
        }
        
        if (userPlanIds.includes(planId)) {
            alert('‚úÖ –≠—Ç–æ—Ç –ø–ª–∞–Ω —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω');
            return;
        }
        
        this.selectedPlan = plan;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        document.querySelectorAll('.plan-option-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        const selectedCard = document.getElementById(`plan-card-${planId}`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        setTimeout(() => {
            this.nextWizardStep();
        }, 500);
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:NEXT_STEP - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –º–∞—Å—Ç–µ—Ä–∞
    nextWizardStep: function() {
        const currentStep = document.querySelector('.wizard-step.active');
        const currentStepNumber = parseInt(currentStep.id.split('-')[1]);
        
        if (currentStepNumber === 1 && !this.selectedPlan) {
            alert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–∞');
            return;
        }
        
        const nextStepNumber = currentStepNumber + 1;
        const nextStep = document.getElementById(`step-${nextStepNumber}`);
        
        if (!nextStep) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        currentStep.classList.remove('active');
        currentStep.classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        nextStep.classList.remove('hidden');
        nextStep.classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
        document.querySelectorAll('.step').forEach(step => {
            step.classList.remove('active');
        });
        document.querySelector(`[data-step="${nextStepNumber}"]`).classList.add('active');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞
        if (nextStepNumber === 2) {
            this.loadPaymentStep();
        } else if (nextStepNumber === 3) {
            this.loadConfirmationStep();
        }
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:LOAD_PAYMENT - –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–≥–∞ –æ–ø–ª–∞—Ç—ã
    loadPaymentStep: function() {
        if (!this.selectedPlan) return;
        
        const paymentContainer = document.getElementById('payment-details');
        const plan = this.selectedPlan;
        
        paymentContainer.innerHTML = `
            <h4 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">
                üí≥ –û–ø–ª–∞—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${plan.name}
            </h4>
            
            <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px; margin-bottom: 2rem; border: 1px solid var(--border-color);">
                <h5 style="color: var(--text-primary); margin-bottom: 1rem;">üìä –î–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:</h5>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–ü–ª–∞–Ω:</div>
                        <div style="color: var(--primary-color); font-weight: 600;">${plan.name}</div>
                    </div>
                    <div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è:</div>
                        <div style="color: var(--text-primary); font-weight: 600;">$${plan.usdtAmount}</div>
                    </div>
                    <div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</div>
                        <div style="color: var(--success-color); font-weight: 600;">${plan.percentage}%</div>
                    </div>
                    <div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–°—Ä–æ–∫:</div>
                        <div style="color: var(--warning-color); font-weight: 600;">${plan.days} –¥–Ω–µ–π</div>
                    </div>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: ${plan.currencies.length > 1 ? '1fr 1fr' : '1fr'}; gap: 1.5rem;">
                ${plan.currencies.map(currency => this.generatePaymentOption(plan, currency)).join('')}
            </div>
            
            <div style="margin-top: 2rem; padding: 1rem; background: rgba(255, 165, 0, 0.1); border-radius: 8px; border: 1px solid var(--warning-color);">
                <h5 style="color: var(--warning-color); margin-bottom: 0.5rem;">‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</h5>
                <ul style="color: var(--text-secondary); font-size: 0.9rem; line-height: 1.6; margin: 0; padding-left: 1.5rem;">
                    <li>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</li>
                    <li>–î–µ–ø–æ–∑–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ</li>
                    <li>–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3-5 –º–∏–Ω—É—Ç</li>
                    <li>–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∏—Ä–∂–µ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤</li>
                </ul>
            </div>
            
            <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 2rem;">
                <button onclick="window.GenesisCabinet.previousWizardStep()" class="btn-outline">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
                <button onclick="window.GenesisCabinet.checkPaymentStatus()" class="btn" id="check-payment-btn">
                    üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É
                </button>
            </div>
        `;
    },
    
    // MCP-MARKER:METHOD:CABINET_DEPOSIT:PAYMENT_OPTION - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã
    generatePaymentOption: function(plan, currency) {
        const amount = currency === 'USDT' ? plan.usdtAmount : plan.plexAmount;
        const address = currency === 'USDT' ? 
            window.GENESIS_CONFIG.addresses.system : 
            window.GENESIS_CONFIG.plex.address;
        
        return `
            <div class="payment-option" style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px; border: 2px solid var(--border-color); cursor: pointer;" onclick="window.GenesisCabinet.selectPaymentCurrency('${currency}')">
                <div style="text-align: center; margin-bottom: 1rem;">
                    <div style="font-size: 2rem; margin-bottom: 0.5rem;">
                        ${currency === 'USDT' ? 'üí∞' : 'ü™ô'}
                    </div>
                    <h5 style="color: var(--primary-color); margin: 0;">–û–ø–ª–∞—Ç–∞ ${currency}</h5>
                </div>
                
                <div style="background: var(--bg-secondary); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                    <div style="text-align: center;">
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">–ö –æ–ø–ª–∞—Ç–µ:</div>
                        <div style="color: var(--text-primary); font-size: 1.5rem; font-weight: 700; font-family: 'Orbitron', monospace;">
                            ${amount.toFixed(currency === 'USDT' ? 2 : 0)} ${currency}
                        </div>
                    </div>
                </div>
                
                <div style="background: var(--bg-secondary); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                    <div style="color: var(--text-secondary); font-size: 0.8rem; margin-bottom: 0.3rem;">–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:</div>
                    <div style="font-family: monospace; font-size: 0.85rem; color: var(--secondary-color); word-break: break-all; padding: 0.5rem; background: var(--bg-primary); border-radius: 4px;">
                        ${address}
                    </div>
                    <button onclick="window.GenesisCabinet.copyToClipboard('${address}', '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!')" class="btn-secondary" style="width: 100%; margin-top: 0.5rem; font-size: 0.8rem;">
