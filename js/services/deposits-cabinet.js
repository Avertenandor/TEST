/**
 * GENESIS 1.1 - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
 * MCP-MARKER:MODULE:CABINET_DEPOSITS - –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞
 * MCP-MARKER:FILE:DEPOSITS_CABINET_JS - –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞
 */

// MCP-MARKER:CLASS:CABINET_DEPOSIT_SERVICE - –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
window.CabinetDepositService = {
    
    // MCP-MARKER:PROPERTY:STATE_MANAGEMENT - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    currentUser: null,
    userDeposits: [],
    isLoading: false,
    lastUpdate: null,
    
    // MCP-MARKER:METHOD:INIT_SERVICE - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    async init(userAddress) {
        console.log('üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞...');
        
        this.currentUser = userAddress;
        this.isLoading = true;
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.loadUserData();
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('‚úÖ –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
            }
            
            console.log('‚úÖ –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            }
        } finally {
            this.isLoading = false;
        }
    },
    
    // MCP-MARKER:METHOD:LOAD_USER_DATA - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserData() {
        if (!this.currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        
        try {
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ BSC...', 'info');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ BSC
            this.userDeposits = await this.checkUserDeposits(this.currentUser);
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.userDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞`);
            
            this.lastUpdate = new Date();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            this.saveLocalDeposits();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateUI();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            
            // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
            this.userDeposits = this.loadLocalDeposits();
            console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BSC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('‚ö†Ô∏è BSC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
            }
            
            this.updateUI();
        }
    },
    
    // MCP-MARKER:METHOD:CHECK_USER_DEPOSITS - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ BSC
    async checkUserDeposits(userAddress) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å
            const transactions = await this.getTransactionsForAddress(userAddress);
            
            // –ü–∞—Ä—Å–∏–º –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            const deposits = this.parseDepositsFromTransactions(transactions);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            const updatedDeposits = this.updateDepositStatuses(deposits);
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${updatedDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ BSC`, 'success');
            }
            
            return updatedDeposits;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ BSC:', error);
            throw error;
        }
    },
    
    // MCP-MARKER:METHOD:GET_TRANSACTIONS_FOR_ADDRESS - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞
    async getTransactionsForAddress(address) {
        const systemAddress = window.GENESIS_CONFIG.addresses.system;
        const apiKey = window.getApiKeyForOperation('DEPOSITS');
        
        // –ü–æ–ª—É—á–∞–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const usdtTxUrl = `${window.GENESIS_CONFIG.bscscan.apiUrl}?module=account&action=tokentx&contractaddress=${window.GENESIS_CONFIG.usdt.address}&address=${systemAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`;
        
        // –ü–æ–ª—É—á–∞–µ–º PLEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const plexTxUrl = `${window.GENESIS_CONFIG.bscscan.apiUrl}?module=account&action=tokentx&contractaddress=${window.GENESIS_CONFIG.plex.address}&address=${systemAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`;
        
        const [usdtResponse, plexResponse] = await Promise.all([
            fetch(usdtTxUrl),
            fetch(plexTxUrl)
        ]);
        
        const usdtData = await usdtResponse.json();
        const plexData = await plexResponse.json();
        
        const allTransactions = [
            ...(usdtData.result || []),
            ...(plexData.result || [])
        ];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return allTransactions.filter(tx => 
            tx.from.toLowerCase() === address.toLowerCase() &&
            tx.to.toLowerCase() === systemAddress.toLowerCase()
        ).sort((a, b) => parseInt(b.timeStamp) - parseInt(a.timeStamp));
    },
    
    // MCP-MARKER:METHOD:PARSE_DEPOSITS_FROM_TRANSACTIONS - –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    parseDepositsFromTransactions(transactions) {
        const deposits = [];
        
        transactions.forEach(tx => {
            const amount = this.parseTransactionAmount(tx);
            const currency = this.getTransactionCurrency(tx);
            const plan = window.getDepositPlanByAmount(amount, currency);
            
            if (plan) {
                const deposit = {
                    txHash: tx.hash,
                    userAddress: tx.from,
                    planId: plan.id,
                    amount: amount,
                    tokenType: currency,
                    status: 'ACTIVE',
                    timestamp: new Date(parseInt(tx.timeStamp) * 1000),
                    endDate: new Date(parseInt(tx.timeStamp) * 1000 + (plan.days * 24 * 60 * 60 * 1000)),
                    blockNumber: parseInt(tx.blockNumber),
                    confirmations: parseInt(tx.confirmations || 0)
                };
                
                deposits.push(deposit);
            }
        });
        
        return deposits;
    },
    
    // MCP-MARKER:METHOD:PARSE_TRANSACTION_AMOUNT - –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    parseTransactionAmount(tx) {
        const decimals = tx.tokenDecimal || (tx.tokenSymbol === 'USDT' ? 18 : 9);
        return parseFloat(tx.value) / Math.pow(10, decimals);
    },
    
    // MCP-MARKER:METHOD:GET_TRANSACTION_CURRENCY - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    getTransactionCurrency(tx) {
        const contractAddress = tx.contractAddress.toLowerCase();
        const usdtAddress = window.GENESIS_CONFIG.usdt.address.toLowerCase();
        const plexAddress = window.GENESIS_CONFIG.plex.address.toLowerCase();
        
        if (contractAddress === usdtAddress) return 'USDT';
        if (contractAddress === plexAddress) return 'PLEX';
        return tx.tokenSymbol || 'UNKNOWN';
    },
    
    // MCP-MARKER:METHOD:UPDATE_DEPOSIT_STATUSES - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    updateDepositStatuses(deposits) {
        const now = new Date();
        
        return deposits.map(deposit => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –¥–µ–ø–æ–∑–∏—Ç
            if (deposit.endDate <= now && deposit.status === 'ACTIVE') {
                deposit.status = 'COMPLETED';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            if (deposit.confirmations < 12 && deposit.status === 'ACTIVE') {
                deposit.status = 'PENDING';
            }
            
            return deposit;
        });
    },
    
    // MCP-MARKER:METHOD:SAVE_LOCAL_DEPOSITS - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ localStorage
    saveLocalDeposits() {
        try {
            const dataToSave = {
                deposits: this.userDeposits,
                timestamp: new Date().toISOString(),
                userAddress: this.currentUser
            };
            
            localStorage.setItem(`genesis_deposits_${this.currentUser}`, JSON.stringify(dataToSave));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
        }
    },
    
    // MCP-MARKER:METHOD:LOAD_LOCAL_DEPOSITS - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ localStorage
    loadLocalDeposits() {
        try {
            const saved = localStorage.getItem(`genesis_deposits_${this.currentUser}`);
            if (!saved) return [];
            
            const data = JSON.parse(saved);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            const saveTime = new Date(data.timestamp);
            const now = new Date();
            const diffMinutes = (now - saveTime) / (1000 * 60);
            
            if (diffMinutes > 5) {
                console.log('–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                return [];
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫
            return (data.deposits || []).map(deposit => ({
                ...deposit,
                timestamp: new Date(deposit.timestamp),
                endDate: new Date(deposit.endDate)
            }));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
            return [];
        }
    },
    
    // MCP-MARKER:METHOD:UPDATE_UI - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        this.updatePortfolioStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        this.updateActiveDepositsTable();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        this.updateDepositPlansGrid();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–ª–∞–Ω–µ
        this.updateNextAvailablePlan();
    },
    
    // MCP-MARKER:METHOD:UPDATE_PORTFOLIO_STATS - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    updatePortfolioStats() {
        const stats = this.calculatePortfolioStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const updates = {
            'portfolio-total-value': `$${stats.totalValue.toFixed(2)}`,
            'portfolio-change': `+$${stats.totalEarned.toFixed(2)} –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ`,
            'portfolio-roi': `üìä ROI: +${stats.roi.toFixed(1)}%`,
            'active-deposits-count': stats.activeCount,
            'active-deposits-status': stats.activeCount > 0 ? '–ê–∫—Ç–∏–≤–Ω—ã' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
            'total-earned': `$${stats.totalEarned.toFixed(2)}`,
            'daily-earnings': `+$${stats.dailyEarnings.toFixed(2)} —Å–µ–≥–æ–¥–Ω—è`,
            'earnings-daily': `üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: $${stats.dailyEarnings.toFixed(2)}`,
            'earnings-trend': `üìà –¢—Ä–µ–Ω–¥: +${stats.growthTrend.toFixed(1)}%`
        };
        
        Object.entries(updates).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º breakdown –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        const depositsBreakdown = document.getElementById('deposits-breakdown');
        if (depositsBreakdown) {
            depositsBreakdown.innerHTML = this.generateDepositsBreakdown(stats);
        }
    },
    
    // MCP-MARKER:METHOD:CALCULATE_PORTFOLIO_STATS - –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    calculatePortfolioStats() {
        let totalValue = 0;
        let totalEarned = 0;
        let dailyEarnings = 0;
        let activeCount = 0;
        let totalExpectedProfit = 0;
        
        const now = new Date();
        
        this.userDeposits.forEach(deposit => {
            totalValue += deposit.amount;
            
            if (deposit.status === 'ACTIVE') {
                activeCount++;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
                const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
                if (plan) {
                    const totalProfit = (deposit.amount * plan.percentage / 100) - deposit.amount;
                    const dailyProfit = totalProfit / plan.days;
                    totalExpectedProfit += totalProfit;
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    const daysPassed = Math.floor((now - deposit.timestamp) / (1000 * 60 * 60 * 24));
                    const earnedProfit = Math.min(totalProfit, dailyProfit * daysPassed);
                    
                    totalEarned += earnedProfit;
                    dailyEarnings += dailyProfit;
                }
            }
        });
        
        const roi = totalValue > 0 ? ((totalEarned / totalValue) * 100) : 0;
        const growthTrend = totalExpectedProfit > 0 ? ((totalEarned / totalExpectedProfit) * 100) : 0;
        
        return {
            totalValue,
            totalEarned,
            dailyEarnings,
            activeCount,
            totalCount: this.userDeposits.length,
            roi,
            growthTrend,
            totalExpectedProfit
        };
    },
    
    // MCP-MARKER:METHOD:GENERATE_DEPOSITS_BREAKDOWN - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è breakdown –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    generateDepositsBreakdown(stats) {
        const planCounts = {};
        
        this.userDeposits.forEach(deposit => {
            if (deposit.status === 'ACTIVE') {
                const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
                if (plan) {
                    planCounts[plan.name] = (planCounts[plan.name] || 0) + 1;
                }
            }
        });
        
        const breakdown = Object.entries(planCounts).map(([planName, count]) => 
            `<div>${this.getPlanIcon(planName)} ${planName}: ${count} –∞–∫—Ç–∏–≤–Ω${count === 1 ? '—ã–π' : '—ã—Ö'}</div>`
        ).join('');
        
        return breakdown || '<div>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</div>';
    },
    
    // MCP-MARKER:METHOD:UPDATE_ACTIVE_DEPOSITS_TABLE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    updateActiveDepositsTable() {
        const container = document.getElementById('active-deposits-container');
        if (!container) return;
        
        const activeDeposits = this.userDeposits.filter(d => d.status === 'ACTIVE');
        
        if (activeDeposits.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üíº</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –≤ GENESIS 1.1</p>
                    <button class="btn" onclick="window.CabinetDepositService.showCreateDepositModal()">
                        üöÄ –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                    </button>
                </div>
            `;
            return;
        }
        
        container.innerHTML = `
            <div style="overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="border-bottom: 2px solid var(--border-color);">
                            <th style="padding: 12px; text-align: left; color: var(--text-primary);">–ü–ª–∞–Ω</th>
                            <th style="padding: 12px; text-align: right; color: var(--text-primary);">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è</th>
                            <th style="padding: 12px; text-align: right; color: var(--text-primary);">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</th>
                            <th style="padding: 12px; text-align: right; color: var(--text-primary);">–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
                            <th style="padding: 12px; text-align: center; color: var(--text-primary);">–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${activeDeposits.map(deposit => this.renderDepositRow(deposit)).join('')}
                    </tbody>
                </table>
            </div>
        `;
    },
    
    // MCP-MARKER:METHOD:RENDER_DEPOSIT_ROW - –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
    renderDepositRow(deposit) {
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
        if (!plan) return '';
        
        const now = new Date();
        const daysPassed = Math.floor((now - deposit.timestamp) / (1000 * 60 * 60 * 24));
        const progress = Math.min(100, (daysPassed / plan.days) * 100);
        
        const totalProfit = (deposit.amount * plan.percentage / 100) - deposit.amount;
        const dailyProfit = totalProfit / plan.days;
        const earnedProfit = Math.min(totalProfit, dailyProfit * daysPassed);
        
        const daysRemaining = Math.max(0, plan.days - daysPassed);
        
        return `
            <tr style="border-bottom: 1px solid var(--bg-primary);">
                <td style="padding: 12px;">
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="font-size: 1.2rem;">${this.getPlanIcon(plan.name)}</span>
                        <div>
                            <div style="color: var(--text-primary); font-weight: 600;">${plan.name}</div>
                            <div style="color: var(--text-secondary); font-size: 0.8rem;">
                                ${plan.days} –¥–Ω–µ–π ‚Ä¢ ${plan.percentage}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                            </div>
                        </div>
                    </div>
                </td>
                <td style="padding: 12px; text-align: right;">
                    <div style="color: var(--text-primary); font-weight: 600;">$${deposit.amount.toFixed(2)}</div>
                    <div style="color: var(--text-secondary); font-size: 0.8rem;">${deposit.tokenType}</div>
                </td>
                <td style="padding: 12px; text-align: right;">
                    <div style="color: var(--success-color); font-weight: 600;">+$${earnedProfit.toFixed(2)}</div>
                    <div style="color: var(--text-secondary); font-size: 0.8rem;">
                        ${dailyProfit.toFixed(2)}/–¥–µ–Ω—å
                    </div>
                </td>
                <td style="padding: 12px; text-align: right;">
                    <div style="color: var(--warning-color); font-weight: 600;">
                        ${progress.toFixed(1)}% ‚Ä¢ ${daysRemaining}–¥
                    </div>
                    <div style="background: var(--bg-primary); height: 6px; border-radius: 3px; margin-top: 0.3rem; overflow: hidden;">
                        <div style="background: var(--success-color); height: 100%; width: ${progress}%; transition: width 0.3s ease;"></div>
                    </div>
                </td>
                <td style="padding: 12px; text-align: center;">
                    <div style="display: flex; gap: 0.5rem; justify-content: center;">
                        <button onclick="window.CabinetDepositService.viewDepositDetails('${deposit.txHash}')" 
                                class="btn-secondary" style="font-size: 0.7rem; padding: 0.3rem 0.6rem;">
                            üëÅÔ∏è –î–µ—Ç–∞–ª–∏
                        </button>
                        <button onclick="window.CabinetDepositService.viewInBlockchain('${deposit.txHash}')" 
                                class="btn-outline" style="font-size: 0.7rem; padding: 0.3rem 0.6rem;">
                            üåê BSCScan
                        </button>
                    </div>
                </td>
            </tr>
        `;
    },
    
    // MCP-MARKER:METHOD:UPDATE_DEPOSIT_PLANS_GRID - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø–ª–∞–Ω–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    updateDepositPlansGrid() {
        const container = document.getElementById('deposit-plans-grid');
        if (!container) return;
        
        const plans = window.GENESIS_CONFIG.depositPlans;
        const userPlanIds = this.userDeposits.map(d => d.planId);
        
        container.innerHTML = `
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 1.5rem;">
                ${plans.map(plan => this.renderPlanCard(plan, userPlanIds)).join('')}
            </div>
            
            <div class="stats-card" style="margin-top: 2rem;">
                <h3 style="margin-bottom: 1rem; color: var(--primary-color);">üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤</h3>
                <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 2rem;">
                    <div>
                        <h4 style="color: var(--text-primary); margin-bottom: 1rem;">üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ GENESIS 1.1:</h4>
                        <ul style="color: var(--text-secondary); line-height: 1.8; margin: 0; padding-left: 1.5rem;">
                            <li>‚úÖ <strong>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</strong> –ó–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ—ç—Ç–∞–ø–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤</li>
                            <li>‚úÖ <strong>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</strong> –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ BSC</li>
                            <li>‚úÖ <strong>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</strong> –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
                            <li>‚úÖ <strong>–ì–∏–±–∫–æ—Å—Ç—å:</strong> –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –æ–ø–ª–∞—Ç—ã (USDT/PLEX) –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–æ–≤</li>
                            <li>‚úÖ <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã</li>
                        </ul>
                    </div>
                    <div style="text-align: center; padding: 2rem; background: var(--bg-primary); border-radius: 8px;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üîí</div>
                        <h4 style="color: var(--success-color); margin-bottom: 0.5rem;">–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞</h4>
                        <p style="color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 1rem;">
                            –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–ª–∞–Ω–æ–≤
                        </p>
                        <div style="background: var(--bg-secondary); padding: 0.8rem; border-radius: 6px; font-family: monospace; font-size: 0.7rem; word-break: break-all;">
                            ${window.GENESIS_CONFIG.addresses.system}
                        </div>
                    </div>
                </div>
            </div>
        `;
    },
    
    // MCP-MARKER:METHOD:RENDER_PLAN_CARD - –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞
    renderPlanCard(plan, userPlanIds) {
        const hasThisPlan = userPlanIds.includes(plan.id);
        const isLocked = this.isPlanLocked(plan, userPlanIds);
        const profit = (plan.usdtAmount * plan.percentage / 100) - plan.usdtAmount;
        const dailyProfit = profit / plan.days;
        
        let statusBadge, buttonContent, buttonAction;
        
        if (hasThisPlan) {
            statusBadge = '<div style="background: rgba(0, 255, 65, 0.2); color: var(--success-color); padding: 0.3rem 0.6rem; border-radius: 6px; font-size: 0.8rem;">‚úÖ –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω</div>';
            buttonContent = 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä';
            buttonAction = `window.CabinetDepositService.viewPlanDetails('${plan.id}')`;
        } else if (isLocked) {
            statusBadge = '<div style="background: rgba(255, 165, 0, 0.2); color: var(--warning-color); padding: 0.3rem 0.6rem; border-radius: 6px; font-size: 0.8rem;">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</div>';
            buttonContent = 'üîí –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            buttonAction = 'void(0)';
        } else {
            statusBadge = '<div style="background: rgba(0, 212, 255, 0.2); color: var(--secondary-color); padding: 0.3rem 0.6rem; border-radius: 6px; font-size: 0.8rem;">üöÄ –î–æ—Å—Ç—É–ø–µ–Ω</div>';
            buttonContent = 'üí∞ –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç';
            buttonAction = `window.CabinetDepositService.startDepositProcess('${plan.id}')`;
        }
        
        return `
            <div class="stats-card" style="border-left: 4px solid ${this.getPlanColor(plan.id)}; ${isLocked && !hasThisPlan ? 'opacity: 0.7;' : ''}">
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem;">
                    <div>
                        <h4 style="color: ${this.getPlanColor(plan.id)}; margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.5rem;">${this.getPlanIcon(plan.name)}</span>
                            ${plan.name}
                        </h4>
                        <p style="color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 0.5rem;">
                            ${plan.description}
                        </p>
                        ${statusBadge}
                    </div>
                    <div style="text-align: right;">
                        <div style="font-size: 1.5rem; font-weight: 700; color: var(--text-primary);">
                            $${plan.usdtAmount.toLocaleString()}
                        </div>
                        <div style="color: var(--success-color); font-size: 0.9rem;">
                            ${plan.percentage}% (${plan.days} –¥–Ω–µ–π)
                        </div>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.8rem; margin-bottom: 1.5rem; font-size: 0.8rem;">
                    <div style="text-align: center; padding: 0.6rem; background: var(--bg-primary); border-radius: 6px;">
                        <div style="color: var(--text-secondary); margin-bottom: 0.2rem;">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è</div>
                        <div style="color: var(--text-primary); font-weight: 600;">$${plan.usdtAmount}</div>
                    </div>
                    <div style="text-align: center; padding: 0.6rem; background: var(--bg-primary); border-radius: 6px;">
                        <div style="color: var(--text-secondary); margin-bottom: 0.2rem;">–ü—Ä–∏–±—ã–ª—å</div>
                        <div style="color: var(--success-color); font-weight: 600;">$${profit.toFixed(2)}</div>
                    </div>
                    <div style="text-align: center; padding: 0.6rem; background: var(--bg-primary); border-radius: 6px;">
                        <div style="color: var(--text-secondary); margin-bottom: 0.2rem;">–í –¥–µ–Ω—å</div>
                        <div style="color: var(--primary-color); font-weight: 600;">$${dailyProfit.toFixed(2)}</div>
                    </div>
                </div>
                
                <div style="display: flex; flex-direction: column; gap: 0.5rem; margin-bottom: 1rem;">
                    <div style="display: flex; justify-content: space-between; font-size: 0.85rem;">
                        <span style="color: var(--text-secondary);">–í–∞–ª—é—Ç—ã:</span>
                        <span style="color: var(--secondary-color); font-weight: 500;">${plan.currencies.join(', ')}</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; font-size: 0.85rem;">
                        <span style="color: var(--text-secondary);">ROI:</span>
                        <span style="color: var(--warning-color); font-weight: 500;">${plan.percentage - 100}% –ø—Ä–∏–±—ã–ª—å</span>
                    </div>
                </div>
                
                <button class="${hasThisPlan || isLocked ? 'btn-outline' : 'btn'}" 
                        onclick="${buttonAction}" 
                        style="width: 100%; font-size: 0.9rem; ${isLocked && !hasThisPlan ? 'opacity: 0.5; cursor: not-allowed;' : ''}"
                        ${isLocked && !hasThisPlan ? 'disabled' : ''}>
                    ${buttonContent}
                </button>
            </div>
        `;
    },
    
    // MCP-MARKER:METHOD:IS_PLAN_LOCKED - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞
    isPlanLocked(plan, userPlanIds) {
        if (plan.id === 'trial') return false; // –ü—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        
        const allPlans = window.GENESIS_CONFIG.depositPlans;
        const planIndex = allPlans.findIndex(p => p.id === plan.id);
        
        if (planIndex === 0) return false; // –ü–µ—Ä–≤—ã–π –ø–ª–∞–Ω –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–ª–∞–Ω—ã –∫—É–ø–ª–µ–Ω—ã
        for (let i = 0; i < planIndex; i++) {
            const prevPlan = allPlans[i];
            if (prevPlan.id !== 'trial' && !userPlanIds.includes(prevPlan.id)) {
                return true;
            }
        }
        
        return false;
    },
    
    // MCP-MARKER:METHOD:UPDATE_NEXT_AVAILABLE_PLAN - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    updateNextAvailablePlan() {
        const userPlanIds = this.userDeposits.map(d => d.planId);
        const allPlans = window.GENESIS_CONFIG.depositPlans;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–ª–∞–Ω
        let nextPlan = allPlans.find(plan => 
            !userPlanIds.includes(plan.id) && !this.isPlanLocked(plan, userPlanIds)
        );
        
        if (!nextPlan) {
            nextPlan = allPlans[allPlans.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –µ—Å–ª–∏ –≤—Å–µ –∫—É–ø–ª–µ–Ω—ã
        }
        
        const updates = {
            'next-available-plan': nextPlan.name,
            'next-plan-status': userPlanIds.includes(nextPlan.id) ? '–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω' : '–î–æ—Å—Ç—É–ø–µ–Ω'
        };
        
        Object.entries(updates).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) element.textContent = value;
        });
        
        const nextPlanInfo = document.getElementById('next-plan-info');
        if (nextPlanInfo) {
            nextPlanInfo.innerHTML = `
                <div>üí∞ –ú–∏–Ω–∏–º—É–º: $${nextPlan.usdtAmount}</div>
                <div>üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${nextPlan.percentage}%</div>
            `;
        }
    },
    
    // MCP-MARKER:METHOD:SHOW_CREATE_DEPOSIT_MODAL - –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    showCreateDepositModal() {
        if (window.GenesisCabinet && window.GenesisCabinet.showDepositModal) {
            window.GenesisCabinet.showDepositModal();
        } else {
            alert('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    },
    
    // MCP-MARKER:METHOD:START_DEPOSIT_PROCESS - –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    startDepositProcess(planId) {
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === planId);
        if (!plan) {
            alert('‚ùå –ü–ª–∞–Ω –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (window.GenesisTerminal) {
            window.GenesisTerminal.log(`üí∞ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞: ${plan.name}`, 'info');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–ª–∞–Ω–∞
        const userPlanIds = this.userDeposits.map(d => d.planId);
        if (this.isPlanLocked(plan, userPlanIds)) {
            alert('üîí –≠—Ç–æ—Ç –ø–ª–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–ª–∞–Ω—ã.');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º
        if (window.GenesisCabinet && window.GenesisCabinet.showPurchaseModal) {
            window.GenesisCabinet.showPurchaseModal(planId);
        } else {
            alert('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    },
    
    // MCP-MARKER:METHOD:VIEW_DEPOSIT_DETAILS - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–µ–ø–æ–∑–∏—Ç–∞
    viewDepositDetails(txHash) {
        const deposit = this.userDeposits.find(d => d.txHash === txHash);
        if (!deposit) {
            alert('‚ùå –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
        const now = new Date();
        const daysPassed = Math.floor((now - deposit.timestamp) / (1000 * 60 * 60 * 24));
        const progress = Math.min(100, (daysPassed / plan.days) * 100);
        
        const totalProfit = (deposit.amount * plan.percentage / 100) - deposit.amount;
        const dailyProfit = totalProfit / plan.days;
        const earnedProfit = Math.min(totalProfit, dailyProfit * daysPassed);
        const remainingProfit = totalProfit - earnedProfit;
        
        const modalContent = `
            <div style="max-width: 500px; margin: 0 auto;">
                <h3 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">
                    üíº –î–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ${plan.name}
                </h3>
                
                <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px; margin-bottom: 1.5rem;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                        <div>
                            <div style="color: var(--text-secondary); font-size: 0.9rem;">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è:</div>
                            <div style="color: var(--text-primary); font-weight: 600; font-size: 1.2rem;">
                                $${deposit.amount.toFixed(2)} ${deposit.tokenType}
                            </div>
                        </div>
                        <div>
                            <div style="color: var(--text-secondary); font-size: 0.9rem;">–°—Ç–∞—Ç—É—Å:</div>
                            <div style="color: var(--success-color); font-weight: 600;">
                                ${deposit.status === 'ACTIVE' ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω'}
                            </div>
                        </div>
                    </div>
                    
                    <div style="background: var(--bg-secondary); padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                        <div style="color: var(--warning-color); font-weight: 600; margin-bottom: 0.5rem;">
                            –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.toFixed(1)}%
                        </div>
                        <div style="background: var(--bg-primary); height: 8px; border-radius: 4px; overflow: hidden;">
                            <div style="background: var(--success-color); height: 100%; width: ${progress}%; transition: width 0.3s ease;"></div>
                        </div>
                        <div style="color: var(--text-secondary); font-size: 0.8rem; margin-top: 0.5rem;">
                            ${daysPassed} –∏–∑ ${plan.days} –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ
                        </div>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                        <div style="text-align: center; padding: 0.8rem; background: var(--bg-secondary); border-radius: 6px;">
                            <div style="color: var(--text-secondary); font-size: 0.8rem;">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</div>
                            <div style="color: var(--success-color); font-weight: 600;">$${earnedProfit.toFixed(2)}</div>
                        </div>
                        <div style="text-align: center; padding: 0.8rem; background: var(--bg-secondary); border-radius: 6px;">
                            <div style="color: var(--text-secondary); font-size: 0.8rem;">–û—Å—Ç–∞–ª–æ—Å—å:</div>
                            <div style="color: var(--warning-color); font-weight: 600;">$${remainingProfit.toFixed(2)}</div>
                        </div>
                    </div>
                </div>
                
                <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px; margin-bottom: 1.5rem;">
                    <h4 style="color: var(--secondary-color); margin-bottom: 1rem;">üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h4>
                    <div style="display: flex; flex-direction: column; gap: 0.8rem;">
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: var(--text-secondary);">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥:</span>
                            <span style="color: var(--primary-color); font-weight: 600;">$${dailyProfit.toFixed(2)}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: var(--text-secondary);">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                            <span style="color: var(--success-color); font-weight: 600;">$${totalProfit.toFixed(2)}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: var(--text-secondary);">–û–±—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç:</span>
                            <span style="color: var(--warning-color); font-weight: 600;">$${(deposit.amount + totalProfit).toFixed(2)}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: var(--text-secondary);">ROI:</span>
                            <span style="color: var(--gold-color); font-weight: 600;">${((totalProfit / deposit.amount) * 100).toFixed(1)}%</span>
                        </div>
                    </div>
                </div>
                
                <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px; margin-bottom: 1.5rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem;">üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h4>
                    <div style="display: flex; flex-direction: column; gap: 0.8rem;">
                        <div>
                            <div style="color: var(--text-secondary); font-size: 0.8rem;">Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</div>
                            <div style="font-family: monospace; font-size: 0.9rem; color: var(--secondary-color); word-break: break-all;">
                                ${txHash}
                            </div>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: var(--text-secondary);">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                            <span style="color: var(--text-primary);">${deposit.timestamp.toLocaleDateString()}</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: var(--text-secondary);">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</span>
                            <span style="color: var(--text-primary);">${deposit.endDate.toLocaleDateString()}</span>
                        </div>
                    </div>
                </div>
                
                <div style="display: flex; gap: 1rem; justify-content: center;">
                    <button onclick="window.CabinetDepositService.viewInBlockchain('${txHash}')" 
                            class="btn-secondary" style="padding: 0.8rem 1.5rem;">
                        üåê –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ BSCScan
                    </button>
                    <button onclick="window.CabinetDepositService.copyDepositInfo('${txHash}')" 
                            class="btn-outline" style="padding: 0.8rem 1.5rem;">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </button>
                </div>
            </div>
        `;
        
        this.showModal('–î–µ—Ç–∞–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞', modalContent);
    },
    
    // MCP-MARKER:METHOD:VIEW_IN_BLOCKCHAIN - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
    viewInBlockchain(txHash) {
        const url = `https://bscscan.com/tx/${txHash}`;
        window.open(url, '_blank');
        
        if (window.GenesisTerminal) {
            window.GenesisTerminal.log(`üåê –û—Ç–∫—Ä—ã—Ç BSCScan –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txHash.substring(0, 10)}...`, 'info');
        }
    },
    
    // MCP-MARKER:METHOD:COPY_DEPOSIT_INFO - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ø–æ–∑–∏—Ç–µ
    copyDepositInfo(txHash) {
        const deposit = this.userDeposits.find(d => d.txHash === txHash);
        if (!deposit) return;
        
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
        const info = `
GENESIS 1.1 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ

–ü–ª–∞–Ω: ${plan.name}
–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: $${deposit.amount.toFixed(2)} ${deposit.tokenType}
–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${plan.percentage}%
–°—Ä–æ–∫: ${plan.days} –¥–Ω–µ–π
–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${txHash}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${deposit.timestamp.toLocaleDateString()}
–°—Ç–∞—Ç—É—Å: ${deposit.status}

–°–æ–∑–¥–∞–Ω–æ –≤ GENESIS 1.1 DeFi Platform
        `.trim();
        
        navigator.clipboard.writeText(info).then(() => {
            this.showNotification('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        });
    },
    
    // MCP-MARKER:METHOD:VIEW_PLAN_DETAILS - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞–Ω–∞
    viewPlanDetails(planId) {
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === planId);
        if (!plan) {
            alert('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const userDepositsForPlan = this.userDeposits.filter(d => d.planId === planId);
        const profit = (plan.usdtAmount * plan.percentage / 100) - plan.usdtAmount;
        const dailyProfit = profit / plan.days;
        
        const modalContent = `
            <div style="max-width: 600px; margin: 0 auto;">
                <h3 style="color: var(--primary-color); margin-bottom: 1.5rem; text-align: center;">
                    ${this.getPlanIcon(plan.name)} –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞: ${plan.name}
                </h3>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; margin-bottom: 2rem;">
                    <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px;">
                        <h4 style="color: var(--secondary-color); margin-bottom: 1rem;">üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
                        <div style="display: flex; flex-direction: column; gap: 0.8rem;">
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è:</span>
                                <span style="color: var(--text-primary); font-weight: 600;">$${plan.usdtAmount}</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
                                <span style="color: var(--success-color); font-weight: 600;">${plan.percentage}%</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–°—Ä–æ–∫:</span>
                                <span style="color: var(--warning-color); font-weight: 600;">${plan.days} –¥–Ω–µ–π</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–í–∞–ª—é—Ç—ã:</span>
                                <span style="color: var(--secondary-color); font-weight: 600;">${plan.currencies.join(', ')}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px;">
                        <h4 style="color: var(--primary-color); margin-bottom: 1rem;">üí∞ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏</h4>
                        <div style="display: flex; flex-direction: column; gap: 0.8rem;">
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</span>
                                <span style="color: var(--primary-color); font-weight: 600;">$${dailyProfit.toFixed(2)}</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                                <span style="color: var(--success-color); font-weight: 600;">$${profit.toFixed(2)}</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">–û–±—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç:</span>
                                <span style="color: var(--gold-color); font-weight: 600;">$${(plan.usdtAmount + profit).toFixed(2)}</span>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <span style="color: var(--text-secondary);">ROI:</span>
                                <span style="color: var(--warning-color); font-weight: 600;">${((profit / plan.usdtAmount) * 100).toFixed(1)}%</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div style="background: var(--bg-primary); padding: 1.5rem; border-radius: 12px; margin-bottom: 1.5rem;">
                    <h4 style="color: var(--text-primary); margin-bottom: 1rem;">üìù –û–ø–∏—Å–∞–Ω–∏–µ</h4>
                    <p style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1rem;">
                        ${plan.description}
                    </p>
                    
                    ${userDepositsForPlan.length > 0 ? `
                        <div style="margin-top: 1.5rem;">
                            <h5 style="color: var(--success-color); margin-bottom: 0.5rem;">‚úÖ –í–∞—à–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:</h5>
                            ${userDepositsForPlan.map(deposit => `
                                <div style="background: var(--bg-secondary); padding: 0.8rem; border-radius: 6px; margin-bottom: 0.5rem;">
                                    <div style="display: flex; justify-content: space-between; align-items: center;">
                                        <span style="color: var(--text-primary);">$${deposit.amount.toFixed(2)} ${deposit.tokenType}</span>
                                        <span style="color: var(--success-color); font-size: 0.8rem;">${deposit.status}</span>
                                    </div>
                                    <div style="color: var(--text-secondary); font-size: 0.8rem; margin-top: 0.3rem;">
                                        ${deposit.timestamp.toLocaleDateString()}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    ` : `
                        <div style="background: rgba(0, 212, 255, 0.1); padding: 1rem; border-radius: 8px; border: 1px solid var(--secondary-color); margin-top: 1rem;">
                            <div style="color: var(--secondary-color); font-weight: 600; margin-bottom: 0.5rem;">üí° –≠—Ç–æ—Ç –ø–ª–∞–Ω –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω</div>
                            <div style="color: var(--text-secondary); font-size: 0.9rem;">
                                –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ —É—Å–ª–æ–≤–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                            </div>
                        </div>
                    `}
                </div>
                
                <div style="display: flex; gap: 1rem; justify-content: center;">
                    ${userDepositsForPlan.length === 0 && !this.isPlanLocked(plan, this.userDeposits.map(d => d.planId)) ? `
                        <button onclick="window.CabinetDepositService.startDepositProcess('${planId}'); window.CabinetDepositService.closeModal();" 
                                class="btn" style="padding: 0.8rem 1.5rem;">
                            üí∞ –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                        </button>
                    ` : ''}
                    <button onclick="window.CabinetDepositService.closeModal()" 
                            class="btn-outline" style="padding: 0.8rem 1.5rem;">
                        ‚úï –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        this.showModal('–î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞', modalContent);
    },
    
    // MCP-MARKER:METHOD:SHOW_MODAL - –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    showModal(title, content) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const existingModal = document.getElementById('deposit-details-modal');
        if (existingModal) {
            existingModal.remove();
        }
        
        const modalHTML = `
            <div id="deposit-details-modal" class="modal-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.8); display: flex; justify-content: center; align-items: center; z-index: 1000;">
                <div class="modal-container" style="background: var(--bg-secondary); border-radius: 15px; box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5); border: 1px solid var(--border-color); width: 90%; max-width: 800px; max-height: 90vh; overflow-y: auto;">
                    <div class="modal-header" style="display: flex; justify-content: space-between; align-items: center; padding: 1.5rem 2rem; border-bottom: 1px solid var(--border-color);">
                        <h3 style="color: var(--primary-color); margin: 0; font-family: 'Orbitron', monospace;">${title}</h3>
                        <button onclick="window.CabinetDepositService.closeModal()" style="background: none; border: none; color: var(--text-secondary); font-size: 2rem; cursor: pointer; line-height: 1; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center;">&times;</button>
                    </div>
                    <div class="modal-content" style="padding: 2rem;">
                        ${content}
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    },
    
    // MCP-MARKER:METHOD:CLOSE_MODAL - –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal() {
        const modal = document.getElementById('deposit-details-modal');
        if (modal) {
            modal.remove();
        }
    },
    
    // MCP-MARKER:METHOD:SHOW_NOTIFICATION - –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(title, message, type = 'info') {
        if (window.GenesisCabinet && window.GenesisCabinet.showNotification) {
            window.GenesisCabinet.showNotification(title, message, type);
        } else {
            alert(`${title}\n${message}`);
        }
    },
    
    // MCP-MARKER:METHOD:REFRESH_DATA - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async refreshData() {
        if (this.isLoading) return;
        
        try {
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤...', 'info');
            }
            
            await this.loadUserData();
            
            this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', error.message, 'error');
        }
    },
    
    // MCP-MARKER:UTILITY_METHODS - –£—Ç–∏–ª–∏—Ç—ã
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–ª–∞–Ω–∞
    getPlanIcon(planName) {
        const icons = {
            'TRIAL': 'üß™',
            'STARTER': 'üöÄ',
            'PROGRESSIVE1': 'üìà',
            'PROGRESSIVE2': 'üí´',
            'PROGRESSIVE3': '‚≠ê',
            'PROGRESSIVE4': 'üåü',
            'PROGRESSIVE5': '‚ú®',
            'PROGRESSIVE6': 'üíé',
            'PROGRESSIVE7': 'üëë',
            'PROGRESSIVE8': 'üèÜ',
            'RECOMMENDED': 'üéØ',
            'PLATINUM': 'ü•à',
            'MAXIMUM': 'ü•á'
        };
        return icons[planName] || 'üí∞';
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–ª–∞–Ω–∞
    getPlanColor(planId) {
        const colors = {
            'trial': '#00ff41',
            'starter': '#ff6b35', 
            'progressive1': '#ffa726',
            'progressive2': '#ffeb3b',
            'progressive3': '#4caf50',
            'progressive4': '#00bcd4',
            'progressive5': '#2196f3',
            'progressive6': '#3f51b5',
            'progressive7': '#673ab7',
            'progressive8': '#9c27b0',
            'recommended': '#e91e63',
            'platinum': '#ff5722',
            'maximum': '#ffd700'
        };
        return colors[planId] || '#ff6b35';
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    getStatsForExport() {
        const stats = this.calculatePortfolioStats();
        return {
            ...stats,
            depositsCount: this.userDeposits.length,
            lastUpdate: this.lastUpdate,
            userAddress: this.currentUser
        };
    }
};

// MCP-MARKER:GLOBAL_FUNCTIONS - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.refreshCabinetDeposits = () => window.CabinetDepositService.refreshData();

console.log('üíº GENESIS Cabinet Deposit Service loaded');
