                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="payment-instructions">
                        <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ</h3>
                        <ol>
                            <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç <strong>$10 –¥–æ $100 USDT</strong> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</li>
                            <li>–ö–∞–∂–¥—ã–π $1 USDT = 1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</li>
                            <li>–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç</li>
                            <li>–ü—Ä–∏ –Ω—É–ª–µ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è</li>
                        </ol>
                    </div>
                    
                    <div class="payment-amounts">
                        <h3>–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞</h3>
                        <div class="amount-buttons">
                            <button class="amount-btn" onclick="window.GenesisPlatformAccess.updatePaymentAmount(10)">$10 (10 –¥–Ω–µ–π)</button>
                            <button class="amount-btn" onclick="window.GenesisPlatformAccess.updatePaymentAmount(30)">$30 (30 –¥–Ω–µ–π)</button>
                            <button class="amount-btn" onclick="window.GenesisPlatformAccess.updatePaymentAmount(60)">$60 (60 –¥–Ω–µ–π)</button>
                            <button class="amount-btn" onclick="window.GenesisPlatformAccess.updatePaymentAmount(100)">$100 (100 –¥–Ω–µ–π)</button>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    <button class="btn-primary" onclick="window.GenesisPlatformAccess.startPaymentMonitoring()">–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        this.generateQRCode('access-payment-qr', paymentData.qrData);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.classList.add('show');
        }, 100);
    },
    
    // MCP-MARKER:METHOD:UPDATE_PAYMENT_AMOUNT - –û–±–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
    updatePaymentAmount(amount) {
        const modal = document.getElementById('access-payment-modal');
        if (!modal) return;
        
        const paymentData = this.generateAccessPaymentQR(amount);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
        const amountElement = modal.querySelector('.price-item:last-child strong');
        if (amountElement) {
            amountElement.textContent = `$${amount} (${amount} –¥–Ω–µ–π)`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è)
        const addressElement = modal.querySelector('.payment-address-value');
        if (addressElement) {
            addressElement.textContent = paymentData.address;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º QR –∫–æ–¥
        this.generateQRCode('access-payment-qr', paymentData.qrData);
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        modal.querySelectorAll('.amount-btn').forEach(btn => btn.classList.remove('active'));
        event.target.classList.add('active');
    },
    
    // MCP-MARKER:METHOD:GENERATE_QR_CODE - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
    generateQRCode(containerId, data) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';
        
        if (window.QRCode) {
            try {
                new window.QRCode(container, {
                    text: data,
                    width: 200,
                    height: 200,
                    colorDark: '#000000',
                    colorLight: '#ffffff',
                    correctLevel: window.QRCode.CorrectLevel.M
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞:', error);
                container.innerHTML = `
                    <div class="qr-fallback">
                        <div class="qr-placeholder">üì± QR –ö–û–î</div>
                        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</p>
                    </div>
                `;
            }
        } else {
            // Fallback –µ—Å–ª–∏ QRCode –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            container.innerHTML = `
                <div class="qr-fallback">
                    <div class="qr-placeholder">üì± QR –ö–û–î</div>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤—ã—à–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</p>
                </div>
            `;
        }
    },
    
    // MCP-MARKER:METHOD:START_PAYMENT_MONITORING - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø–ª–∞—Ç—ã
    async startPaymentMonitoring() {
        const userAddress = localStorage.getItem('genesis_user_address');
        if (!userAddress) return;
        
        if (window.GenesisTerminal) {
            window.GenesisTerminal.log('üîÑ –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞...', 'system');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const monitoringInterval = setInterval(async () => {
            try {
                const accessData = await this.checkUserAccessBalance(userAddress);
                
                if (accessData.isActive && accessData.daysRemaining > 0) {
                    // –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!
                    clearInterval(monitoringInterval);
                    
                    if (window.GenesisTerminal) {
                        window.GenesisTerminal.log(`‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –î–Ω–µ–π: ${accessData.daysRemaining}`, 'success');
                    }
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    const modal = document.getElementById('access-payment-modal');
                    if (modal) {
                        modal.remove();
                    }
                    
                    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                    this.unblockFunctions();
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    this.showSuccessNotification(accessData.daysRemaining);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.updateAccessUI(accessData);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–ø–ª–∞—Ç—ã:', error);
            }
        }, 30000);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        setTimeout(() => {
            clearInterval(monitoringInterval);
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É', 'warning');
            }
        }, 600000);
    },
    
    // MCP-MARKER:METHOD:SHOW_SUCCESS - –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    showSuccessNotification(daysRemaining) {
        const notification = document.createElement('div');
        notification.className = 'access-notification success';
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">‚úÖ</div>
                <div class="notification-text">
                    <strong>–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</strong>
                    <p>–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: ${daysRemaining} –¥–Ω–µ–π</p>
                </div>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    },
    
    // MCP-MARKER:METHOD:GET_ACCESS_STATUS - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
    getAccessStatus() {
        return this.userAccessData;
    },
    
    // MCP-MARKER:METHOD:DESTROY - –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    destroy() {
        if (this.checkIntervalId) {
            clearInterval(this.checkIntervalId);
            this.checkIntervalId = null;
        }
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notifications = document.querySelectorAll('.access-notification');
        notifications.forEach(notification => notification.remove());
        
        console.log('üßπ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—á–∏—â–µ–Ω–∞');
    }
};

// MCP-MARKER:STYLES:ACCESS_NOTIFICATIONS - –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞
// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const accessStyles = document.createElement('style');
accessStyles.textContent = `
    .access-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        max-width: 400px;
        background: rgba(0, 0, 0, 0.9);
        border-radius: 10px;
        padding: 0;
        z-index: 1001;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        border: 1px solid #333;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }
    
    .access-notification.show {
        transform: translateX(0);
    }
    
    .access-notification.error {
        border-color: #ff4757;
    }
    
    .access-notification.warning {
        border-color: #ffa726;
    }
    
    .access-notification.success {
        border-color: #00ff41;
    }
    
    .notification-content {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
    }
    
    .notification-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }
    
    .notification-text {
        flex: 1;
        color: white;
    }
    
    .notification-text strong {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }
    
    .notification-text p {
        margin: 0;
        font-size: 0.9rem;
        opacity: 0.8;
    }
    
    .notification-btn, .notification-close {
        background: #ff6b35;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: background 0.3s ease;
    }
    
    .notification-btn:hover {
        background: #e55a2b;
    }
    
    .notification-close {
        background: transparent;
        color: #999;
        padding: 0.25rem 0.5rem;
        margin-left: 0.5rem;
    }
    
    .notification-close:hover {
        color: white;
        background: rgba(255, 255, 255, 0.1);
    }
    
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .modal-overlay.show {
        opacity: 1;
    }
    
    .access-payment-modal {
        background: #1a1a2e;
        border-radius: 15px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        border: 1px solid #333;
    }
    
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid #333;
    }
    
    .modal-header h2 {
        margin: 0;
        color: #ff6b35;
        font-size: 1.3rem;
    }
    
    .modal-close {
        background: none;
        border: none;
        color: #999;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
    }
    
    .modal-close:hover {
        color: white;
    }
    
    .modal-body {
        padding: 1.5rem;
        color: white;
    }
    
    .payment-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
    }
    
    .payment-details h3, .payment-qr h3 {
        color: #ff6b35;
        margin-bottom: 1rem;
    }
    
    .price-info {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .price-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid #333;
    }
    
    .qr-container {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .qr-fallback {
        background: #f0f0f0;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        color: #333;
    }
    
    .qr-placeholder {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }
    
    .address-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(0, 0, 0, 0.3);
        padding: 0.8rem;
        border-radius: 5px;
        margin-top: 0.5rem;
    }
    
    .payment-address-value {
        flex: 1;
        color: #00d4ff;
        font-family: monospace;
        font-size: 0.9rem;
        word-break: break-all;
    }
    
    .copy-btn {
        background: #ff6b35;
        color: white;
        border: none;
        padding: 0.3rem 0.5rem;
        border-radius: 3px;
        cursor: pointer;
        font-size: 0.8rem;
    }
    
    .payment-instructions ol {
        padding-left: 1.2rem;
    }
    
    .payment-instructions li {
        margin-bottom: 0.5rem;
        line-height: 1.5;
    }
    
    .amount-buttons {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
