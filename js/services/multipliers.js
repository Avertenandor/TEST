/**
 * GENESIS 1.1 - –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
 * MCP-MARKER:MODULE:MULTIPLIERS_SERVICE - –°–µ—Ä–≤–∏—Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
 * MCP-MARKER:FILE:MULTIPLIERS_JS - –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã–º–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
 */

// MCP-MARKER:CLASS:MULTIPLIERS_SERVICE - –ö–ª–∞—Å—Å —Å–µ—Ä–≤–∏—Å–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
class MultipliersService {
    // MCP-MARKER:METHOD:CONSTRUCTOR - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
    constructor() {
        // MCP-MARKER:PROPERTY:MULTIPLIERS_CONFIG - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
        this.multipliers = {
            turbo: {
                id: 'turbo',
                name: '–¢—É—Ä–±–æ',
                icon: 'üöÄ',
                multiplier: 2.0,
                duration: 6, // —á–∞—Å–æ–≤
                costUSDT: 25,
                costPLEX: 500,
                description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
                color: 'var(--success-color)'
            },
            lightning: {
                id: 'lightning',
                name: '–ú–æ–ª–Ω–∏—è',
                icon: '‚ö°',
                multiplier: 4.0,
                duration: 3, // —á–∞—Å–æ–≤
                costUSDT: 45,
                costPLEX: 900,
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ 4 —Ä–∞–∑–∞',
                color: 'var(--primary-color)'
            },
            super: {
                id: 'super',
                name: '–°—É–ø–µ—Ä',
                icon: 'üåü',
                multiplier: 7.5,
                duration: 1, // —á–∞—Å
                costUSDT: 85,
                costPLEX: 1700,
                description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 7.5 —Ä–∞–∑',
                color: 'var(--warning-color)'
            },
            fire: {
                id: 'fire',
                name: '–û–≥–Ω–µ–Ω–Ω—ã–π',
                icon: 'üî•',
                multiplier: 2.5,
                duration: 4, // —á–∞—Å–æ–≤
                costUSDT: 35,
                costPLEX: 700,
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ 2.5 —Ä–∞–∑–∞',
                color: 'var(--error-color)'
            },
            diamond: {
                id: 'diamond',
                name: '–ê–ª–º–∞–∑–Ω—ã–π',
                icon: 'üíé',
                multiplier: 1.8,
                duration: 12, // —á–∞—Å–æ–≤
                costUSDT: 30,
                costPLEX: 600,
                description: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è',
                color: 'var(--secondary-color)'
            },
            star: {
                id: 'star',
                name: '–ó–≤–µ–∑–¥–Ω—ã–π',
                icon: '‚≠ê',
                multiplier: 3.2,
                duration: 24, // —á–∞—Å–æ–≤
                costUSDT: 60,
                costPLEX: 1200,
                description: '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ —Ü–µ–ª—ã–µ —Å—É—Ç–∫–∏',
                color: 'var(--gold-color)'
            }
        };

        // MCP-MARKER:PROPERTY:ACTIVE_MULTIPLIERS - –ê–∫—Ç–∏–≤–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        this.activeMultipliers = [];
        // MCP-MARKER:PROPERTY:STATISTICS - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this.statistics = {
            totalActivated: 0,
            totalEarned: 0,
            totalSpentUSDT: 0,
            totalSpentPLEX: 0,
            monthlyActivations: 0,
            todayActivations: 0
        };

        this.init();
    }

    // MCP-MARKER:METHOD:INIT - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    init() {
        console.log('üöÄ MultipliersService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π');
        this.loadActiveMultipliers();
        this.loadStatistics();
        this.startUpdateTimer();
    }

    // MCP-MARKER:METHOD:LOAD_ACTIVE_MULTIPLIERS - –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –∏–∑ localStorage
    loadActiveMultipliers() {
        try {
            const saved = localStorage.getItem('genesis_active_multipliers');
            if (saved) {
                this.activeMultipliers = JSON.parse(saved);
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
                this.activeMultipliers = this.activeMultipliers.filter(m => {
                    const remaining = this.getRemainingTime(m);
                    return remaining > 0;
                });
                this.saveActiveMultipliers();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π:', error);
            this.activeMultipliers = [];
        }
    }

    // MCP-MARKER:METHOD:SAVE_ACTIVE_MULTIPLIERS - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    saveActiveMultipliers() {
        localStorage.setItem('genesis_active_multipliers', JSON.stringify(this.activeMultipliers));
    }

    // MCP-MARKER:METHOD:LOAD_STATISTICS - –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loadStatistics() {
        try {
            const saved = localStorage.getItem('genesis_multipliers_stats');
            if (saved) {
                this.statistics = { ...this.statistics, ...JSON.parse(saved) };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    // MCP-MARKER:METHOD:SAVE_STATISTICS - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    saveStatistics() {
        localStorage.setItem('genesis_multipliers_stats', JSON.stringify(this.statistics));
    }

    // MCP-MARKER:METHOD:ACTIVATE_MULTIPLIER - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
    async activateMultiplier(multiplierId, paymentMethod = 'USDT') {
        const multiplier = this.multipliers[multiplierId];
        if (!multiplier) {
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if (!window.platformAccessService || !window.platformAccessService.hasActiveAccess()) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ');
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ
        const activeMultiplier = {
            ...multiplier,
            activatedAt: Date.now(),
            expiresAt: Date.now() + (multiplier.duration * 60 * 60 * 1000),
            paymentMethod: paymentMethod,
            transactionHash: null // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        this.activeMultipliers.push(activeMultiplier);
        this.saveActiveMultipliers();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.statistics.totalActivated++;
        this.statistics.todayActivations++;
        this.statistics.monthlyActivations++;
        
        if (paymentMethod === 'USDT') {
            this.statistics.totalSpentUSDT += multiplier.costUSDT;
        } else {
            this.statistics.totalSpentPLEX += multiplier.costPLEX;
        }
        
        this.saveStatistics();

        console.log(`‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å ${multiplier.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
        return activeMultiplier;
    }

    // MCP-MARKER:METHOD:GET_REMAINING_TIME - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    getRemainingTime(activeMultiplier) {
        const now = Date.now();
        const remaining = activeMultiplier.expiresAt - now;
        return Math.max(0, remaining);
    }

    // MCP-MARKER:METHOD:FORMAT_REMAINING_TIME - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    formatRemainingTime(milliseconds) {
        const hours = Math.floor(milliseconds / (1000 * 60 * 60));
        const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours > 0) {
            return `${hours}—á ${minutes}–º`;
        }
        return `${minutes}–º`;
    }

    // MCP-MARKER:METHOD:GET_TOTAL_MULTIPLIER - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    getTotalMultiplier() {
        let total = 1;
        
        for (const multiplier of this.activeMultipliers) {
            const remaining = this.getRemainingTime(multiplier);
            if (remaining > 0) {
                total *= multiplier.multiplier;
            }
        }
        
        return total;
    }

    // MCP-MARKER:METHOD:APPLY_MULTIPLIERS - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –∫ –¥–æ—Ö–æ–¥—É
    applyMultipliers(baseIncome) {
        const totalMultiplier = this.getTotalMultiplier();
        return baseIncome * totalMultiplier;
    }

    // MCP-MARKER:METHOD:GET_ACTIVE_MULTIPLIERS - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    getActiveMultipliers() {
        return this.activeMultipliers.filter(m => this.getRemainingTime(m) > 0);
    }

    // MCP-MARKER:METHOD:GET_AVAILABLE_MULTIPLIERS - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    getAvailableMultipliers() {
        return Object.values(this.multipliers);
    }

    // MCP-MARKER:METHOD:GET_STATISTICS - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStatistics() {
        return {
            ...this.statistics,
            currentMultiplier: this.getTotalMultiplier(),
            activeCount: this.getActiveMultipliers().length
        };
    }

    // MCP-MARKER:METHOD:START_UPDATE_TIMER - –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    startUpdateTimer() {
        setInterval(() => {
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            const before = this.activeMultipliers.length;
            this.activeMultipliers = this.activeMultipliers.filter(m => {
                return this.getRemainingTime(m) > 0;
            });
            
            if (before !== this.activeMultipliers.length) {
                this.saveActiveMultipliers();
                console.log('üïê –ò—Å—Ç–µ–∫—à–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
            }
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    // MCP-MARKER:METHOD:RENDER_ACTIVE_MULTIPLIERS - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    renderActiveMultipliers() {
        const activeMultipliers = this.getActiveMultipliers();
        
        if (activeMultipliers.length === 0) {
            return `
                <div style="text-align: center; padding: 2rem; color: var(--text-secondary);">
                    <div style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.5;">üò¥</div>
                    <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π</p>
                    <p style="font-size: 0.9rem;">–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</p>
                </div>
            `;
        }

        return activeMultipliers.map(m => {
            const remaining = this.getRemainingTime(m);
            const percentage = (remaining / (m.duration * 60 * 60 * 1000)) * 100;
            
            return `
                <div style="text-align: center; padding: 1rem; background: var(--bg-primary); 
                           border-radius: 8px; border: 2px solid ${m.color};">
                    <div style="font-size: 2rem; margin-bottom: 0.5rem;">${m.icon}</div>
                    <h5 style="color: var(--text-primary); margin-bottom: 0.3rem;">${m.name}</h5>
                    <div style="font-size: 1.8rem; font-weight: 700; color: ${m.color}; margin-bottom: 0.3rem;">
                        x${m.multiplier}
                    </div>
                    <div style="color: var(--text-secondary); font-size: 0.8rem;">
                        –û—Å—Ç–∞–ª–æ—Å—å: ${this.formatRemainingTime(remaining)}
                    </div>
                    <div style="background: var(--bg-secondary); border-radius: 6px; overflow: hidden; margin-top: 0.5rem;">
                        <div style="background: ${m.color}; height: 4px; width: ${percentage}%;"></div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // MCP-MARKER:METHOD:RENDER_AVAILABLE_MULTIPLIERS - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    renderAvailableMultipliers() {
        return Object.values(this.multipliers).map(m => `
            <div style="padding: 1rem; background: var(--bg-primary); border-radius: 8px; 
                       border: 2px solid var(--border-color);">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="font-size: 1.5rem;">${m.icon}</span>
                        <h5 style="color: var(--text-primary);">${m.name} x${m.multiplier}</h5>
                    </div>
                    <span style="background: ${m.color}; color: var(--bg-primary); 
                                padding: 0.2rem 0.5rem; border-radius: 4px; font-size: 0.8rem;">
                        ${m.duration} —á–∞—Å${m.duration > 1 ? '–æ–≤' : ''}
                    </span>
                </div>
                <p style="color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 1rem;">
                    ${m.description}
                </p>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                    <span style="color: var(--success-color); font-weight: 600;">
                        –°—Ç–æ–∏–º–æ—Å—Ç—å: $${m.costUSDT}
                    </span>
                    <span style="color: var(--text-secondary); font-size: 0.8rem;">
                        –∏–ª–∏ ${m.costPLEX} PLEX
                    </span>
                </div>
                <button class="btn" onclick="window.CabinetApp.activateMultiplier('${m.id}')" 
                        style="width: 100%;">
                    ${m.icon} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        `).join('');
    }

    // MCP-MARKER:METHOD:CALCULATE_BONUS_INCOME - –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    calculateBonusIncome(baseIncome) {
        const totalMultiplier = this.getTotalMultiplier();
        const bonusIncome = baseIncome * (totalMultiplier - 1);
        return bonusIncome;
    }

    // MCP-MARKER:METHOD:UPDATE_EARNINGS_STATISTICS - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–∞
    updateEarningsStatistics(bonusEarned) {
        this.statistics.totalEarned += bonusEarned;
        this.saveStatistics();
    }
}

// MCP-MARKER:INITIALIZATION:SERVICE_INIT - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
window.multipliersService = new MultipliersService();

console.log('‚úÖ –°–µ—Ä–≤–∏—Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
