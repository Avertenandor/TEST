/**
 * GENESIS 1.1 - –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * MCP-MARKER:MODULE:AUTH_SERVICE - –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * MCP-MARKER:FILE:AUTH_JS - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

// MCP-MARKER:CLASS:GENESIS_AUTH - –ö–ª–∞—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
window.GenesisAuth = {
    // MCP-MARKER:PROPERTY:CURRENT_USER - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    currentUser: null,
    
    // MCP-MARKER:METHOD:VALIDATE_ADDRESS - –í–∞–ª–∏–¥–∞—Ü–∏—è BSC –∞–¥—Ä–µ—Å–∞
    isValidAddress(address) {
        return /^0x[a-fA-F0-9]{40}$/.test(address);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º API
    async checkAuthorization(userAddress) {
        if (!this.isValidAddress(userAddress)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞');
        }
        
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${window.GenesisUtils.formatAddress(userAddress)}...`, 'info');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π API
            const authResult = await window.GenesisAPI.checkAuthorizationPayment(userAddress);
            
            if (authResult.isAuthorized) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.currentUser = {
                    address: userAddress,
                    authorized: true,
                    authorizedAt: new Date(),
                    authPayment: authResult.payment,
                    authAmount: authResult.amount
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                localStorage.setItem('genesis_auth', JSON.stringify(this.currentUser));
                
                if (window.GenesisTerminal) {
                    window.GenesisTerminal.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–ø–ª–∞—á–µ–Ω–æ: ${authResult.amount.toFixed(4)} PLEX`, 'success');
                }
                
                return true;
            } else {
                if (window.GenesisTerminal) {
                    const message = authResult.error ? 
                        `‚ùå –û—à–∏–±–∫–∞: ${authResult.error}` :
                        '‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 PLEX (¬±5%) –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å.';
                    window.GenesisTerminal.log(message, 'warning');
                }
                
                return false;
            }
        } catch (error) {
            console.error('Auth check error:', error);
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'error');
            }
            return false;
        }
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–Ω–∏) —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º API
    async checkAccess(userAddress) {
        try {
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...', 'info');
            }
            
            const accessData = await window.GenesisAPI.checkAccessPayments(userAddress);
            
            if (accessData.isActive && accessData.daysRemaining > 0) {
                if (window.GenesisTerminal) {
                    window.GenesisTerminal.log(`‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω: ${accessData.daysRemaining} –¥–Ω–µ–π (–≤—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ: ${accessData.accessDays} –¥–Ω–µ–π)`, 'success');
                }
            } else if (accessData.accessDays > 0) {
                if (window.GenesisTerminal) {
                    window.GenesisTerminal.log(`‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ USDT (10-20$ = 10-20 –¥–Ω–µ–π).`, 'warning');
                }
            } else {
                if (window.GenesisTerminal) {
                    window.GenesisTerminal.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ USDT.', 'warning');
                }
            }
            
            return accessData;
        } catch (error) {
            console.error('Access check error:', error);
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`, 'error');
            }
            return {
                payments: [],
                totalUSDT: 0,
                accessDays: 0,
                isActive: false,
                daysRemaining: 0,
                error: error.message
            };
        }
    },
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    async validateAddress(address) {
        if (!this.isValidAddress(address)) {
            return false;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Ç–∏
            const balance = await window.GenesisAPI.getBalance(address);
            return balance >= 0; // –ê–¥—Ä–µ—Å –≤–∞–ª–∏–¥–µ–Ω –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
        } catch (error) {
            return false;
        }
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    getSavedAuth() {
        try {
            const saved = localStorage.getItem('genesis_auth');
            if (saved) {
                const auth = JSON.parse(saved);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (30 –¥–Ω–µ–π)
                const authDate = new Date(auth.authorizedAt);
                const daysPassed = (Date.now() - authDate.getTime()) / (1000 * 60 * 60 * 24);
                
                if (daysPassed <= 30) {
                    this.currentUser = auth;
                    return auth;
                } else {
                    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞
                    this.logout();
                    return null;
                }
            }
        } catch (error) {
            console.error('Error loading saved auth:', error);
        }
        return null;
    },
    
    // –í—ã—Ö–æ–¥
    logout() {
        this.currentUser = null;
        localStorage.removeItem('genesis_auth');
        localStorage.removeItem('genesis_user_address');
        
        if (window.GenesisTerminal) {
            window.GenesisTerminal.log('üëã –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'info');
        }
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        window.location.href = '/';
    },
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞
    async monitorPayment(userAddress, callback, timeout = 600000) {
        const startTime = Date.now();
        const checkInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥
        
        if (window.GenesisTerminal) {
            window.GenesisTerminal.log('üîÑ –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞...', 'system');
        }
        
        const check = async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if (Date.now() - startTime > timeout) {
                if (window.GenesisTerminal) {
                    window.GenesisTerminal.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞', 'warning');
                }
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
            const isAuthorized = await this.checkAuthorization(userAddress);
            
            if (isAuthorized) {
                if (callback) callback(true);
            } else {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                setTimeout(check, checkInterval);
            }
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        setTimeout(check, checkInterval);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
    hasAccess(feature = 'basic') {
        if (!this.currentUser || !this.currentUser.authorized) {
            return false;
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
        const accessLevels = {
            basic: true, // –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            deposits: true, // –î–æ—Å—Ç—É–ø –∫ –¥–µ–ø–æ–∑–∏—Ç–∞–º
            referrals: true, // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            vip: false // VIP —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
        };
        
        return accessLevels[feature] || false;
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º API
    async getUserInfo(address) {
        try {
            const [
                bnbBalance,
                plexBalance,
                deposits,
                accessData,
                authData
            ] = await Promise.all([
                window.GenesisAPI.getBalance(address),
                window.GenesisAPI.getTokenBalance(address, window.GENESIS_CONFIG.plex.address),
                window.GenesisAPI.getUserDeposits(address),
                window.GenesisAPI.checkAccessPayments(address),
                window.GenesisAPI.checkAuthorizationPayment(address)
            ]);
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            const depositStats = {
                total: deposits.length,
                active: deposits.filter(d => d.status === 'ACTIVE').length,
                completed: deposits.filter(d => d.status === 'COMPLETED').length,
                totalInvested: deposits.reduce((sum, d) => sum + d.amount, 0),
                expectedProfit: deposits.reduce((sum, d) => sum + (d.expectedProfit || 0), 0),
                hasTestDeposit: deposits.some(d => d.planId === 'test')
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–ª–∞–Ω
            const nextPlan = this.getNextAvailablePlan(deposits);
            
            return {
                address: address,
                authorization: authData,
                balances: {
                    bnb: bnbBalance,
                    plex: plexBalance
                },
                deposits: deposits,
                depositStats: depositStats,
                access: accessData,
                nextAvailablePlan: nextPlan,
                overallStatus: this.getUserStatus(authData, accessData, depositStats)
            };
        } catch (error) {
            console.error('Error getting user info:', error);
            return null;
        }
    },
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
    getNextAvailablePlan(userDeposits) {
        const validation = window.validateDepositSequence;
        if (!validation) return null;
        
        const config = window.GENESIS_CONFIG;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞–Ω
        for (let plan of config.depositPlans) {
            const result = validation(userDeposits, plan.id);
            if (result.allowed) {
                return plan;
            }
        }
        
        return null; // –í—Å–µ –ø–ª–∞–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    },
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserStatus(authData, accessData, depositStats) {
        if (!authData.isAuthorized) {
            return {
                level: 'BLOCKED',
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (1 PLEX)',
                color: 'red'
            };
        }
        
        if (!accessData.isActive) {
            return {
                level: 'LIMITED',
                message: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø (–Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞)',
                color: 'orange'
            };
        }
        
        if (depositStats.total === 0) {
            return {
                level: 'SUBSCRIBER',
                message: '–ü–æ–¥–ø–∏—Å—á–∏–∫ (–º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã)',
                color: 'blue'
            };
        }
        
        if (depositStats.active > 0) {
            return {
                level: 'ACTIVE_INVESTOR',
                message: `–ê–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä (${depositStats.active} –¥–µ–ø–æ–∑–∏—Ç–æ–≤)`,
                color: 'green'
            };
        }
        
        return {
            level: 'INVESTOR',
            message: `–ò–Ω–≤–µ—Å—Ç–æ—Ä (${depositStats.completed} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)`,
            color: 'green'
        };
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    generatePaymentQR(container, amount = 1, token = 'PLEX') {
        const systemAddress = window.GENESIS_CONFIG.addresses.system;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR
        const qrData = systemAddress;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        if (window.QRCode) {
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container.innerHTML = '';
            
            new window.QRCode(container, {
                text: qrData,
                width: 200,
                height: 200,
                colorDark: '#000000',
                colorLight: '#ffffff',
                correctLevel: window.QRCode.CorrectLevel.M
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const info = document.createElement('div');
            info.className = 'qr-payment-info';
            info.innerHTML = `
                <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <strong>${amount} ${token}</strong></p>
                <p>–Ω–∞ –∞–¥—Ä–µ—Å:</p>
                <code>${window.GenesisUtils.formatAddress(systemAddress, 8)}</code>
            `;
            container.appendChild(info);
        }
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const savedAuth = window.GenesisAuth.getSavedAuth();
    if (savedAuth) {
        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
});

console.log('üîê GENESIS AUTH loaded');
