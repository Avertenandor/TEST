/**
 * GENESIS External Errors Shield v2.0
 * –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –æ—à–∏–±–∫–∞–º–∏ –æ—Ç:
 * - –†–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞ (MetaMask, –∫–æ—à–µ–ª—å–∫–∏)
 * - –°–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (New Relic, Sentry)
 * - –í–Ω–µ—à–Ω–∏—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –∏ UI (Claude.ai, Next.js)
 * - Permissions Policy violations
 */

(function() {
    'use strict';
    
    // –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    const EXTERNAL_ERROR_PATTERNS = [
        // MetaMask –∏ Web3 –∫–æ—à–µ–ª—å–∫–∏
        'inpage.js',
        'MetaMask',
        'ethereum',
        'web3',
        'fm.<anonymous>',
        'Generator.next',
        
        // –°–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        'newrelic',
        'sentry',
        'bugsnag',
        'datadog',
        'gtag',
        'analytics',
        'gtm.js',
        'fbevents.js',
        
        // Claude.ai –∏ –¥—Ä—É–≥–∏–µ –≤–Ω–µ—à–Ω–∏–µ UI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
        '4118-07aa55f66c5b5e64',
        'library.cb87358',
        '_next',
        'webpack',
        
        // Permissions Policy –Ω–∞—Ä—É—à–µ–Ω–∏—è
        'Permissions policy violation',
        'unload is not allowed',
        'interest-cohort',
        'document-domain',
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
        'chrome-extension://',
        'moz-extension://',
        'edge-extension://',
        'safari-extension://',
        
        // –î—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        'recaptcha',
        'googleapis',
        'gstatic',
        'doubleclick',
        'google-analytics',
        'googletagmanager'
    ];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    const originalAddEventListener = window.addEventListener;
    const originalConsoleError = console.error;
    const originalConsoleWarn = console.warn;
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–π
    function isExternalError(errorInfo) {
        const checkString = (str) => {
            if (!str) return false;
            const lowerStr = str.toLowerCase();
            return EXTERNAL_ERROR_PATTERNS.some(pattern => 
                lowerStr.includes(pattern.toLowerCase())
            );
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        if (typeof errorInfo === 'string') {
            return checkString(errorInfo);
        }
        
        if (errorInfo && typeof errorInfo === 'object') {
            return checkString(errorInfo.message) ||
                   checkString(errorInfo.stack) ||
                   checkString(errorInfo.filename) ||
                   checkString(errorInfo.source) ||
                   checkString(errorInfo.reason?.toString());
        }
        
        return false;
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç window.addEventListener –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ unload
    window.addEventListener = function(type, listener, options) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º unload —Å–æ–±—ã—Ç–∏—è –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if (type === 'unload' || type === 'beforeunload') {
            const stack = new Error().stack || '';
            if (isExternalError(stack)) {
                console.info('[üõ°Ô∏è External Shield] Blocked external unload event');
                return;
            }
        }
        return originalAddEventListener.apply(this, arguments);
    };
    
    // –£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫
    window.addEventListener('error', function(event) {
        const errorInfo = {
            message: event.message,
            filename: event.filename,
            stack: event.error?.stack
        };
        
        if (isExternalError(errorInfo)) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Å–≤–µ—Ä–Ω—É—Ç—É—é)
            if (window.GENESIS_DEBUG_MODE) {
                console.groupCollapsed('[üõ°Ô∏è External Shield] Suppressed external error');
                console.log('Message:', event.message);
                console.log('Source:', event.filename);
                console.groupEnd();
            }
            
            return false;
        }
    }, true);
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç unhandled promise rejections
    window.addEventListener('unhandledrejection', function(event) {
        const errorInfo = {
            message: event.reason?.toString(),
            stack: event.reason?.stack,
            reason: event.reason
        };
        
        if (isExternalError(errorInfo)) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            
            if (window.GENESIS_DEBUG_MODE) {
                console.groupCollapsed('[üõ°Ô∏è External Shield] Suppressed promise rejection');
                console.log('Reason:', event.reason);
                console.groupEnd();
            }
            
            return false;
        }
    }, true);
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è console.error –∏ console.warn
    console.error = function() {
        const args = Array.prototype.slice.call(arguments);
        const errorString = args.map(arg => {
            if (typeof arg === 'object') {
                return JSON.stringify(arg);
            }
            return String(arg);
        }).join(' ');
        
        if (!isExternalError(errorString)) {
            return originalConsoleError.apply(console, arguments);
        } else if (window.GENESIS_DEBUG_MODE) {
            console.groupCollapsed('[üõ°Ô∏è External Shield] Filtered console.error');
            originalConsoleError.apply(console, arguments);
            console.groupEnd();
        }
    };
    
    console.warn = function() {
        const args = Array.prototype.slice.call(arguments);
        const warnString = args.map(arg => {
            if (typeof arg === 'object') {
                return JSON.stringify(arg);
            }
            return String(arg);
        }).join(' ');
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Permissions Policy
        if (warnString.includes('[Violation]') || warnString.includes('Permissions policy')) {
            if (window.GENESIS_DEBUG_MODE) {
                console.groupCollapsed('[üõ°Ô∏è External Shield] Permissions Policy violation');
                originalConsoleWarn.apply(console, arguments);
                console.groupEnd();
            }
            return;
        }
        
        if (!isExternalError(warnString)) {
            return originalConsoleWarn.apply(console, arguments);
        } else if (window.GENESIS_DEBUG_MODE) {
            console.groupCollapsed('[üõ°Ô∏è External Shield] Filtered console.warn');
            originalConsoleWarn.apply(console, arguments);
            console.groupEnd();
        }
    };
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—à—É –∑–∞—â–∏—Ç—É
    Object.freeze(window.addEventListener);
    Object.freeze(console.error);
    Object.freeze(console.warn);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log(
        '%cüõ°Ô∏è GENESIS External Errors Shield v2.0 Activated',
        'color: #00ff41; font-weight: bold; font-size: 12px;'
    );
    
    // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å:
    // window.GENESIS_DEBUG_MODE = true;
    window.GENESIS_DEBUG_MODE = false;
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.GENESIS_SHIELD = {
        version: '2.0',
        patterns: EXTERNAL_ERROR_PATTERNS,
        isExternalError: isExternalError,
        debugMode: function(enable) {
            window.GENESIS_DEBUG_MODE = !!enable;
            console.log(`[üõ°Ô∏è External Shield] Debug mode ${enable ? 'enabled' : 'disabled'}`);
        }
    };
})();