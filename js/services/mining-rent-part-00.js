// MCP-MARKER:MODULE:MINING_RENT_SERVICE - –°–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π
// MCP-MARKER:SECTION:MINING_RENT_CORE - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –º–æ—â–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: 21 –∏—é–ª—è 2025
 */
// MCP-MARKER:CLASS:MINING_RENT_SERVICE - –ö–ª–∞—Å—Å —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π
class MiningRentService {
    // MCP-MARKER:METHOD:MINING:CONSTRUCTOR - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
    constructor() {
        this.launchDate = new Date('2025-07-21T00:00:00');
        this.tariffs = {
            cpu: 1,        // $1 –∑–∞ —è–¥—Ä–æ –≤ —Å—É—Ç–∫–∏
            ram: 1,        // $1 –∑–∞ GB RAM –≤ —Å—É—Ç–∫–∏
            storage: 0.5   // $0.5 –∑–∞ TB —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ —Å—É—Ç–∫–∏
        };
        this.powerLevels = [10, 20, 30, 40, 50]; // –ü—Ä–æ—Ü–µ–Ω—Ç—ã –º–æ—â–Ω–æ—Å—Ç–∏
        this.minDepositsRequired = 3;
        this.countdownInterval = null;
        this.deviceInfo = null;
        
        this.debugLog('MiningRentService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    // MCP-MARKER:METHOD:MINING:DEBUG_LOG - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    debugLog(message, type = 'info') {
        if (window.debugLog) {
            window.debugLog(`[MiningRent] ${message}`, type);
        } else {
            console.log(`[MiningRent] ${message}`);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    // MCP-MARKER:METHOD:MINING:INIT - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    async init() {
        try {
            this.debugLog('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π');
            this.deviceInfo = this.getDeviceInfo();
            this.startCountdown();
            await this.checkUserEligibility();
            this.debugLog('–°–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
        } catch (error) {
            this.debugLog(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    // MCP-MARKER:METHOD:MINING:GET_DEVICE_INFO - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    getDeviceInfo() {
        const info = {
            cores: navigator.hardwareConcurrency || 4,
            memory: navigator.deviceMemory || 8, // GB
            storage: 1 // TB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        };
        
        this.debugLog(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: ${info.cores} —è–¥–µ—Ä, ${info.memory} GB RAM, ${info.storage} TB —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
        return info;
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏
     */
    // MCP-MARKER:METHOD:MINING:CALCULATE_EARNINGS - –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    calculateEarnings(percentage) {
        if (!this.deviceInfo) {
            this.deviceInfo = this.getDeviceInfo();
        }
        
        const cpuEarnings = (this.deviceInfo.cores * percentage / 100) * this.tariffs.cpu;
        const ramEarnings = (this.deviceInfo.memory * percentage / 100) * this.tariffs.ram;
        const storageEarnings = (this.deviceInfo.storage * percentage / 100) * this.tariffs.storage;
        
        const dailyTotal = cpuEarnings + ramEarnings + storageEarnings;
        
        return {
            cpu: cpuEarnings.toFixed(2),
            ram: ramEarnings.toFixed(2),
            storage: storageEarnings.toFixed(2),
            daily: dailyTotal.toFixed(2),
            weekly: (dailyTotal * 7).toFixed(2),
            monthly: (dailyTotal * 30).toFixed(2),
            yearly: (dailyTotal * 365).toFixed(2)
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    // MCP-MARKER:METHOD:MINING:CHECK_ELIGIBILITY - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    async checkUserEligibility() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            const deposits = await this.getUserActiveDeposits();
            const isEligible = deposits.length >= this.minDepositsRequired;
            
            this.debugLog(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${deposits.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${this.minDepositsRequired}`);
            
            return {
                isEligible,
                depositsCount: deposits.length,
                depositsRequired: this.minDepositsRequired
            };
        } catch (error) {
            this.debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${error.message}`, 'error');
            return {
                isEligible: false,
                depositsCount: 0,
                depositsRequired: this.minDepositsRequired
            };
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserActiveDeposits() {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        if (window.depositsCabinetService && window.depositsCabinetService.getUserDeposits) {
            const deposits = await window.depositsCabinetService.getUserDeposits();
            return deposits.filter(d => d.status === 'ACTIVE');
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return [];
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    // MCP-MARKER:METHOD:MINING:START_COUNTDOWN - –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    startCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
        }
        
        this.updateCountdown();
        this.countdownInterval = setInterval(() => this.updateCountdown(), 1000);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    updateCountdown() {
        const now = new Date();
        const timeLeft = this.launchDate - now;
        
        if (timeLeft <= 0) {
            this.stopCountdown();
            this.onProgramLaunched();
            return;
        }
        
        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        
        this.updateCountdownDisplay({ days, hours, minutes, seconds });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
     */
    updateCountdownDisplay(time) {
        const elements = {
            days: document.getElementById('mining-countdown-days'),
            hours: document.getElementById('mining-countdown-hours'),
            minutes: document.getElementById('mining-countdown-minutes'),
            seconds: document.getElementById('mining-countdown-seconds')
        };
        
        if (elements.days) elements.days.textContent = time.days;
        if (elements.hours) elements.hours.textContent = time.hours;
        if (elements.minutes) elements.minutes.textContent = time.minutes;
        if (elements.seconds) elements.seconds.textContent = time.seconds;
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    stopCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
     */
    // MCP-MARKER:METHOD:MINING:ON_LAUNCHED - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    onProgramLaunched() {
        this.debugLog('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞!', 'success');
        
        const countdownElement = document.getElementById('mining-countdown-container');
        if (countdownElement) {
            countdownElement.innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üéâ</div>
                    <div style="font-size: 2rem; font-weight: bold; color: var(--success-color); margin-bottom: 1rem;">
                        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!
                    </div>
                    <div style="font-size: 1.2rem; color: var(--text-secondary);">
                        –ê—Ä–µ–Ω–¥–∞ –º–æ—â–Ω–æ—Å—Ç–µ–π —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞
                    </div>
                </div>
            `;
        }
    }
    
    /**
     * –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –º–æ—â–Ω–æ—Å—Ç–∏
     */
    // MCP-MARKER:METHOD:MINING:SELECT_POWER - –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –º–æ—â–Ω–æ—Å—Ç–∏
    async selectPowerLevel(percentage) {
        try {
            this.debugLog(`–í—ã–±–æ—Ä ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            const eligibility = await this.checkUserEligibility();
            
            if (!eligibility.isEligible) {
                this.showInsufficientDepositsError(eligibility);
                return false;
            }
            
            // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const earnings = this.calculateEarnings(percentage);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const confirmed = await this.showConfirmationDialog(percentage, earnings);
            
            if (confirmed) {
                await this.activateMiningPower(percentage);
                this.scrollToCountdown();
                return true;
            }
            
            return false;
        } catch (error) {
            this.debugLog(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ—â–Ω–æ—Å—Ç–∏: ${error.message}`, 'error');
            return false;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
     */
    showInsufficientDepositsError(eligibility) {
        const message = `‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º ${eligibility.depositsRequired} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞!

–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${eligibility.depositsCount}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ ${eligibility.depositsRequired - eligibility.depositsCount} –¥–µ–ø–æ–∑–∏—Ç(–∞) –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ.`;
        
        alert(message);
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if (window.cabinetApp && window.cabinetApp.loadPage) {
            window.cabinetApp.loadPage('portfolio');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    async showConfirmationDialog(percentage, earnings) {
        const message = `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.

üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:
‚Ä¢ ${earnings.daily} USDT –≤ —Å—É—Ç–∫–∏
‚Ä¢ ${earnings.weekly} USDT –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ ${earnings.monthly} USDT –≤ –º–µ—Å—è—Ü
‚Ä¢ ${earnings.yearly} USDT –≤ –≥–æ–¥

–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä (${this.deviceInfo.cores} —è–¥–µ—Ä): ${earnings.cpu} USDT/—Å—É—Ç–∫–∏
‚Ä¢ RAM (${this.deviceInfo.memory} GB): ${earnings.ram} USDT/—Å—É—Ç–∫–∏
‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ (${this.deviceInfo.storage} TB): ${earnings.storage} USDT/—Å—É—Ç–∫–∏

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;
        
        return confirm(message);
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π
     */
    // MCP-MARKER:METHOD:MINING:ACTIVATE_POWER - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Ä–µ–Ω–¥—ã
    async activateMiningPower(percentage) {
        try {
            this.debugLog(`–ê–∫—Ç–∏–≤–∞—Ü–∏—è ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
            localStorage.setItem('mining_power_level', percentage);
            localStorage.setItem('mining_activation_date', new Date().toISOString());
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            this.showSuccessNotification(percentage);
            
            return true;
        } catch (error) {
            this.debugLog(`–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${error.message}`, 'error');
            return false;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
     */
    showSuccessNotification(percentage) {
        const daysUntilLaunch = Math.ceil((this.launchDate - new Date()) / (1000 * 60 * 60 * 24));
        const earnings = this.calculateEarnings(percentage);
        
        const message = `üöÄ –ê—Ä–µ–Ω–¥–∞ –º–æ—â–Ω–æ—Å—Ç–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å 21 –∏—é–ª—è 2025 –≥–æ–¥–∞!

üìä –í–∞—à –≤—ã–±–æ—Ä: ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π
üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${earnings.daily} USDT –≤ —Å—É—Ç–∫–∏

‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${daysUntilLaunch} –¥–Ω–µ–π –¥–æ –∑–∞–ø—É—Å–∫–∞`;
        
        alert(message);
    }
    
    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    scrollToCountdown() {
        const countdownElement = document.getElementById('mining-countdown-section');
        if (countdownElement) {
            countdownElement.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center' 
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            countdownElement.style.animation = 'pulse 2s ease-in-out';
            setTimeout(() => {
                countdownElement.style.animation = '';
            }, 2000);
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π
     */
    // MCP-MARKER:METHOD:MINING:RENDER_PAGE - –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    renderMiningRentPage() {
        const deviceInfo = this.getDeviceInfo();
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        const countdownHTML = `
            <div id="mining-countdown-section" class="countdown-section">
                <h3>üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑</h3>
                <div id="mining-countdown-container" class="countdown-grid">
                    <div class="countdown-item">
                        <div class="countdown-value" id="mining-countdown-days">0</div>
                        <div class="countdown-label">–¥–Ω–µ–π</div>
                    </div>
                    <div class="countdown-item">
                        <div class="countdown-value" id="mining-countdown-hours">0</div>
                        <div class="countdown-label">—á–∞—Å–æ–≤</div>
                    </div>
                    <div class="countdown-item">
                        <div class="countdown-value" id="mining-countdown-minutes">0</div>
                        <div class="countdown-label">–º–∏–Ω—É—Ç</div>
                    </div>
                    <div class="countdown-item">
                        <div class="countdown-value" id="mining-countdown-seconds">0</div>
                        <div class="countdown-label">—Å–µ–∫—É–Ω–¥</div>
                    </div>
                </div>
                <p class="countdown-description">21 –∏—é–ª—è 2025 –≥–æ–¥–∞ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π!</p>
            </div>
        `;
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        const deviceInfoHTML = `
            <div class="info-section">
                <h3>üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</h3>
                <div class="info-grid">
                    <div class="info-card">
                        <div class="info-icon">üñ•Ô∏è</div>
                        <div class="info-title">–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</div>
                        <div class="info-value">${deviceInfo.cores} —è–¥–µ—Ä</div>
                    </div>
                    <div class="info-card">
                        <div class="info-icon">üíæ</div>
                        <div class="info-title">–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å</div>
                        <div class="info-value">${deviceInfo.memory} GB</div>
                    </div>
                    <div class="info-card">
                        <div class="info-icon">üíø</div>
                        <div class="info-title">–•—Ä–∞–Ω–∏–ª–∏—â–µ</div>
                        <div class="info-value">${deviceInfo.storage} TB</div>
                    </div>
                </div>
            </div>
        `;
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        const earningsCardsHTML = this.powerLevels.map(percentage => {
            const earnings = this.calculateEarnings(percentage);
            const isPopular = percentage === 30;
            
            return `
                <div class="earnings-card ${isPopular ? 'popular' : ''}">
                    <div class="earnings-icon">${'‚ö°'.repeat(percentage / 10)}</div>
                    <div class="earnings-title">${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π</div>
                    <div class="earnings-amount">$${earnings.daily}/—Å—É—Ç–∫–∏</div>
                    <div class="earnings-details">
                        <div class="earnings-period">
                            <span class="period-label">–ù–µ–¥–µ–ª—è</span>
                            <span class="period-value">$${earnings.weekly}</span>
                        </div>
                        <div class="earnings-period">
                            <span class="period-label">–ú–µ—Å—è—Ü</span>
                            <span class="period-value">$${earnings.monthly}</span>
                        </div>
                        <div class="earnings-period">
                            <span class="period-label">–ì–æ–¥</span>
                            <span class="period-value">$${earnings.yearly}</span>
                        </div>
                    </div>
                    ${isPopular ? '<div class="popular-badge">–ü–æ–ø—É–ª—è—Ä–Ω–æ</div>' : ''}
                    <button class="btn btn-primary" onclick="window.miningRentService.selectPowerLevel(${percentage})">
                        –í—ã–±—Ä–∞—Ç—å
                    </button>
                </div>
            `;
        }).join('');
        
        const earningsSectionHTML = `
            <div class="earnings-section">
                <h3>üí∞ –¢–∞—Ä–∏—Ñ—ã –∏ –≤–∞—à–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</h3>
                <div class="earnings-grid">
                    ${earningsCardsHTML}
                </div>
            </div>
        `;
        
