/**
 * GENESIS 1.1 - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
 * MCP-MARKER:MODULE:CABINET_DEPOSITS - –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞
 * MCP-MARKER:FILE:DEPOSITS_CABINET_JS - –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞
 */

// MCP-MARKER:CLASS:CABINET_DEPOSIT_SERVICE - –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
window.CabinetDepositService = {
    
    // MCP-MARKER:PROPERTY:STATE_MANAGEMENT - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    currentUser: null,
    userDeposits: [],
    isLoading: false,
    lastUpdate: null,
    
    // MCP-MARKER:METHOD:INIT_SERVICE - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    async init(userAddress) {
        console.log('üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞...');
        
        this.currentUser = userAddress;
        this.isLoading = true;
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.loadUserData();
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('‚úÖ –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
            }
            
            console.log('‚úÖ –°–µ—Ä–≤–∏—Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            }
        } finally {
            this.isLoading = false;
        }
    },
    
    // MCP-MARKER:METHOD:LOAD_USER_DATA - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserData() {
        if (!this.currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        
        try {
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ BSC...', 'info');
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ BSC
            this.userDeposits = await this.checkUserDeposits(this.currentUser);
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.userDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞`);
            
            this.lastUpdate = new Date();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            this.saveLocalDeposits();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateUI();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            
            // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
            this.userDeposits = this.loadLocalDeposits();
            console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BSC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log('‚ö†Ô∏è BSC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
            }
            
            this.updateUI();
        }
    },
    
    // MCP-MARKER:METHOD:CHECK_USER_DEPOSITS - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ BSC
    async checkUserDeposits(userAddress) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å
            const transactions = await this.getTransactionsForAddress(userAddress);
            
            // –ü–∞—Ä—Å–∏–º –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            const deposits = this.parseDepositsFromTransactions(transactions);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            const updatedDeposits = this.updateDepositStatuses(deposits);
            
            if (window.GenesisTerminal) {
                window.GenesisTerminal.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${updatedDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ BSC`, 'success');
            }
            
            return updatedDeposits;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ BSC:', error);
            throw error;
        }
    },
    
    // MCP-MARKER:METHOD:GET_TRANSACTIONS_FOR_ADDRESS - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞
    async getTransactionsForAddress(address) {
        const systemAddress = window.GENESIS_CONFIG.addresses.system;
        const apiKey = window.getApiKeyForOperation('DEPOSITS');
        
        // –ü–æ–ª—É—á–∞–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const usdtTxUrl = `${window.GENESIS_CONFIG.bscscan.apiUrl}?module=account&action=tokentx&contractaddress=${window.GENESIS_CONFIG.usdt.address}&address=${systemAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`;
        
        // –ü–æ–ª—É—á–∞–µ–º PLEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const plexTxUrl = `${window.GENESIS_CONFIG.bscscan.apiUrl}?module=account&action=tokentx&contractaddress=${window.GENESIS_CONFIG.plex.address}&address=${systemAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`;
        
        const [usdtResponse, plexResponse] = await Promise.all([
            fetch(usdtTxUrl),
            fetch(plexTxUrl)
        ]);
        
        const usdtData = await usdtResponse.json();
        const plexData = await plexResponse.json();
        
        const allTransactions = [
            ...(usdtData.result || []),
            ...(plexData.result || [])
        ];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return allTransactions.filter(tx => 
            tx.from.toLowerCase() === address.toLowerCase() &&
            tx.to.toLowerCase() === systemAddress.toLowerCase()
        ).sort((a, b) => parseInt(b.timeStamp) - parseInt(a.timeStamp));
    },
    
    // MCP-MARKER:METHOD:PARSE_DEPOSITS_FROM_TRANSACTIONS - –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    parseDepositsFromTransactions(transactions) {
        const deposits = [];
        
        transactions.forEach(tx => {
            const amount = this.parseTransactionAmount(tx);
            const currency = this.getTransactionCurrency(tx);
            const plan = window.getDepositPlanByAmount(amount, currency);
            
            if (plan) {
                const deposit = {
                    txHash: tx.hash,
                    userAddress: tx.from,
                    planId: plan.id,
                    amount: amount,
                    tokenType: currency,
                    status: 'ACTIVE',
                    timestamp: new Date(parseInt(tx.timeStamp) * 1000),
                    endDate: new Date(parseInt(tx.timeStamp) * 1000 + (plan.days * 24 * 60 * 60 * 1000)),
                    blockNumber: parseInt(tx.blockNumber),
                    confirmations: parseInt(tx.confirmations || 0)
                };
                
                deposits.push(deposit);
            }
        });
        
        return deposits;
    },
    
    // MCP-MARKER:METHOD:PARSE_TRANSACTION_AMOUNT - –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    parseTransactionAmount(tx) {
        const decimals = tx.tokenDecimal || (tx.tokenSymbol === 'USDT' ? 18 : 9);
        return parseFloat(tx.value) / Math.pow(10, decimals);
    },
    
    // MCP-MARKER:METHOD:GET_TRANSACTION_CURRENCY - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    getTransactionCurrency(tx) {
        const contractAddress = tx.contractAddress.toLowerCase();
        const usdtAddress = window.GENESIS_CONFIG.usdt.address.toLowerCase();
        const plexAddress = window.GENESIS_CONFIG.plex.address.toLowerCase();
        
        if (contractAddress === usdtAddress) return 'USDT';
        if (contractAddress === plexAddress) return 'PLEX';
        return tx.tokenSymbol || 'UNKNOWN';
    },
    
    // MCP-MARKER:METHOD:UPDATE_DEPOSIT_STATUSES - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    updateDepositStatuses(deposits) {
        const now = new Date();
        
        return deposits.map(deposit => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –¥–µ–ø–æ–∑–∏—Ç
            if (deposit.endDate <= now && deposit.status === 'ACTIVE') {
                deposit.status = 'COMPLETED';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            if (deposit.confirmations < 12 && deposit.status === 'ACTIVE') {
                deposit.status = 'PENDING';
            }
            
            return deposit;
        });
    },
    
    // MCP-MARKER:METHOD:SAVE_LOCAL_DEPOSITS - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ localStorage
    saveLocalDeposits() {
        try {
            const dataToSave = {
                deposits: this.userDeposits,
                timestamp: new Date().toISOString(),
                userAddress: this.currentUser
            };
            
            localStorage.setItem(`genesis_deposits_${this.currentUser}`, JSON.stringify(dataToSave));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
        }
    },
    
    // MCP-MARKER:METHOD:LOAD_LOCAL_DEPOSITS - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ localStorage
    loadLocalDeposits() {
        try {
            const saved = localStorage.getItem(`genesis_deposits_${this.currentUser}`);
            if (!saved) return [];
            
            const data = JSON.parse(saved);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            const saveTime = new Date(data.timestamp);
            const now = new Date();
            const diffMinutes = (now - saveTime) / (1000 * 60);
            
            if (diffMinutes > 5) {
                console.log('–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                return [];
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫
            return (data.deposits || []).map(deposit => ({
                ...deposit,
                timestamp: new Date(deposit.timestamp),
                endDate: new Date(deposit.endDate)
            }));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
            return [];
        }
    },
    
    // MCP-MARKER:METHOD:UPDATE_UI - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        this.updatePortfolioStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        this.updateActiveDepositsTable();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        this.updateDepositPlansGrid();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–ª–∞–Ω–µ
        this.updateNextAvailablePlan();
    },
    
    // MCP-MARKER:METHOD:UPDATE_PORTFOLIO_STATS - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    updatePortfolioStats() {
        const stats = this.calculatePortfolioStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const updates = {
            'portfolio-total-value': `$${stats.totalValue.toFixed(2)}`,
            'portfolio-change': `+$${stats.totalEarned.toFixed(2)} –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ`,
            'portfolio-roi': `üìä ROI: +${stats.roi.toFixed(1)}%`,
            'active-deposits-count': stats.activeCount,
            'active-deposits-status': stats.activeCount > 0 ? '–ê–∫—Ç–∏–≤–Ω—ã' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
            'total-earned': `$${stats.totalEarned.toFixed(2)}`,
            'daily-earnings': `+$${stats.dailyEarnings.toFixed(2)} —Å–µ–≥–æ–¥–Ω—è`,
            'earnings-daily': `üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: $${stats.dailyEarnings.toFixed(2)}`,
            'earnings-trend': `üìà –¢—Ä–µ–Ω–¥: +${stats.growthTrend.toFixed(1)}%`
        };
        
        Object.entries(updates).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º breakdown –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        const depositsBreakdown = document.getElementById('deposits-breakdown');
        if (depositsBreakdown) {
            depositsBreakdown.innerHTML = this.generateDepositsBreakdown(stats);
        }
    },
    
    // MCP-MARKER:METHOD:CALCULATE_PORTFOLIO_STATS - –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    calculatePortfolioStats() {
        let totalValue = 0;
        let totalEarned = 0;
        let dailyEarnings = 0;
        let activeCount = 0;
        let totalExpectedProfit = 0;
        
        const now = new Date();
        
        this.userDeposits.forEach(deposit => {
            totalValue += deposit.amount;
            
            if (deposit.status === 'ACTIVE') {
                activeCount++;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
                const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
                if (plan) {
                    const totalProfit = (deposit.amount * plan.percentage / 100) - deposit.amount;
                    const dailyProfit = totalProfit / plan.days;
                    totalExpectedProfit += totalProfit;
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    const daysPassed = Math.floor((now - deposit.timestamp) / (1000 * 60 * 60 * 24));
                    const earnedProfit = Math.min(totalProfit, dailyProfit * daysPassed);
                    
                    totalEarned += earnedProfit;
                    dailyEarnings += dailyProfit;
                }
            }
        });
        
        const roi = totalValue > 0 ? ((totalEarned / totalValue) * 100) : 0;
        const growthTrend = totalExpectedProfit > 0 ? ((totalEarned / totalExpectedProfit) * 100) : 0;
        
        return {
            totalValue,
            totalEarned,
            dailyEarnings,
            activeCount,
            totalCount: this.userDeposits.length,
            roi,
            growthTrend,
            totalExpectedProfit
        };
    },
    
    // MCP-MARKER:METHOD:GENERATE_DEPOSITS_BREAKDOWN - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è breakdown –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    generateDepositsBreakdown(stats) {
        const planCounts = {};
        
        this.userDeposits.forEach(deposit => {
            if (deposit.status === 'ACTIVE') {
                const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
                if (plan) {
                    planCounts[plan.name] = (planCounts[plan.name] || 0) + 1;
                }
            }
        });
        
        const breakdown = Object.entries(planCounts).map(([planName, count]) => 
            `<div>${this.getPlanIcon(planName)} ${planName}: ${count} –∞–∫—Ç–∏–≤–Ω${count === 1 ? '—ã–π' : '—ã—Ö'}</div>`
        ).join('');
        
        return breakdown || '<div>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</div>';
    },
    
    // MCP-MARKER:METHOD:UPDATE_ACTIVE_DEPOSITS_TABLE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    updateActiveDepositsTable() {
        const container = document.getElementById('active-deposits-container');
        if (!container) return;
        
        const activeDeposits = this.userDeposits.filter(d => d.status === 'ACTIVE');
        
        if (activeDeposits.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üíº</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –≤ GENESIS 1.1</p>
                    <button class="btn" onclick="window.CabinetDepositService.showCreateDepositModal()">
                        üöÄ –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                    </button>
                </div>
            `;
            return;
        }
        
        container.innerHTML = `
            <div style="overflow-x: auto;">
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="border-bottom: 2px solid var(--border-color);">
                            <th style="padding: 12px; text-align: left; color: var(--text-primary);">–ü–ª–∞–Ω</th>
                            <th style="padding: 12px; text-align: right; color: var(--text-primary);">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è</th>
                            <th style="padding: 12px; text-align: right; color: var(--text-primary);">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</th>
                            <th style="padding: 12px; text-align: right; color: var(--text-primary);">–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
                            <th style="padding: 12px; text-align: center; color: var(--text-primary);">–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${activeDeposits.map(deposit => this.renderDepositRow(deposit)).join('')}
                    </tbody>
                </table>
            </div>
        `;
    },
    
    // MCP-MARKER:METHOD:RENDER_DEPOSIT_ROW - –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
    renderDepositRow(deposit) {
        const plan = window.GENESIS_CONFIG.depositPlans.find(p => p.id === deposit.planId);
        if (!plan) return '';
        
        const now = new Date();
        const daysPassed = Math.floor((now - deposit.timestamp) / (1000 * 60 * 60 * 24));
        const progress = Math.min(100, (daysPassed / plan.days) * 100);
        
        const totalProfit = (deposit.amount * plan.percentage / 100) - deposit.amount;
        const dailyProfit = totalProfit / plan.days;
        const earnedProfit = Math.min(totalProfit, dailyProfit * daysPassed);
        
        const daysRemaining = Math.max(0, plan.days - daysPassed);
        
        return `
            <tr style="border-bottom: 1px solid var(--bg-primary);">
                <td style="padding: 12px;">
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="font-size: 1.2rem;">${this.getPlanIcon(plan.name)}</span>
                        <div>
                            <div style="color: var(--text-primary); font-weight: 600;">${plan.name}</div>
                            <div style="color: var(--text-secondary); font-size: 0.8rem;">
                                ${plan.days} –¥–Ω–µ–π ‚Ä¢ ${plan.percentage}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                            </div>
                        </div>
                    </div>
                </td>
                <td style="padding: 12px; text-align: right;">
                    <div style="color: var(--text-primary); font-weight: 600;">$${deposit.amount.toFixed(2)}</div>
                    <div style="color: var(--text-secondary); font-size: 0.8rem;">${deposit.tokenType}</div>
                </td>
                <td style="padding: 12px; text-align: right;">
                    <div style="color: var(--success-color); font-weight: 600;">+$${earnedProfit.toFixed(2)}</div>
                    <div style="color: var(--text-secondary); font-size: 0.8rem;">
                        ${dailyProfit.toFixed(2)}/–¥–µ–Ω—å
                    </div>
                </td>
                <td style="padding: 12px; text-align: right;">
                    <div style="color: var(--warning-color); font-weight: 600;">
                        ${progress.toFixed(1)}% ‚Ä¢ ${daysRemaining}–¥
                    </div>
                    <div style="background: var(--bg-primary); height: 6px; border-radius: 3px; margin-top: 0.3rem; overflow: hidden;">
                        <div style="background: var(--success-color); height: 100%; width: ${progress}%; transition: width 0.3s ease;"></div>
                    </div>
                </td>
                <td style="padding: 12px; text-align: center;">
                    <div style="display: flex; gap: 0.5rem; justify-content: center;">
                        <button onclick="window.CabinetDepositService.viewDepositDetails('${deposit.txHash}')" 
