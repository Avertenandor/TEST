                }
                
                .modal-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 1.5rem;
                    padding-bottom: 1rem;
                    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                }
                
                .modal-header h3 {
                    margin: 0;
                    color: #4ecdc4;
                }
                
                .modal-close {
                    background: none;
                    border: none;
                    color: rgba(255, 255, 255, 0.7);
                    font-size: 2rem;
                    cursor: pointer;
                    padding: 0;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 50%;
                    transition: all 0.3s ease;
                }
                
                .modal-close:hover {
                    background: rgba(255, 255, 255, 0.1);
                    color: white;
                }
                
                .instruction-step {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                    margin-bottom: 1rem;
                    padding: 1rem;
                    background: rgba(255, 255, 255, 0.05);
                    border-radius: 10px;
                }
                
                .instruction-step .step-number {
                    background: linear-gradient(135deg, #4ecdc4, #44a08d);
                    color: white;
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: bold;
                    flex-shrink: 0;
                }
                
                .instruction-step .step-text {
                    color: rgba(255, 255, 255, 0.9);
                    flex: 1;
                }
                
                .instruction-step code {
                    background: rgba(0, 0, 0, 0.3);
                    padding: 0.25rem 0.5rem;
                    border-radius: 4px;
                    font-family: monospace;
                    color: #4ecdc4;
                }
                
                .modal-actions {
                    display: flex;
                    gap: 1rem;
                    margin-top: 2rem;
                    justify-content: center;
                }
                
                .modal-btn {
                    background: linear-gradient(135deg, #4ecdc4, #44a08d);
                    color: white;
                    border: none;
                    padding: 0.75rem 1.5rem;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 500;
                    transition: all 0.3s ease;
                }
                
                .modal-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.4);
                }
                
                .modal-btn.secondary {
                    background: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                
                .modal-btn.secondary:hover {
                    background: rgba(255, 255, 255, 0.2);
                }
                
                @media (max-width: 768px) {
                    .modal-content {
                        margin: 1rem;
                        padding: 1.5rem;
                    }
                    
                    .modal-actions {
                        flex-direction: column;
                    }
                }
            `;
            
            document.head.appendChild(style);
            document.body.appendChild(modal);
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
            modal.querySelector('.modal-overlay').addEventListener('click', (e) => {
                if (e.target === e.currentTarget) {
                    modal.remove();
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
        const walletStatusStyles = document.createElement('style');
        walletStatusStyles.textContent = `
            .wallet-status.loading {
                background: rgba(255, 193, 7, 0.2);
                color: #ffc107;
                animation: pulse 1s infinite;
            }
            
            .wallet-status.success {
                background: rgba(40, 167, 69, 0.2);
                color: #28a745;
            }
            
            .wallet-status.error {
                background: rgba(220, 53, 69, 0.2);
                color: #dc3545;
            }
            
            .wallet-status.cancelled {
                background: rgba(108, 117, 125, 0.2);
                color: #6c757d;
            }
            
            .wallet-status.info {
                background: rgba(23, 162, 184, 0.2);
                color: #17a2b8;
            }
            
            .notification-content {
                display: flex;
                align-items: center;
                gap: 0.75rem;
            }
            
            .notification-icon {
                font-size: 1.2rem;
            }
            
            .notification-text {
                font-weight: 500;
            }
        `;
        document.head.appendChild(walletStatusStyles);

// ===== Script Block 5 =====
// MCP-MARKER:CONFIG:AUTH_CONFIG - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const AUTH_CONFIG = {
            address: '0x399B22170B0AC7BB20bdC86772BfF478f201fFCD', // –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            network: 'BSC',
            chainId: 56
        };
        
        // MCP-MARKER:FUNCTION:GENERATE_QR_CODE - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
        // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        let __qrGenerating = false;
        let __qrLastFallbackLog = 0;
        async function generateQRCode() {
            if (__qrGenerating) return; // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
            const qrContainer = document.getElementById('genesis-qr-code');
            if (!qrContainer) {
                console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä QR –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            try {
                __qrGenerating = true;
                const ok = await (window.generateQRCode ? window.generateQRCode(qrContainer, AUTH_CONFIG.address) : Promise.resolve(false));
                if (!ok) throw new Error('Bridge generation failed');
                // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω canvas
                const canvas = qrContainer.querySelector('canvas');
                if (canvas) {
                    canvas.style.borderRadius = '10px';
                    canvas.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
                    canvas.style.border = '3px solid #4ecdc4';
                }
            } catch (e) {
                // —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å
                const now = Date.now();
                if (now - __qrLastFallbackLog > 5000) {
                    __qrLastFallbackLog = now;
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –º–æ—Å—Ç:', e);
                }
                showFallbackQR();
            } finally {
                __qrGenerating = false;
            }
        }
        
        // MCP-MARKER:FUNCTION:SHOW_FALLBACK_QR - Fallback QR –∫–æ–¥
        // Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è QR –∫–æ–¥–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
        function showFallbackQR() {
            const qrContainer = document.getElementById('genesis-qr-code');
            if (!qrContainer) return;
            
            // –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —É–∑–ª–æ–≤
            qrContainer.innerHTML = '';
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback QR –∫–æ–¥');
            
            // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º API (—É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            const img = document.createElement('img');
            img.src = `https://api.qrserver.com/v1/create-qr-code/?size=256x256&data=${encodeURIComponent(AUTH_CONFIG.address)}&color=000000&bgcolor=ffffff&margin=4&ecc=H&format=png`;
            img.alt = 'QR –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            img.style.width = '256px';
            img.style.height = '256px';
            img.style.borderRadius = '10px';
            img.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
            img.style.border = '3px solid #4ecdc4';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            img.onerror = function() {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback QR –∫–æ–¥–∞');
                showTextFallback();
            };
            
            img.onload = function() {
                console.log('‚úÖ Fallback QR –∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω');
            };
            
            qrContainer.appendChild(img);
        }
        
        // MCP-MARKER:FUNCTION:SHOW_TEXT_FALLBACK - –¢–µ–∫—Å—Ç–æ–≤—ã–π fallback
        // –¢–µ–∫—Å—Ç–æ–≤—ã–π fallback
        function showTextFallback() {
            const qrContainer = document.getElementById('genesis-qr-code');
            if (!qrContainer) return;
            
            console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π fallback');
            
            qrContainer.innerHTML = `
                <div class="qr-text-fallback-container">
                    <div class="qr-fallback-icon">üì±</div>
                    <div class="qr-fallback-title">QR –∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>
                    <div class="qr-fallback-description">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:</div>
                    <div class="qr-fallback-address-box">
                        ${AUTH_CONFIG.address}
                    </div>
                    <button onclick="copyAddress()" class="qr-copy-button">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å</button>
                </div>
            `;
        }
        
        // MCP-MARKER:FUNCTION:REFRESH_QR_CODE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR –∫–æ–¥–∞
        // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–∞
        function refreshQRCode() {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º QR –∫–æ–¥');
            generateQRCode();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        function copyAddress() {
            const address = AUTH_CONFIG.address;
            navigator.clipboard.writeText(address).then(function() {
                console.log('‚úÖ –ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:', address);
                showNotification('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
            }).catch(function(err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = address;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    showNotification('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
                } catch (err) {
                    showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                }
                document.body.removeChild(textArea);
            });
        }
        
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `copy-notification ${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? 'rgba(40, 167, 69, 0.9)' : 'rgba(220, 53, 69, 0.9)'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 10px;
                z-index: 10000;
                font-weight: 500;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            `;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è)
        document.addEventListener('DOMContentLoaded', function() {
            if (window.__qrInit) return;
            window.__qrInit = true;
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QR –∫–æ–¥–∞');
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
            setTimeout(() => {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π QR –∫–æ–¥
                generateQRCode();
                
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR –∫–æ–¥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if (!window.__qrIntervalStarted) {
                    window.__qrIntervalStarted = true;
                    setInterval(generateQRCode, 300000);
                }
            }, 1000);
        });
        
        // MCP-MARKER:FUNCTION:GENERATE_QR_CODE_ALTERNATIVE - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
        function generateQRCodeAlternative() {
            const qrContainer = document.getElementById('genesis-qr-code');
            if (!qrContainer) return;
            
            qrContainer.innerHTML = '';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π SVG QR –∫–æ–¥
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '256');
            svg.setAttribute('height', '256');
            svg.setAttribute('viewBox', '0 0 256 256');
            svg.style.borderRadius = '10px';
            svg.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
            svg.style.border = '3px solid #4ecdc4';
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π QR –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é Canvas API
            const canvas = document.createElement('canvas');
            canvas.width = 256;
            canvas.height = 256;
            const ctx = canvas.getContext('2d');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, 256, 256);
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω QR –∫–æ–¥–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            ctx.fillStyle = '#000000';
            const size = 8;
            const margin = 32;
            const dataSize = (256 - 2 * margin) / size;
            
            // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
            for (let i = 0; i < dataSize; i++) {
                for (let j = 0; j < dataSize; j++) {
                    if (i === 0 || i === dataSize - 1 || j === 0 || j === dataSize - 1) {
                        ctx.fillRect(margin + i * size, margin + j * size, size, size);
                    }
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º
            ctx.fillStyle = '#4ecdc4';
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('PLEX ONE', 128, 240);
            
            qrContainer.appendChild(canvas);
        }
        
        // MCP-MARKER:FUNCTION:CREATE_PROPER_QR_CODE - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π QR –∫–æ–¥
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        function createProperQRCode() {
            const qrContainer = document.getElementById('genesis-qr-code');
            if (!qrContainer) return;
            
            qrContainer.innerHTML = '';
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
            const qrData = {
                address: AUTH_CONFIG.address,
                network: AUTH_CONFIG.network,
                chainId: AUTH_CONFIG.chainId,
                token: 'PLEX ONE'
            };
            
            const qrString = JSON.stringify(qrData);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Charts API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞
            const img = document.createElement('img');
            img.src = `https://chart.googleapis.com/chart?cht=qr&chs=256x256&chl=${encodeURIComponent(qrString)}&chld=H|0`;
            img.alt = 'QR –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            img.style.width = '256px';
            img.style.height = '256px';
            img.style.borderRadius = '10px';
            img.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
            img.style.border = '3px solid #4ecdc4';
            
            img.onerror = function() {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Charts QR –∫–æ–¥–∞');
                showFallbackQR();
            };
            
            img.onload = function() {
                console.log('‚úÖ Google Charts QR –∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω');
            };
            
            qrContainer.appendChild(img);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (typeof refreshQRCode === 'undefined') {
            window.refreshQRCode = refreshQRCode;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        window.createProperQRCode = createProperQRCode;
        window.generateQRCodeAlternative = generateQRCodeAlternative;
        
        // MCP-MARKER:FUNCTION:COPY_AUTH_ADDRESS - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        function copyAuthAddress() {
