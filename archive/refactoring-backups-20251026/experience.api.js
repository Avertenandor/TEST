// modules/experience/experience.api.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–ø—ã—Ç–∞ –∏ —Å—Ç–∞–∂–∞

export default class ExperienceAPI {
    constructor(bscApi) {
        this.bscApi = bscApi;
        this.experienceData = {
            totalExperience: 0,
            level: 1,
            sections: {
                deposits: { level: 1, exp: 150, maxExp: 1000 },
                transactions: { level: 1, exp: 250, maxExp: 1000 },
                referrals: { level: 0, exp: 0, maxExp: 500 },
                multipliers: { level: 1, exp: 100, maxExp: 1000 },
                mining: { level: 0, exp: 0, maxExp: 1000, locked: true },
                terminal: { level: 0, exp: 0, maxExp: 2000 }
            },
            achievements: [],
            stageBalance: 0.0,
            totalStageEarned: 0.0
        };
        this.cache = new Map();
        this.cacheTimeout = 300000; // 5 –º–∏–Ω—É—Ç
        this.expToStageRate = 1000; // 1000 EXP = 1 STAGE
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
     */
    async init() {
        try {
            console.log('[Experience] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –æ–ø—ã—Ç–∞');
            await this.loadExperienceData();
            await this.calculateLevel();
            await this.checkAchievements();
            this.startAutoSave();
            console.log('[Experience] API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—ã—Ç–∞
     */
    async loadExperienceData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
            const stored = localStorage.getItem('genesis_experience_data');
            if (stored) {
                const data = JSON.parse(stored);
                this.experienceData = { ...this.experienceData, ...data };
            }

            // –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            await this.syncWithBlockchain();
            
            console.log('[Experience] –î–∞–Ω–Ω—ã–µ –æ–ø—ã—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.experienceData);
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
     */
    async syncWithBlockchain() {
        try {
            if (!this.bscApi || !this.bscApi.userAddress) {
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
            const deposits = await this.getDepositsData();
            this.updateSectionExp('deposits', deposits.count * 50, deposits.active * 25);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
            const transactions = await this.getTransactionsData();
            this.updateSectionExp('transactions', transactions.count * 10, 0);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
            const referrals = await this.getReferralsData();
            this.updateSectionExp('referrals', referrals.count * 100, referrals.active * 50);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–Ω–æ–∂–∏—Ç–µ–ª—è—Ö
            const multipliers = await this.getMultipliersData();
            this.updateSectionExp('multipliers', multipliers.bought * 50, multipliers.active * 25);

        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
     */
    async getDepositsData() {
        try {
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
            if (window.depositsCabinetService) {
                const deposits = await window.depositsCabinetService.getUserDeposits();
                return {
                    count: deposits.length,
                    active: deposits.filter(d => d.status === 'ACTIVE').length,
                    totalAmount: deposits.reduce((sum, d) => sum + d.amount, 0)
                };
            }
            
            return { count: 2, active: 2, totalAmount: 125 };
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
            return { count: 0, active: 0, totalAmount: 0 };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
     */
    async getTransactionsData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            const transactions = await this.bscApi?.getTransactionHistory() || [];
            return {
                count: transactions.length,
                volume: transactions.reduce((sum, tx) => sum + (tx.value || 0), 0)
            };
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            return { count: 5, volume: 325 };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
     */
    async getReferralsData() {
        try {
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
            if (window.referralService) {
                const referrals = await window.referralService.getReferrals();
                return {
                    count: referrals.length,
                    active: referrals.filter(r => r.isActive).length
                };
            }
            
            return { count: 0, active: 0 };
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
            return { count: 0, active: 0 };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–Ω–æ–∂–∏—Ç–µ–ª—è—Ö
     */
    async getMultipliersData() {
        try {
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            if (window.multipliersService) {
                const multipliers = await window.multipliersService.getUserMultipliers();
                return {
                    bought: multipliers.length,
                    active: multipliers.filter(m => m.isActive).length
                };
            }
            
            return { bought: 1, active: 1 };
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π:', error);
            return { bought: 0, active: 0 };
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ
     */
    updateSectionExp(section, baseExp, bonusExp = 0) {
        if (!this.experienceData.sections[section]) {
            return;
        }

        const newExp = baseExp + bonusExp;
        this.experienceData.sections[section].exp = Math.max(
            this.experienceData.sections[section].exp,
            newExp
        );

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–¥–µ–ª–∞
        this.calculateSectionLevel(section);
    }

    /**
     * –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Ä–∞–∑–¥–µ–ª–∞
     */
    calculateSectionLevel(section) {
        const sectionData = this.experienceData.sections[section];
        if (!sectionData) return;

        let level = 1;
        let requiredExp = 1000;
        
        while (sectionData.exp >= requiredExp) {
            level++;
            requiredExp *= 1.5; // –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –≤ 1.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
        }

        sectionData.level = level;
        sectionData.maxExp = Math.ceil(requiredExp);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
     */
    addExperience(amount, section = null, reason = '') {
        if (amount <= 0) return;

        this.experienceData.totalExperience += amount;

        if (section && this.experienceData.sections[section]) {
            this.experienceData.sections[section].exp += amount;
            this.calculateSectionLevel(section);
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        this.calculateLevel();

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ STAGE
        this.convertToStage();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.saveExperienceData();

        console.log(`[Experience] –î–æ–±–∞–≤–ª–µ–Ω –æ–ø—ã—Ç: ${amount} (${reason})`);
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    calculateLevel() {
        const totalExp = this.experienceData.totalExperience;
        let level = 1;
        let requiredExp = 1000;
        
        while (totalExp >= requiredExp) {
            level++;
            requiredExp += level * 500; // –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
        }

        const oldLevel = this.experienceData.level;
        this.experienceData.level = level;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if (level > oldLevel) {
            this.onLevelUp(level, oldLevel);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
     */
    onLevelUp(newLevel, oldLevel) {
        console.log(`[Experience] –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è! ${oldLevel} ‚Üí ${newLevel}`);

        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        const reward = this.getLevelReward(newLevel);
        if (reward) {
            alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–æ—Å—Ç–∏–≥–Ω—É—Ç ${newLevel} —É—Ä–æ–≤–µ–Ω—å!\n\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: ${reward.title}\n${reward.description}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
     */
    getLevelReward(level) {
        const rewards = {
            2: { title: 'üí∞ –ù–∞—á–∏–Ω–∞—é—â–∏–π –∏–Ω–≤–µ—Å—Ç–æ—Ä', description: '–°–∫–∏–¥–∫–∞ 5% –Ω–∞ –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã' },
            3: { title: '‚ö° –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å', description: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–Ω–æ–∂–∏—Ç–µ–ª—è–º' },
            5: { title: 'üèÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', description: '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (+50%)' },
            10: { title: 'üèÜ –ú–∞—Å—Ç–µ—Ä', description: '–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø–ª–∞–Ω–∞–º' }
        };

        return rewards[level] || null;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–ø—ã—Ç–∞ –≤ STAGE
     */
    convertToStage() {
        const totalStage = Math.floor(this.experienceData.totalExperience / this.expToStageRate);
        const newStage = totalStage - this.experienceData.totalStageEarned;
        
        if (newStage > 0) {
            this.experienceData.stageBalance += newStage;
            this.experienceData.totalStageEarned = totalStage;
            
            console.log(`[Experience] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ STAGE: ${newStage}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    async checkAchievements() {
        const achievements = this.getAvailableAchievements();
        
        for (const achievement of achievements) {
            if (this.checkAchievementCondition(achievement) && 
                !this.experienceData.achievements.includes(achievement.id)) {
                
                this.unlockAchievement(achievement);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAvailableAchievements() {
        return [
            {
                id: 'first_deposit',
                title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                description: '–°–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç',
                icon: 'üéØ',
                reward: 50,
                condition: () => this.experienceData.sections.deposits.exp >= 50
            },
            {
                id: 'investor',
                title: '–ò–Ω–≤–µ—Å—Ç–æ—Ä',
                description: '–°–æ–∑–¥–∞–ª–∏ 2 –¥–µ–ø–æ–∑–∏—Ç–∞',
                icon: 'üí∞',
                reward: 100,
                condition: () => this.experienceData.sections.deposits.exp >= 100
            },
            {
                id: 'accelerator',
                title: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å',
                description: '–ö—É–ø–∏—Ç–µ 3 –º–Ω–æ–∂–∏—Ç–µ–ª—è',
                icon: '‚ö°',
                reward: 150,
                condition: () => this.experienceData.sections.multipliers.exp >= 150
            },
            {
                id: 'mentor',
                title: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
                description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞',
                icon: 'üë•',
                reward: 200,
                condition: () => this.experienceData.sections.referrals.exp >= 100
            },
            {
                id: 'deposit_master',
                title: '–ú–∞—Å—Ç–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
                description: '–°–æ–∑–¥–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ $1000',
                icon: 'üíé',
                reward: 500,
                condition: () => this.experienceData.sections.deposits.exp >= 500
            },
            {
                id: 'genesis_legend',
                title: '–õ–µ–≥–µ–Ω–¥–∞ GENESIS',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
                icon: 'üèÜ',
                reward: 1000,
                condition: () => this.experienceData.level >= 10
            }
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    checkAchievementCondition(achievement) {
        try {
            return achievement.condition();
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
            return false;
        }
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    unlockAchievement(achievement) {
        this.experienceData.achievements.push(achievement.id);
        this.addExperience(achievement.reward, null, `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}`);
        
        console.log(`[Experience] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.title}`);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        alert(`üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!\n\n${achievement.icon} ${achievement.title}\n${achievement.description}\n\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: +${achievement.reward} EXP`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—ã—Ç–∞
     */
    getExperienceStats() {
        const nextLevelExp = this.getNextLevelExperience();
        const progressToNext = this.experienceData.totalExperience - this.getCurrentLevelMinExp();
        const progressPercent = (progressToNext / (nextLevelExp - this.getCurrentLevelMinExp())) * 100;

        return {
            totalExperience: this.experienceData.totalExperience,
            level: this.experienceData.level,
            progressToNext,
            nextLevelExp,
            progressPercent: Math.min(100, Math.max(0, progressPercent)),
            stageBalance: this.experienceData.stageBalance,
            totalStageEarned: this.experienceData.totalStageEarned,
            nextStageConversion: this.expToStageRate - (this.experienceData.totalExperience % this.expToStageRate),
            sections: { ...this.experienceData.sections },
            achievements: [...this.experienceData.achievements]
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    getNextLevelExperience() {
        let requiredExp = 1000;
        for (let i = 1; i < this.experienceData.level; i++) {
            requiredExp += (i + 1) * 500;
        }
        return requiredExp + (this.experienceData.level + 1) * 500;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    getCurrentLevelMinExp() {
        let minExp = 0;
        for (let i = 1; i < this.experienceData.level; i++) {
            minExp += 1000 + i * 500;
        }
        return minExp;
    }

    /**
     * –¢—Ä–∞—Ç–∞ STAGE
     */
    spendStage(amount, reason = '') {
        if (amount > this.experienceData.stageBalance) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STAGE –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
        }

        this.experienceData.stageBalance -= amount;
        this.saveExperienceData();

        console.log(`[Experience] –ü–æ—Ç—Ä–∞—á–µ–Ω–æ STAGE: ${amount} (${reason})`);
        return true;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø—ã—Ç–∞
     */
    saveExperienceData() {
        try {
            localStorage.setItem('genesis_experience_data', JSON.stringify(this.experienceData));
        } catch (error) {
            console.error('[Experience] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    startAutoSave() {
        setInterval(() => {
            this.saveExperienceData();
        }, 30000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–ø—ã—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    resetExperience() {
        this.experienceData = {
            totalExperience: 0,
            level: 1,
            sections: {
                deposits: { level: 1, exp: 0, maxExp: 1000 },
                transactions: { level: 1, exp: 0, maxExp: 1000 },
                referrals: { level: 0, exp: 0, maxExp: 500 },
                multipliers: { level: 1, exp: 0, maxExp: 1000 },
                mining: { level: 0, exp: 0, maxExp: 1000, locked: true },
                terminal: { level: 0, exp: 0, maxExp: 2000 }
            },
            achievements: [],
            stageBalance: 0.0,
            totalStageEarned: 0.0
        };
        
        this.saveExperienceData();
        console.log('[Experience] –î–∞–Ω–Ω—ã–µ –æ–ø—ã—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
     */
    getAchievementsInfo() {
        const allAchievements = this.getAvailableAchievements();
        
        return allAchievements.map(achievement => ({
            ...achievement,
            isEarned: this.experienceData.achievements.includes(achievement.id),
            canEarn: this.checkAchievementCondition(achievement),
            progress: this.getAchievementProgress(achievement)
        }));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    getAchievementProgress(achievement) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (achievement.id === 'deposit_master') {
            return {
                current: 125,
                required: 1000,
                percent: 12.5
            };
        }
        
        return null;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        console.log('[Experience] –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.saveExperienceData();
        this.clearCache();
        console.log('[Experience] API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
