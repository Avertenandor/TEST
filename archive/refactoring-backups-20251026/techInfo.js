/**
 * GENESIS 1.1 - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * MCP-MARKER:MODULE:TECH_INFO_SERVICE - –°–µ—Ä–≤–∏—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */

// MCP-MARKER:FIX:IDEMPOTENT_CLASS - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
if (typeof window.GenesisTechInfo === 'undefined') {
    class GenesisTechInfo {
        // MCP-MARKER:METHOD:TECH_INFO:CONSTRUCTOR - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        constructor() {
            this.techData = {};
            this.updateInterval = null;
            this.geolocationWatchId = null;
            this.storageQuota = null;
            this.init();
        }

        // MCP-MARKER:METHOD:TECH_INFO:INIT - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        init() {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ GENESIS 1.1');
            this.collectTechData();
            this.startAutoUpdate();
            this.setupEventListeners();
        }

        // MCP-MARKER:METHOD:TECH_INFO:SETUP_LISTENERS - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
        setupEventListeners() {
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            window.addEventListener('resize', () => {
                this.techData.windowSize = `${window.innerWidth} √ó ${window.innerHeight}`;
                this.updateElements();
            });

            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
            if (screen.orientation) {
                screen.orientation.addEventListener('change', () => {
                    this.techData.orientation = screen.orientation.type;
                    this.updateElements();
                });
            }

            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            window.addEventListener('online', () => {
                this.techData.onlineStatus = 'üü¢ –û–Ω–ª–∞–π–Ω';
                this.updateElements();
            });

            window.addEventListener('offline', () => {
                this.techData.onlineStatus = 'üî¥ –û—Ñ–ª–∞–π–Ω';
                this.updateElements();
            });

            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (navigator.connection) {
                navigator.connection.addEventListener('change', () => {
                    this.updateConnectionInfo();
                    this.updateElements();
                });
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:COLLECT_DATA - –°–±–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        collectTechData() {
            try {
                this.techData = {
                    // –ë—Ä–∞—É–∑–µ—Ä –∏ —Å–∏—Å—Ç–µ–º–∞
                    browserName: this.getBrowserInfo(),
                    platform: this.getPlatformInfo(),
                    language: navigator.language || 'Unknown',
                    cookies: navigator.cookieEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã',
                    cores: navigator.hardwareConcurrency || 'Unknown',
                    
                    // –≠–∫—Ä–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    screenResolution: `${screen.width} √ó ${screen.height}`,
                    windowSize: `${window.innerWidth} √ó ${window.innerHeight}`,
                    colorDepth: `${screen.colorDepth} –±–∏—Ç`,
                    pixelRatio: window.devicePixelRatio || 1,
                    orientation: this.getOrientation(),
                    
                    // –í—Ä–µ–º—è –∏ –ª–æ–∫–∞—Ü–∏—è
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                    utcOffset: this.getUTCOffset(),
                    locale: Intl.DateTimeFormat().resolvedOptions().locale,
                    currentTime: new Date().toLocaleString('ru-RU'),
                    
                    // –°–µ—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    onlineStatus: navigator.onLine ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω',
                    connectionType: this.getConnectionType(),
                    downlink: this.getDownlink(),
                    rtt: this.getRTT(),
                    ipAddress: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                    
                    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                    dnt: navigator.doNotTrack === '1' ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω',
                    httpsStatus: location.protocol === 'https:' ? 'üîí –ó–∞—â–∏—â–µ–Ω–æ' : '‚ö†Ô∏è –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ',
                    webdriver: navigator.webdriver ? '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω' : '‚úÖ –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω',
                    pluginsCount: this.getPluginsInfo(),
                    
                    // WebGL –∏ –≥—Ä–∞—Ñ–∏–∫–∞
                    webglInfo: this.getWebGLInfo(),
                    
                    // –ü–∞–º—è—Ç—å –∏ —Ä–µ—Å—É—Ä—Å—ã
                    deviceMemory: this.getDeviceMemory(),
                    jsMemory: this.getJSMemory(),
                    storageInfo: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                    
                    // –ë–∞—Ç–∞—Ä–µ—è (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                    batteryLevel: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                    batteryCharging: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                    
                    // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
                    geolocation: '–ù–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ'
                };

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                this.getBatteryInfo();
                this.getIPAddress();
                this.getStorageInfo();
                this.updateConnectionInfo();

                console.log('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞');
                return this.techData;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
                return {};
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:GET_BROWSER - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        getBrowserInfo() {
            const ua = navigator.userAgent;
            let browser = 'Unknown';
            let version = '';

            if (ua.includes('Chrome') && !ua.includes('Edg')) {
                browser = 'Chrome';
                version = ua.match(/Chrome\/(\d+)/)?.[1] || '';
            } else if (ua.includes('Firefox')) {
                browser = 'Firefox';
                version = ua.match(/Firefox\/(\d+)/)?.[1] || '';
            } else if (ua.includes('Safari') && !ua.includes('Chrome')) {
                browser = 'Safari';
                version = ua.match(/Version\/(\d+)/)?.[1] || '';
            } else if (ua.includes('Edg')) {
                browser = 'Edge';
                version = ua.match(/Edg\/(\d+)/)?.[1] || '';
            } else if (ua.includes('MSIE') || ua.includes('Trident/')) {
                browser = 'Internet Explorer';
                version = ua.match(/MSIE (\d+)/)?.[1] || ua.match(/rv:(\d+)/)?.[1] || '';
            }

            return version ? `${browser} ${version}` : browser;
        }

        // MCP-MARKER:METHOD:TECH_INFO:GET_PLATFORM - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        getPlatformInfo() {
            const platform = navigator.platform || 'Unknown';
            const os = this.getOperatingSystem();
            return `${platform} (${os})`;
        }

        getOperatingSystem() {
            const ua = navigator.userAgent;
            if (ua.includes('Windows')) return 'Windows';
            if (ua.includes('Mac')) return 'macOS';
            if (ua.includes('Linux')) return 'Linux';
            if (ua.includes('Android')) return 'Android';
            if (ua.includes('iOS')) return 'iOS';
            return 'Unknown';
        }

        getOrientation() {
            if (screen.orientation) {
                return screen.orientation.type;
            }
            return window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';
        }

        getUTCOffset() {
            const offset = new Date().getTimezoneOffset();
            const hours = Math.abs(Math.floor(offset / 60));
            const minutes = Math.abs(offset % 60);
            const sign = offset > 0 ? '-' : '+';
            return `UTC${sign}${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        }

        getConnectionType() {
            if (navigator.connection) {
                const type = navigator.connection.effectiveType || navigator.connection.type;
                const speed = navigator.connection.downlink;
                return `${type} (${speed} Mbps)`;
            }
            return 'Unknown';
        }

        getDownlink() {
            if (navigator.connection && navigator.connection.downlink) {
                return `${navigator.connection.downlink} Mbps`;
            }
            return 'Unknown';
        }

        getRTT() {
            if (navigator.connection && navigator.connection.rtt) {
                return `${navigator.connection.rtt} ms`;
            }
            return 'Unknown';
        }

        updateConnectionInfo() {
            if (navigator.connection) {
                this.techData.connectionType = this.getConnectionType();
                this.techData.downlink = this.getDownlink();
                this.techData.rtt = this.getRTT();
            }
        }

        getPluginsInfo() {
            if (navigator.plugins && navigator.plugins.length > 0) {
                const plugins = Array.from(navigator.plugins).map(p => p.name).join(', ');
                return `${navigator.plugins.length} (${plugins.substring(0, 50)}${plugins.length > 50 ? '...' : ''})`;
            }
            return '0';
        }

        // MCP-MARKER:METHOD:TECH_INFO:GET_WEBGL - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebGL
        getWebGLInfo() {
            try {
                const canvas = document.createElement('canvas');
                const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
                if (gl) {
                    const renderer = gl.getParameter(gl.RENDERER);
                    const vendor = gl.getParameter(gl.VENDOR);
                    const version = gl.getParameter(gl.VERSION);
                    return `${renderer} (${vendor})`;
                } else {
                    return '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
                }
            } catch (e) {
                return '‚ùå –û—à–∏–±–∫–∞';
            }
        }

        getDeviceMemory() {
            if (navigator.deviceMemory) {
                return `${navigator.deviceMemory} GB`;
            }
            return 'Unknown';
        }

        getJSMemory() {
            if (performance.memory) {
                const used = (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(2);
                const total = (performance.memory.totalJSHeapSize / 1024 / 1024).toFixed(2);
                const limit = (performance.memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2);
                return `${used} MB / ${total} MB (–ª–∏–º–∏—Ç: ${limit} MB)`;
            }
            return 'Unknown';
        }

        // MCP-MARKER:METHOD:TECH_INFO:GET_BATTERY - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ
        async getBatteryInfo() {
            if (navigator.getBattery) {
                try {
                    const battery = await navigator.getBattery();
                    const level = (battery.level * 100).toFixed(0);
                    const charging = battery.charging ? 'üîå –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è' : 'üîã –ù–∞ –±–∞—Ç–∞—Ä–µ–µ';
                    const timeToCharge = battery.chargingTime !== Infinity ? `${Math.floor(battery.chargingTime / 60)} –º–∏–Ω` : '‚àû';
                    const timeToDischarge = battery.dischargingTime !== Infinity ? `${Math.floor(battery.dischargingTime / 60)} –º–∏–Ω` : '‚àû';
                    
                    this.techData.batteryLevel = `${level}%`;
                    this.techData.batteryCharging = `${charging} (${battery.charging ? timeToCharge : timeToDischarge})`;
                    
                    this.updateElements();
                    
                    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
                    battery.addEventListener('levelchange', () => {
                        const newLevel = (battery.level * 100).toFixed(0);
                        this.techData.batteryLevel = `${newLevel}%`;
                        this.updateElements();
                    });
                    
                    battery.addEventListener('chargingchange', () => {
                        const newCharging = battery.charging ? 'üîå –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è' : 'üîã –ù–∞ –±–∞—Ç–∞—Ä–µ–µ';
                        const time = battery.charging ? 
                            (battery.chargingTime !== Infinity ? `${Math.floor(battery.chargingTime / 60)} –º–∏–Ω` : '‚àû') :
                            (battery.dischargingTime !== Infinity ? `${Math.floor(battery.dischargingTime / 60)} –º–∏–Ω` : '‚àû');
                        this.techData.batteryCharging = `${newCharging} (${time})`;
                        this.updateElements();
                    });
                } catch (error) {
                    this.techData.batteryLevel = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                    this.techData.batteryCharging = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
                }
            } else {
                this.techData.batteryLevel = '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
                this.techData.batteryCharging = '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:GET_IP - –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
        async getIPAddress() {
            // –ù–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ –Ω–µ –¥–µ–ª–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ IP-–∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å CSP –∏ –Ω–µ —à—É–º–µ—Ç—å
            if (window.GENESIS_LANDING) {
                this.techData.ipAddress = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (landing)';
                this.updateElements();
                return;
            }
            try {
                const response = await fetch('https://api.ipify.org?format=json');
                const data = await response.json();
                this.techData.ipAddress = data.ip;
                this.updateElements();
            } catch (error) {
                try {
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
                    const response = await fetch('https://api.myip.com');
                    const data = await response.json();
                    this.techData.ipAddress = data.ip;
                    this.updateElements();
                } catch (error2) {
                    this.techData.ipAddress = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ';
                    this.updateElements();
                }
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:GET_STORAGE - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        async getStorageInfo() {
            if ('storage' in navigator && 'estimate' in navigator.storage) {
                try {
                    const estimate = await navigator.storage.estimate();
                    const used = (estimate.usage / 1024 / 1024).toFixed(2);
                    const quota = (estimate.quota / 1024 / 1024).toFixed(2);
                    const percentage = ((estimate.usage / estimate.quota) * 100).toFixed(1);
                    
                    this.techData.storageInfo = `${used} MB / ${quota} MB (${percentage}%)`;
                    this.updateElements();
                } catch (error) {
                    this.techData.storageInfo = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è';
                    this.updateElements();
                }
            } else {
                this.techData.storageInfo = '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
                this.updateElements();
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:UPDATE_ELEMENTS - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        updateElements() {
            // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const elementMapping = {
                'browserName': 'browser-name',
                'platform': 'platform',
                'language': 'language',
                'cookies': 'cookies',
                'cores': 'cores',
                'screenResolution': 'screen-resolution',
                'windowSize': 'window-size',
                'colorDepth': 'color-depth',
                'pixelRatio': 'pixel-ratio',
                'orientation': 'orientation',
                'timezone': 'timezone',
                'utcOffset': 'utc-offset',
                'locale': 'locale',
                'currentTime': 'current-time',
                'geolocation': 'geolocation',
                'onlineStatus': 'online-status',
                'connectionType': 'connection-type',
                'downlink': 'downlink',
                'rtt': 'rtt',
                'ipAddress': 'ip-address',
                'batteryLevel': 'battery-level',
                'batteryCharging': 'battery-charging',
                'deviceMemory': 'device-memory',
                'jsMemory': 'js-memory',
                'storageInfo': 'storage-info',
                'dnt': 'dnt',
                'httpsStatus': 'https-status',
                'webdriver': 'webdriver',
                'pluginsCount': 'plugins-count',
                'webglInfo': 'webgl-info'
            };

            Object.entries(elementMapping).forEach(([dataKey, elementId]) => {
                const element = document.getElementById(elementId);
                if (element && this.techData[dataKey]) {
                    element.textContent = this.techData[dataKey];
                    element.classList.add('updated');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    element.style.animation = 'none';
                    element.offsetHeight; // Trigger reflow
                    element.style.animation = 'techUpdate 0.3s ease-in-out';
                }
            });
        }

        startAutoUpdate() {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            this.updateInterval = setInterval(() => {
                this.techData.currentTime = new Date().toLocaleString('ru-RU');
                this.techData.onlineStatus = navigator.onLine ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω';
                this.updateElements();
            }, 1000);
        }

        stopAutoUpdate() {
            if (this.updateInterval) {
                clearInterval(this.updateInterval);
                this.updateInterval = null;
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:REQUEST_GEO - –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        async requestGeolocation() {
            if (!navigator.geolocation) {
                this.techData.geolocation = '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
                this.updateElements();
                return;
            }

            this.techData.geolocation = '–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...';
            this.updateElements();

            try {
                const position = await new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(resolve, reject, {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 60000
                    });
                });

                const { latitude, longitude, accuracy } = position.coords;
                this.techData.geolocation = `${latitude.toFixed(6)}, ${longitude.toFixed(6)} (¬±${accuracy.toFixed(0)}–º)`;
                
                // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                this.geolocationWatchId = navigator.geolocation.watchPosition(
                    (pos) => {
                        const { latitude, longitude, accuracy } = pos.coords;
                        this.techData.geolocation = `${latitude.toFixed(6)}, ${longitude.toFixed(6)} (¬±${accuracy.toFixed(0)}–º)`;
                        this.updateElements();
                    },
                    (error) => {
                        this.techData.geolocation = `–û—à–∏–±–∫–∞: ${error.message}`;
                        this.updateElements();
                    },
                    { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }
                );

                this.updateElements();
            } catch (error) {
                this.techData.geolocation = `–û—à–∏–±–∫–∞: ${error.message}`;
                this.updateElements();
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:REFRESH - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        refreshData() {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
            this.collectTechData();
            this.updateElements();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.GenesisNotifications) {
                window.GenesisNotifications.show('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            }
        }

        // MCP-MARKER:METHOD:TECH_INFO:EXPORT - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        exportData() {
            const data = {
                timestamp: new Date().toISOString(),
                deviceInfo: this.techData,
                userAgent: navigator.userAgent,
                screenInfo: {
                    width: screen.width,
                    height: screen.height,
                    colorDepth: screen.colorDepth,
                    pixelDepth: screen.pixelDepth
                },
                windowInfo: {
                    width: window.innerWidth,
                    height: window.innerHeight,
                    devicePixelRatio: window.devicePixelRatio
                }
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `genesis-tech-info-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
            a.click();
            URL.revokeObjectURL(url);

            if (window.GenesisNotifications) {
                window.GenesisNotifications.show('üì• –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
            }
        }

        getData() {
            return this.techData;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        refresh() {
            this.refreshData();
        }
    }

    window.GenesisTechInfo = new GenesisTechInfo();

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.updateTechInfo = function() {
        if (window.GenesisTechInfo) {
            window.GenesisTechInfo.refreshData();
        }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const style = document.createElement('style');
    style.textContent = `
@keyframes techUpdate {
    0% { background-color: rgba(255, 107, 53, 0.1); }
    50% { background-color: rgba(255, 107, 53, 0.2); }
    100% { background-color: transparent; }
}

.tech-card-checkmark {
    position: absolute;
    top: 10px;
    right: 10px;
    color: #00ff41;
    font-weight: bold;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
}
`;
    document.head.appendChild(style);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GenesisTechInfo;
} 