/**
 * –°–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages
 * –ö–æ–ø–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤ –∏ –Ω–µ–Ω—É–∂–Ω–æ–µ
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

const excludeDirs = [
    'node_modules',
    '.git',
    '–∞—Ä—Ö–∏–≤',
    'archive',
    'dist',
    'tests',
    '—Ç–µ—Å—Ç—ã',
    '.github',
    'e2e',
    'TEST'
];

const excludeFiles = [
    '.env',
    '.env.local',
    'package-lock.json',
    'tsconfig.json',
    'vite.config.ts',
    'playwright.config.js',
    'jest.config.js',
    '.eslintrc',
    '.gitignore',
    'bot_data.db',
    'DEPLOYMENT.md'
];

const excludePatterns = [
    /^PR_/,
    /^CREATE_PR/,
    /REPORT/i,
    /–û–¢–ß–ï–¢/i,
    /DEPLOYMENT/i
];

function shouldExclude(filePath) {
    const relativePath = path.relative(rootDir, filePath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for (const exclude of excludeDirs) {
        if (relativePath.includes(exclude)) {
            return true;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    const fileName = path.basename(filePath);
    if (excludeFiles.includes(fileName)) {
        return true;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (excludePatterns.some(pattern => pattern.test(fileName))) {
        return true;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º README —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
    if (fileName.includes('README') && fileName !== 'README.md') {
        return true;
    }
    
    return false;
}

function copyFile(src, dest) {
    const destDir = path.dirname(dest);
    if (!fs.existsSync(destDir)) {
        fs.mkdirSync(destDir, { recursive: true });
    }
    fs.copyFileSync(src, dest);
}

function copyDirectory(srcDir, destDir) {
    if (!fs.existsSync(destDir)) {
        fs.mkdirSync(destDir, { recursive: true });
    }
    
    const entries = fs.readdirSync(srcDir, { withFileTypes: true });
    
    for (const entry of entries) {
        const srcPath = path.join(srcDir, entry.name);
        const destPath = path.join(destDir, entry.name);
        
        if (shouldExclude(srcPath)) {
            continue;
        }
        
        if (entry.isDirectory()) {
            copyDirectory(srcPath, destPath);
        } else {
            copyFile(srcPath, destPath);
        }
    }
}

function prepareDeploy() {
    const distDir = path.join(rootDir, 'dist');
    
    // –û—á–∏—â–∞–µ–º dist
    if (fs.existsSync(distDir)) {
        fs.rmSync(distDir, { recursive: true, force: true });
    }
    fs.mkdirSync(distDir, { recursive: true });
    
    console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é...\n');
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    const entries = fs.readdirSync(rootDir, { withFileTypes: true });
    
    for (const entry of entries) {
        const srcPath = path.join(rootDir, entry.name);
        const destPath = path.join(distDir, entry.name);
        
        if (shouldExclude(srcPath) || entry.name === 'dist') {
            continue;
        }
        
        if (entry.isDirectory()) {
            console.log(`üìÅ –ö–æ–ø–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${entry.name}`);
            copyDirectory(srcPath, destPath);
        } else {
            console.log(`üìÑ –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª: ${entry.name}`);
            copyFile(srcPath, destPath);
        }
    }
    
    console.log('\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ dist/ –≥–æ—Ç–æ–≤—ã –∫ –¥–µ–ø–ª–æ—é.');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${countFiles(distDir)} —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ`);
}

function countFiles(dir) {
    let count = 0;
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        if (entry.isDirectory()) {
            count += countFiles(fullPath);
        } else {
            count++;
        }
    }
    
    return count;
}

// –ó–∞–ø—É—Å–∫
const isMainModule = import.meta.url === `file://${path.resolve(process.argv[1])}`.replace(/\\/g, '/');
if (isMainModule || import.meta.url.includes('prepare-deploy')) {
    prepareDeploy();
}

export { prepareDeploy };

