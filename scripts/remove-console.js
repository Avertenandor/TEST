/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è console.log –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–±–æ—Ä–∫–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/remove-console.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const directoriesToProcess = [
    'js',
    'core',
    'modules',
    'shared',
    'src'
];

const extensions = ['.js', '.ts'];

function shouldProcessFile(filePath) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤, node_modules –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
    if (filePath.includes('–∞—Ä—Ö–∏–≤') || 
        filePath.includes('archive') ||
        filePath.includes('node_modules') ||
        filePath.includes('dist') ||
        filePath.includes('.git')) {
        return false;
    }
    
    return extensions.some(ext => filePath.endsWith(ext));
}

function removeConsoleLogs(content, filePath) {
    let modified = content;
    let changesCount = 0;
    
    // –£–¥–∞–ª—è–µ–º console.log, console.error, console.warn, console.info, console.debug
    // –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —Å —Ñ–ª–∞–≥–æ–º DEBUG
    const consolePatterns = [
        /console\.(log|error|warn|info|debug|trace)\([^)]*\);?\s*/g,
        /console\.(log|error|warn|info|debug|trace)\([^)]*\)\s*/g
    ];
    
    consolePatterns.forEach(pattern => {
        const matches = modified.match(pattern);
        if (matches) {
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏ –Ω–µ –≤ —É—Å–ª–æ–≤–∏–∏ DEBUG
            modified = modified.replace(pattern, (match) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —É—Å–ª–æ–≤–∏–µ DEBUG
                const beforeMatch = modified.substring(
                    Math.max(0, modified.indexOf(match) - 100),
                    modified.indexOf(match)
                );
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ DEBUG –∏–ª–∏ development - –æ—Å—Ç–∞–≤–ª—è–µ–º
                if (beforeMatch.includes('DEBUG') || 
                    beforeMatch.includes('development') ||
                    beforeMatch.includes('VITE_DEBUG')) {
                    return match;
                }
                
                changesCount++;
                return '';
            });
        }
    });
    
    return { content: modified, changes: changesCount };
}

function processDirectory(dirPath) {
    let totalChanges = 0;
    let filesProcessed = 0;
    
    function walkDir(currentPath) {
        const files = fs.readdirSync(currentPath);
        
        files.forEach(file => {
            const filePath = path.join(currentPath, file);
            const stat = fs.statSync(filePath);
            
            if (stat.isDirectory()) {
                if (shouldProcessFile(filePath)) {
                    walkDir(filePath);
                }
            } else if (shouldProcessFile(filePath)) {
                try {
                    const content = fs.readFileSync(filePath, 'utf8');
                    const result = removeConsoleLogs(content, filePath);
                    
                    if (result.changes > 0) {
                        fs.writeFileSync(filePath, result.content, 'utf8');
                        totalChanges += result.changes;
                        filesProcessed++;
                        console.log(`‚úì ${filePath}: —É–¥–∞–ª–µ–Ω–æ ${result.changes} console –≤—ã–∑–æ–≤–æ–≤`);
                    }
                } catch (error) {
                    console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
                }
            }
        });
    }
    
    directoriesToProcess.forEach(dir => {
        const fullPath = path.join(__dirname, '..', dir);
        if (fs.existsSync(fullPath)) {
            walkDir(fullPath);
        }
    });
    
    return { totalChanges, filesProcessed };
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
    console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ console.log –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ñ–∞–π–ª–æ–≤...\n');
    const result = processDirectory(__dirname);
    console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.filesProcessed}, —É–¥–∞–ª–µ–Ω–æ console –≤—ã–∑–æ–≤–æ–≤: ${result.totalChanges}`);
}

export { removeConsoleLogs, processDirectory };

