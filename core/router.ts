// core/router.ts
// Router –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏

export interface Module {
    id: string;
    route?: string;
    mount(el: HTMLElement, props?: any): Promise<void> | void;
    unmount?(): void;
    canActivate?(ctx: RouterContext): boolean | Promise<boolean>;
    init?(): void;
}

export interface RouterContext {
    path: string;
    params: Record<string, string>;
    query: Record<string, string>;
    user?: any;
}

export interface RouteConfig {
    path: string;
    module: string;
    public?: boolean;
    restricted?: boolean;
    guards?: Array<(ctx: RouterContext) => boolean | Promise<boolean>>;
}

export class Router {
    private currentModule: Module | null = null;
    private currentPath: string | null = null;
    private container: HTMLElement | null = null;
    private navigationContainer: HTMLElement | null = null;
    private moduleLoader: (moduleName: string) => Promise<Module>;
    private routes: Map<string, RouteConfig> = new Map();
    private publicModules: Set<string> = new Set();
    private restrictedModules: Set<string> = new Set();

    constructor(moduleLoader: (moduleName: string) => Promise<Module>) {
        this.moduleLoader = moduleLoader;
        this.initRoutes();
        this.init();
    }

    private initRoutes(): void {
        // –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        const routeConfigs: RouteConfig[] = [
            { path: '/', module: 'dashboard', public: false },
            { path: '/home', module: 'home', public: true },
            { path: '/auth', module: 'auth', public: true },
            { path: '/deposits', module: 'deposits', public: false, restricted: true },
            { path: '/portfolio', module: 'portfolio', public: false, restricted: true },
            { path: '/transactions', module: 'transactions', public: false },
            { path: '/analytics', module: 'analytics', public: false, restricted: true },
            { path: '/bonuses', module: 'bonuses', public: false },
            { path: '/gifts', module: 'gifts', public: false },
            { path: '/referrals', module: 'referrals', public: false },
            { path: '/multipliers', module: 'multipliers', public: false },
            { path: '/mining-rent', module: 'mining-rent', public: false },
            { path: '/my-device', module: 'device', public: false },
            { path: '/plex-coin', module: 'plex-coin', public: false },
            { path: '/settings', module: 'settings', public: false },
            { path: '/experience', module: 'experience', public: false },
            { path: '/rank', module: 'rank', public: false },
            { path: '/how-it-works', module: 'how-it-works', public: true },
            { path: '/terminal', module: 'terminal', public: false },
            { path: '/platform-access', module: 'platform-access', public: false, restricted: true }
        ];

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routeConfigs.forEach(config => {
            this.routes.set(config.path, config);
            if (config.public) {
                this.publicModules.add(config.module);
            }
            if (config.restricted) {
                this.restrictedModules.add(config.module);
            }
        });
    }

    private init(): void {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        this.container = document.getElementById('app-container');
        this.navigationContainer = document.getElementById('app-navigation');

        if (!this.container) {
            console.error('‚ùå App container not found');
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        window.addEventListener('popstate', () => {
            this.handleRoute(false);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
        document.addEventListener('click', (event) => {
            const target = event.target as HTMLElement;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º data-route –∞—Ç—Ä–∏–±—É—Ç
            const routeLink = target.closest('[data-route]');
            if (routeLink) {
                event.preventDefault();
                const route = (routeLink as HTMLElement).dataset.route!;
                this.navigate(route);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            const anchor = target.closest('a');
            if (anchor && anchor.href && anchor.href.startsWith(window.location.origin)) {
                const url = new URL(anchor.href);
                if (this.routes.has(url.pathname)) {
                    event.preventDefault();
                    this.navigate(url.pathname);
                }
            }
        });

        // –°—Ç—Ä–æ–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.buildNavigation();
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
     */
    private buildNavigation(): void {
        if (!this.navigationContainer) return;

        const navItems = [
            { path: '/home', icon: 'üè†', text: '–ì–ª–∞–≤–Ω–∞—è' },
            { path: '/', icon: 'üìä', text: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
            { path: '/how-it-works', icon: 'üõ†Ô∏è', text: '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ' },
            { path: '/deposits', icon: 'üí∞', text: '–î–µ–ø–æ–∑–∏—Ç—ã' },
            { path: '/portfolio', icon: 'üíº', text: '–ü–æ—Ä—Ç—Ñ–µ–ª—å' },
            { path: '/transactions', icon: 'üìã', text: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
            { path: '/analytics', icon: 'üìà', text: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' },
            { path: '/bonuses', icon: 'üéÅ', text: '–ë–æ–Ω—É—Å—ã' },
            { path: '/gifts', icon: 'üéØ', text: '–ü–æ–¥–∞—Ä–∫–∏' },
            { path: '/referrals', icon: 'üë•', text: '–†–µ—Ñ–µ—Ä–∞–ª—ã' },
            { path: '/multipliers', icon: '‚ö°', text: '–ú–Ω–æ–∂–∏—Ç–µ–ª–∏' },
            { path: '/mining-rent', icon: '‚õèÔ∏è', text: '–ê—Ä–µ–Ω–¥–∞ –º–∞–π–Ω–∏–Ω–≥–∞' },
            { path: '/my-device', icon: 'üíª', text: '–ú–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' },
            { path: '/plex-coin', icon: 'ü™ô', text: 'PLEX Coin' },
            { path: '/settings', icon: '‚öôÔ∏è', text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
            { path: '/experience', icon: 'üèÜ', text: '–û–ø—ã—Ç' },
            { path: '/rank', icon: 'ü•á', text: '–†–∞–Ω–≥' },
            { path: '/terminal', icon: 'üíª', text: '–¢–µ—Ä–º–∏–Ω–∞–ª' },
            { path: '/platform-access', icon: 'üîê', text: '–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ' }
        ];

        this.navigationContainer.innerHTML = navItems
            .map(item => `
        <a href="${item.path}" data-route="${item.path}" class="nav-item">
          <span class="nav-icon">${item.icon}</span>
          <span class="nav-text">${item.text}</span>
        </a>
      `)
            .join('');
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç
     */
    private async handleRoute(updateHistory: boolean = true): Promise<void> {
        const path = window.location.pathname;
        const routeConfig = this.routes.get(path);

        if (!routeConfig) {
            console.warn(`Route not found: ${path}`);
            this.navigate('/home');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const canAccess = await this.checkAccess(routeConfig);
        if (!canAccess) {
            console.warn(`Access denied to route: ${path}`);
            this.navigate('/auth');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
        if (updateHistory) {
            window.history.pushState({}, '', path);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–æ–Ω—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        await this.loadAndMountModule(routeConfig.module, path);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ä—à—Ä—É—Ç—É
     */
    private async checkAccess(routeConfig: RouteConfig): Promise<boolean> {
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
        if (routeConfig.public) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        const user = this.getCurrentUser();
        if (!user) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (routeConfig.restricted) {
            const hasAccess = await this.checkPlatformAccess(user);
            if (!hasAccess) {
                return false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–≤–∞—Ä–¥—ã
        if (routeConfig.guards) {
            const context = this.createRouterContext();
            for (const guard of routeConfig.guards) {
                const result = await guard(context);
                if (!result) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –º–æ–Ω—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å
     */
    private async loadAndMountModule(moduleName: string, path: string): Promise<void> {
        try {
            // –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
            if (this.currentModule && this.currentModule.unmount) {
                this.currentModule.unmount();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
            const module = await this.moduleLoader(moduleName);

            if (!this.container) {
                throw new Error('Container not found');
            }

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.container.innerHTML = '';

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const context = this.createRouterContext();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º canActivate
            if (module.canActivate) {
                const canActivate = await module.canActivate(context);
                if (!canActivate) {
                    throw new Error(`Module ${moduleName} cannot be activated`);
                }
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            if (module.init) {
                module.init();
            }

            // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            await module.mount(this.container, context);

            this.currentModule = module;
            this.currentPath = path;

            console.log(`‚úÖ Module ${moduleName} mounted successfully`);

        } catch (error) {
            console.error(`‚ùå Failed to load module ${moduleName}:`, error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (this.container) {
                this.container.innerHTML = `
          <div class="error-container">
            <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è</h2>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: ${moduleName}</p>
            <button onclick="window.location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
          </div>
        `;
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ—É—Ç–µ—Ä–∞
     */
    private createRouterContext(): RouterContext {
        const url = new URL(window.location.href);
        const params: Record<string, string> = {};
        const query: Record<string, string> = {};

        // –ü–∞—Ä—Å–∏–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        url.searchParams.forEach((value, key) => {
            query[key] = value;
        });

        return {
            path: url.pathname,
            params,
            query,
            user: this.getCurrentUser()
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private getCurrentUser(): any {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ store
        return null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
     */
    private async checkPlatformAccess(_user: any): Promise<boolean> {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        return false;
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–∞—Ä—à—Ä—É—Ç—É
     */
    public navigate(path: string): void {
        window.history.pushState({}, '', path);
        this.handleRoute(false);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
     */
    public getCurrentPath(): string | null {
        return this.currentPath;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
     */
    public getCurrentModule(): Module | null {
        return this.currentModule;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä
     */
    public start(): void {
        this.handleRoute(false);
    }
}
