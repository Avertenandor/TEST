// MCP CLEANUP SCRIPT - –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML
const fs = require('fs');

console.log('üßπ MCP HTML CLEANUP TOOL');
console.log('==========================');

try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync('cabinet.html', 'utf8');
    const lines = content.split('\n');
    
    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${lines.length} —Å—Ç—Ä–æ–∫`);
    
    // –°–æ–∑–¥–∞–µ–º backup
    fs.writeFileSync('cabinet_before_html_cleanup.html', content);
    console.log('üíæ –°–æ–∑–¥–∞–Ω backup: cabinet_before_html_cleanup.html');
    
    // –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ —Å HTML –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π
    let inFunction = false;
    let braceCount = 0;
    let cleanedLines = [];
    let removedLinesCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const trimmed = line.trim();
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
        const openBraces = (line.match(/\{/g) || []).length;
        const closeBraces = (line.match(/\}/g) || []).length;
        braceCount += openBraces - closeBraces;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if (trimmed.includes(': function(') || trimmed.includes('function ')) {
            inFunction = true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ HTML –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const isHTMLLine = trimmed.startsWith('<') && 
                          !inFunction && 
                          !trimmed.startsWith('<!--') &&
                          !trimmed.includes('MCP-MARKER') &&
                          !trimmed.includes('//');
        
        const isStrayHTML = (trimmed.includes('<div') || 
                           trimmed.includes('<h2') || 
                           trimmed.includes('<h3') || 
                           trimmed.includes('<p') ||
                           trimmed.includes('<ul') ||
                           trimmed.includes('<li') ||
                           trimmed.includes('</div>') ||
                           trimmed.includes('</h2>') ||
                           trimmed.includes('</h3>') ||
                           trimmed.includes('</p>') ||
                           trimmed.includes('</ul>') ||
                           trimmed.includes('</li>')) && 
                          !inFunction &&
                          !trimmed.includes('return `') &&
                          !trimmed.includes('`');
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ HTML –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        if (!isHTMLLine && !isStrayHTML) {
            cleanedLines.push(line);
        } else {
            removedLinesCount++;
            console.log(`‚ùå –£–¥–∞–ª—è–µ–º HTML —Å—Ç—Ä–æ–∫—É ${i + 1}: ${trimmed.substring(0, 80)}...`);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º inFunction –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏—Å—å –≤—Å–µ —Å–∫–æ–±–∫–∏
        if (braceCount <= 0 && inFunction) {
            inFunction = false;
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const cleanedContent = cleanedLines.join('\n');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs.writeFileSync('cabinet_html_cleaned.html', cleanedContent);
    
    console.log(`\n‚úÖ HTML –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${lines.length} —Å—Ç—Ä–æ–∫`);
    console.log(`   ‚Ä¢ –û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${cleanedLines.length} —Å—Ç—Ä–æ–∫`);
    console.log(`   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ HTML —Å—Ç—Ä–æ–∫: ${removedLinesCount}`);
    console.log(`\nüíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: cabinet_html_cleaned.html`);
    
} catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
}