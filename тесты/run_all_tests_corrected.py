"""
–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ GENESIS.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç.
"""
from __future__ import annotations

import argparse
import json
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, TypedDict


class TestSuiteResult(TypedDict):
    name: str
    status: str
    exit_code: int
    output: str
    execution_time: float


class MasterReport(TypedDict):
    url: str
    timestamp: str
    total_execution_time: float
    test_suites: List[TestSuiteResult]
    summary: Dict[str, Any]
    status: str


def run_test_suite(test_file: str, url: str, headless: int, timeout: int = 30000) -> TestSuiteResult:
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    print(f"üîÑ –ó–∞–ø—É—Å–∫ {test_file}...")
    
    start_time = time.time()
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            sys.executable,
            test_file,
            "--url", url,
            "--headless", str(headless),
            "--timeout", str(timeout)
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=timeout // 1000 + 60,  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö + –∑–∞–ø–∞—Å
            cwd=Path(__file__).parent.parent
        )
        
        execution_time = time.time() - start_time
        
        status = "PASS" if result.returncode == 0 else "FAIL"
        
        return TestSuiteResult(
            name=Path(test_file).stem,
            status=status,
            exit_code=result.returncode,
            output=result.stdout + result.stderr,
            execution_time=execution_time
        )
        
    except subprocess.TimeoutExpired:
        execution_time = time.time() - start_time
        return TestSuiteResult(
            name=Path(test_file).stem,
            status="TIMEOUT",
            exit_code=-1,
            output="Test timed out",
            execution_time=execution_time
        )
    except Exception as e:
        execution_time = time.time() - start_time
        return TestSuiteResult(
            name=Path(test_file).stem,
            status="ERROR",
            exit_code=-1,
            output=f"Error running test: {str(e)}",
            execution_time=execution_time
        )


def run_all_tests(url: str, headless: int = 1, timeout: int = 30000) -> MasterReport:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤"""
    start_time = time.time()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    test_files = [
        "—Ç–µ—Å—Ç—ã/e2e/test_landing_chrome.py",
        "—Ç–µ—Å—Ç—ã/e2e/test_full_landing_fixed.py", 
        "—Ç–µ—Å—Ç—ã/e2e/test_functional_fixed.py",
        "—Ç–µ—Å—Ç—ã/e2e/test_console_monitor.py",
        "—Ç–µ—Å—Ç—ã/performance/test_performance_fixed.py"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    existing_tests: List[str] = []
    for test_file in test_files:
        test_path = Path(__file__).parent.parent / test_file
        if test_path.exists():
            existing_tests.append(str(test_path))
        else:
            print(f"‚ö†Ô∏è  –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {len(existing_tests)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤...")
    print(f"üìç URL: {url}")
    print(f"üëÅÔ∏è  Headless: {'–î–∞' if headless else '–ù–µ—Ç'}")
    print("-" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    test_results: List[TestSuiteResult] = []
    
    for test_file in existing_tests:
        result = run_test_suite(test_file, url, headless, timeout)
        test_results.append(result)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status_emoji = "‚úÖ" if result["status"] == "PASS" else "‚ùå" if result["status"] == "FAIL" else "‚è∞"
        print(f"{status_emoji} {result['name']}: {result['status']} ({result['execution_time']:.1f}s)")
    
    total_time = time.time() - start_time
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    passed = len([r for r in test_results if r["status"] == "PASS"])
    failed = len([r for r in test_results if r["status"] == "FAIL"])
    errors = len([r for r in test_results if r["status"] == "ERROR"])
    timeouts = len([r for r in test_results if r["status"] == "TIMEOUT"])
    
    overall_status = "PASS" if passed == len(test_results) else "FAIL"
    
    summary: Dict[str, Any] = {
        "total_suites": len(test_results),
        "passed": passed,
        "failed": failed,
        "errors": errors,
        "timeouts": timeouts,
        "pass_rate": (passed / len(test_results) * 100) if test_results else 0
    }
    
    return MasterReport(
        url=url,
        timestamp=timestamp,
        total_execution_time=total_time,
        test_suites=test_results,
        summary=summary,
        status=overall_status
    )


def save_report(report: MasterReport) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    artifacts_dir = Path("—Ç–µ—Å—Ç—ã/_artifacts")
    artifacts_dir.mkdir(parents=True, exist_ok=True)
    
    report_file = artifacts_dir / f"master_test_report_{report['timestamp']}.json"
    
    try:
        report_file.write_text(
            json.dumps(report, ensure_ascii=False, indent=2),
            encoding="utf-8"
        )
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


def print_summary(report: MasterReport) -> None:
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    summary = report["summary"]
    print(f"üåê URL: {report['url']}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {report['total_execution_time']:.1f} —Å–µ–∫")
    print(f"üìà –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å: {summary['pass_rate']:.1f}%")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed']}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed']}")
    print(f"üí• –û—à–∏–±–∫–∏: {summary['errors']}")
    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç—ã: {summary['timeouts']}")
    
    print(f"\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {report['status']}")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
    print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ—Å—Ç–∞–º:")
    for suite in report["test_suites"]:
        status_emoji = "‚úÖ" if suite["status"] == "PASS" else "‚ùå" if suite["status"] == "FAIL" else "‚ö†Ô∏è "
        print(f"  {status_emoji} {suite['name']}: {suite['status']} ({suite['execution_time']:.1f}s)")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ GENESIS")
    parser.add_argument("--url", default=os.environ.get("GENESIS_SITE_URL", "https://crypto-processing.net/"))
    parser.add_argument("--headless", type=int, default=int(os.environ.get("HEADLESS", "1")))
    parser.add_argument("--timeout", type=int, default=30000)
    parser.add_argument("--save-report", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –æ—Ç—á–µ—Ç")
    args = parser.parse_args()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        report = run_all_tests(args.url, args.headless, args.timeout)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print_summary(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.save_report:
            save_report(report)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        exit_code = 0 if report["status"] == "PASS" else 1
        raise SystemExit(exit_code)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        raise SystemExit(130)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise SystemExit(1)
