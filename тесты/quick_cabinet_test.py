#!/usr/bin/env python3
"""
GENESIS Modular Cabinet - Quick Test with MCP
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import asyncio
from typing import List, Tuple
from playwright.async_api import async_playwright

async def test_modular_cabinet_quick():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ú–û–î–£–õ–¨–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê GENESIS")
    print("=" * 60)
    
    try:
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            browser = await p.chromium.launch(headless=False, slow_mo=1000)
            page = await browser.new_page()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            print("üåê –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥—É–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
            await page.goto("http://127.0.0.1:5502/app.html", wait_until="domcontentloaded")
            await page.wait_for_timeout(3000)
            
            # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            print("üîß –ò—â—É —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            test_btn = page.locator("#test-auth-button")
            
            if await test_btn.count() > 0:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –ö–ª–∏–∫–∞—é...")
                await test_btn.click()
                await page.wait_for_timeout(2000)
            else:
                print("‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É—é –æ–±—ã—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                address_input = page.locator("#wallet-address")
                if await address_input.count() > 0:
                    await address_input.fill("0x1234567890123456789012345678901234567890")
                    auth_btn = page.locator("#auth-button")
                    await auth_btn.click()
                    await page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—á–µ–∑ –ª–∏ overlay
            print("üîç –ü—Ä–æ–≤–µ—Ä—è—é auth-screen-overlay...")
            overlay = page.locator(".auth-screen-overlay")
            overlay_count = await overlay.count()
            
            if overlay_count == 0:
                print("‚úÖ Auth overlay —Å–∫—Ä—ã—Ç!")
            else:
                print(f"‚ùå Auth overlay –≤—Å—ë –µ—â—ë –≤–∏–¥–µ–Ω (count: {overlay_count})")
                # –ü—Ä–æ–±—É–µ–º —Å–∫—Ä—ã—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                await page.evaluate("document.querySelector('.auth-module-container').style.display = 'none'")
                print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–ª auth container")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–æ–¥—É–ª—è–º
            modules_to_test: List[Tuple[str, str]] = [
                ("/deposits", "–î–µ–ø–æ–∑–∏—Ç—ã"),
                ("/portfolio", "–ü–æ—Ä—Ç—Ñ–µ–ª—å"), 
                ("/bonuses", "–ë–æ–Ω—É—Å—ã")
            ]
            
            results: List[Tuple[str, str]] = []
            
            for route, name in modules_to_test:
                print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥—É–ª—å: {name} ({route})")
                
                try:
                    # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    nav_link = page.locator(f"[data-route='{route}']").first
                    
                    if await nav_link.count() > 0:
                        print(f"  üìç –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è {name}")
                        await nav_link.click()
                        await page.wait_for_timeout(2000)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ –º–æ–¥—É–ª—å
                        content = await page.inner_text("main")
                        if route.replace("/", "") in content.lower() or name.lower() in content.lower():
                            print(f"  ‚úÖ –ú–æ–¥—É–ª—å {name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                            results.append((name, "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"))
                        else:
                            print(f"  ‚ö†Ô∏è –ú–æ–¥—É–ª—å {name} –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ—è—Å–µ–Ω")
                            results.append((name, "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ"))
                    else:
                        print(f"  ‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        results.append((name, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"))
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {name}: {e}")
                    results.append((name, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}"))
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "=" * 60)
            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê:")
            print("=" * 60)
            
            for name, status in results:
                print(f"{status:15} | {name}")
            
            working = len([r for r in results if "‚úÖ" in r[1]])
            total = len(results)
            
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {working}/{total} –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            if working == total:
                print("üéâ –í–°–ï –ú–û–î–£–õ–ò –†–ê–ë–û–¢–ê–Æ–¢!")
            elif working > 0:
                print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            else:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ - –∫–∞–±–∏–Ω–µ—Ç –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            
            await browser.close()
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

if __name__ == "__main__":
    asyncio.run(test_modular_cabinet_quick())
