#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ GENESIS app.html
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ data-route –∞—Ç—Ä–∏–±—É—Ç–∞–º
"""

import sys
from playwright.sync_api import sync_playwright, ConsoleMessage
from typing import List, Dict, Any

def test_modular_version() -> bool:
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ GENESIS...")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False, devtools=True)
        context = browser.new_context()
        page = context.new_page()
        
        # –°–ª—É—à–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        def console_handler(msg: ConsoleMessage) -> None:
            print(f"üñ•Ô∏è CONSOLE [{msg.type.upper()}]: {msg.text}")
        
        page.on('console', console_handler)
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            url = 'http://127.0.0.1:5502/app.html'
            print(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫: {url}")
            page.goto(url)
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            page.wait_for_timeout(5000)
            print("‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            nav_exists = page.locator('#app-navigation').count() > 0
            print(f"üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {nav_exists}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å data-route
            nav_elements = page.locator('nav [data-route]')
            nav_count = nav_elements.count()
            print(f"üîó –ù–∞–π–¥–µ–Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {nav_count}")
            
            if nav_count > 0:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π
                test_routes: List[Dict[str, str]] = [
                    {'route': '/deposits', 'name': '–î–µ–ø–æ–∑–∏—Ç—ã'},
                    {'route': '/portfolio', 'name': '–ü–æ—Ä—Ç—Ñ–µ–ª—å'},
                    {'route': '/bonuses', 'name': '–ë–æ–Ω—É—Å—ã'},
                    {'route': '/settings', 'name': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}
                ]
                
                results: List[Dict[str, Any]] = []
                
                for test_route in test_routes:
                    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å: {test_route['name']}")
                    
                    try:
                        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        nav_selector = f'nav [data-route="{test_route["route"]}"]'
                        nav_element = page.locator(nav_selector)
                        
                        if nav_element.count() > 0:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                            element_text = nav_element.text_content()
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {element_text}")
                            
                            # –ö–ª–∏–∫–∞–µ–º
                            nav_element.click()
                            print(f"‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            
                            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
                            page.wait_for_timeout(3000)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                            app_container = page.locator('#app-container')
                            if app_container.count() > 0:
                                print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω")
                                
                                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
                                success = False
                                if test_route['route'] == '/deposits':
                                    deposits_header = page.locator('h1:text-matches(".*[–î–¥]–µ–ø–æ–∑–∏—Ç.*", "i")')
                                    deposits_module = page.locator('.deposits-module')
                                    if deposits_header.count() > 0 or deposits_module.count() > 0:
                                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω")
                                        success = True
                                
                                elif test_route['route'] == '/portfolio':
                                    portfolio_module = page.locator('.portfolio-module')
                                    portfolio_header = page.locator('h1:text-matches(".*[–ü–ø]–æ—Ä—Ç—Ñ–µ–ª—å.*", "i")')
                                    if portfolio_module.count() > 0 or portfolio_header.count() > 0:
                                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞–π–¥–µ–Ω")
                                        success = True
                                
                                elif test_route['route'] == '/bonuses':
                                    bonuses_module = page.locator('.bonuses-module')
                                    bonuses_header = page.locator('h1:text-matches(".*[–ë–±]–æ–Ω—É—Å.*", "i")')
                                    if bonuses_module.count() > 0 or bonuses_header.count() > 0:
                                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –±–æ–Ω—É—Å–æ–≤ –Ω–∞–π–¥–µ–Ω")
                                        success = True
                                
                                elif test_route['route'] == '/settings':
                                    settings_module = page.locator('.settings-module')
                                    settings_header = page.locator('h1:text-matches(".*[–ù–Ω]–∞—Å—Ç—Ä–æ–π–∫.*", "i")')
                                    if settings_module.count() > 0 or settings_header.count() > 0:
                                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–π–¥–µ–Ω")
                                        success = True
                                
                                if not success:
                                    print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                                    success = True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                                
                                results.append({
                                    'route': test_route['route'],
                                    'name': test_route['name'],
                                    'success': success
                                })
                            else:
                                print(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                results.append({
                                    'route': test_route['route'],
                                    'name': test_route['name'],
                                    'success': False
                                })
                        else:
                            print(f"‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            results.append({
                                'route': test_route['route'],
                                'name': test_route['name'],
                                'success': False
                            })
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {test_route['name']}: {e}")
                        results.append({
                            'route': test_route['route'],
                            'name': test_route['name'],
                            'success': False
                        })
                
                # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                successful = sum(1 for r in results if r['success'])
                total = len(results)
                
                for result in results:
                    status = "‚úÖ" if result['success'] else "‚ùå"
                    print(f"{status} {result['name']} ({result['route']})")
                
                print(f"\nüéØ –ò—Ç–æ–≥–æ: {successful}/{total} –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                if successful == total:
                    print("üéâ –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
                    return True
                elif successful > 0:
                    print("‚ö° –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
                    return True
                else:
                    print("üí• –ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return False
            else:
                print("‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            browser.close()

if __name__ == "__main__":
    success = test_modular_version()
    sys.exit(0 if success else 1)
