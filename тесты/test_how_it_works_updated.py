#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è "–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ" —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
"""

import sys
from playwright.sync_api import sync_playwright
from typing import Dict

def test_how_it_works_updated() -> bool:
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ'"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ'...")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False, devtools=False)
        context = browser.new_context()
        page = context.new_page()
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            url = 'http://127.0.0.1:5502/app.html'
            print(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫: {url}")
            page.goto(url)
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            page.wait_for_timeout(5000)
            print("‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥—É–ª—å "–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ" –Ω–∞–ø—Ä—è–º—É—é
            how_it_works_url = 'http://127.0.0.1:5502/app.html#/how-it-works'
            print(f"üéØ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–æ–¥—É–ª—é: {how_it_works_url}")
            page.goto(how_it_works_url)
            page.wait_for_timeout(3000)
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_element = page.locator('nav [data-route="/how-it-works"]')
            if nav_element.count() > 0:
                print("üîó –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–ª–∏–∫–∞–µ–º...")
                nav_element.click()
                page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥—É–ª—è
            elements_to_check: Dict[str, str] = {
                'module_container': '.how-it-works-module',
                'module_header': 'h1:has-text("–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ")',
                'tabs_nav': '.tabs-nav',
                'tab_overview': '[data-tab="overview"]',
                'tab_mev_bots': '[data-tab="mev-bots"]',
                'income_types': '.income-types',
                'passive_income': '.income-type.passive',
                'active_income': '.income-type.active',
                'mev_section': '.mev-section',
                'plex_section': '.plex-section',
                'requirements_section': '.requirements-section',
                'faq_list': '.faq-list'
            }
            
            results: Dict[str, bool] = {}
            
            for name, selector in elements_to_check.items():
                exists = page.locator(selector).count() > 0
                results[name] = exists
                status = "‚úÖ" if exists else "‚ùå"
                print(f"{status} {name}: {exists}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏
            tabs = ['overview', 'steps', 'mev-bots', 'architecture', 'multipliers', 'security', 'faq']
            tab_results: Dict[str, bool] = {}
            
            for tab in tabs:
                print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É: {tab}")
                
                try:
                    # –ö–ª–∏–∫–∞–µ–º –ø–æ –≤–∫–ª–∞–¥–∫–µ
                    tab_button = page.locator(f'[data-tab="{tab}"]')
                    if tab_button.count() > 0:
                        tab_button.click()
                        page.wait_for_timeout(1000)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ –≤–∏–¥–∏–º
                        tab_content = page.locator(f'#tab-{tab}')
                        is_visible = tab_content.count() > 0
                        tab_results[tab] = is_visible
                        
                        status = "‚úÖ" if is_visible else "‚ùå"
                        print(f"{status} –í–∫–ª–∞–¥–∫–∞ {tab}: {is_visible}")
                        
                        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        if tab == 'overview':
                            income_types = page.locator('.income-types').count() > 0
                            mev_info = page.locator('.mev-section').count() > 0
                            plex_info = page.locator('.plex-section').count() > 0
                            print(f"  üìä –¢–∏–ø—ã –¥–æ—Ö–æ–¥–æ–≤: {'‚úÖ' if income_types else '‚ùå'}")
                            print(f"  ü§ñ MEV –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {'‚úÖ' if mev_info else '‚ùå'}")
                            print(f"  ü™ô PLEX –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {'‚úÖ' if plex_info else '‚ùå'}")
                            
                        elif tab == 'mev-bots':
                            mev_workflow = page.locator('.mev-workflow').count() > 0
                            mev_stats = page.locator('.stats-grid').count() > 0
                            mev_transparency = page.locator('.mev-transparency').count() > 0
                            print(f"  üîÑ MEV workflow: {'‚úÖ' if mev_workflow else '‚ùå'}")
                            print(f"  üìä MEV —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'‚úÖ' if mev_stats else '‚ùå'}")
                            print(f"  üîç MEV –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {'‚úÖ' if mev_transparency else '‚ùå'}")
                            
                        elif tab == 'faq':
                            faq_items = page.locator('.faq-item').count()
                            print(f"  ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ FAQ: {faq_items}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                            new_questions = [
                                '–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ GENESIS 1.1',
                                '–∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ GENESIS 1.1',
                                'MEV-–±–æ—Ç—ã',
                                'PLEX ONE —Ç–æ–∫–µ–Ω'
                            ]
                            
                            for question in new_questions:
                                question_exists = page.locator(f'.faq-question:has-text("{question}")').count() > 0
                                print(f"    üìù –í–æ–ø—Ä–æ—Å '{question}': {'‚úÖ' if question_exists else '‚ùå'}")
                        
                    else:
                        print(f"‚ùå –ö–Ω–æ–ø–∫–∞ –≤–∫–ª–∞–¥–∫–∏ {tab} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        tab_results[tab] = False
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏ {tab}: {e}")
                    tab_results[tab] = False
            
            # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            
            successful_elements = sum(1 for result in results.values() if result)
            total_elements = len(results)
            print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {successful_elements}/{total_elements}")
            
            successful_tabs = sum(1 for result in tab_results.values() if result)
            total_tabs = len(tab_results)
            print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏: {successful_tabs}/{total_tabs}")
            
            overall_success = successful_elements >= total_elements * 0.8 and successful_tabs >= total_tabs * 0.8
            
            if overall_success:
                print("üéâ –ú–æ–¥—É–ª—å '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                print("üíé –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:")
                print("  - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MEV-–±–æ—Ç–∞—Ö")
                print("  - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞")
                print("  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PLEX ONE —Ç–æ–∫–µ–Ω–µ")
                print("  - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π FAQ")
                return True
            else:
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            browser.close()

if __name__ == "__main__":
    success = test_how_it_works_updated()
    sys.exit(0 if success else 1)
