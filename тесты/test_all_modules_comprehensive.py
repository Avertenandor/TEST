#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ GENESIS
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
"""

import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

class GenesisModulesComprehensiveTest:
    def __init__(self):
        self.setup_driver()
        self.test_results = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "modules_tested": [],
            "comparison_results": {},
            "console_errors": [],
            "missing_features": [],
            "working_features": [],
            "overall_score": 0
        }
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.modules_to_test = [
            ("dashboard", "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "üìä"),
            ("deposits", "–î–µ–ø–æ–∑–∏—Ç—ã", "üí∞"),
            ("portfolio", "–ü–æ—Ä—Ç—Ñ–µ–ª—å", "üíº"),
            ("transactions", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "üìã"),
            ("analytics", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìà"),
            ("bonuses", "–ë–æ–Ω—É—Å—ã", "üéÅ"),
            ("gifts", "–ü–æ–¥–∞—Ä–∫–∏", "üéà"),
            ("referrals", "–†–µ—Ñ–µ—Ä–∞–ª—ã", "üë•"),
            ("multipliers", "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏", "‚ö°"),
            ("mining-rent", "–ê—Ä–µ–Ω–¥–∞ –º–∞–π–Ω–∏–Ω–≥–∞", "‚õèÔ∏è"),
            ("device", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "üîß"),
            ("plex-coin", "PLEX Coin", "ü™ô"),
            ("experience", "–û–ø—ã—Ç", "üåü"),
            ("rank", "–†–∞–Ω–≥", "üèÜ"),
            ("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è"),
            ("terminal", "–¢–µ—Ä–º–∏–Ω–∞–ª", "üíª"),
            ("platform-access", "–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", "üîê"),
            ("how-it-works", "–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ", "üõ†Ô∏è")
        ]

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        options = Options()
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument('--disable-web-security')
        options.add_argument('--allow-running-insecure-content')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-extensions')
        options.add_argument('--window-size=1920,1080')
        
        self.driver = webdriver.Chrome(options=options)
        self.wait = WebDriverWait(self.driver, 15)
        
        # –°–∫—Ä—ã–≤–∞–µ–º webdriver
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

    def get_console_logs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏"""
        try:
            logs = self.driver.get_log('browser')
            return [log for log in logs if log['level'] in ['SEVERE', 'WARNING']]
        except:
            return []

    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
        print("üîê –ü—Ä–æ–≤–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        self.driver.get("http://127.0.0.1:5502/app.html")
        time.sleep(3)
        
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            wallet_input = self.wait.until(
                EC.presence_of_element_located((By.ID, "wallet_input"))
            )
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å
            test_address = "0x1234567890123456789012345678901234567890"
            wallet_input.clear()
            wallet_input.send_keys(test_address)
            time.sleep(1)
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_button = self.driver.find_element(By.ID, "auth_button")
            auth_button.click()
            
            # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.wait.until(
                EC.presence_of_element_located((By.ID, "main_content"))
            )
            
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def test_module_navigation(self, module_path, module_name, icon):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–æ–¥—É–ª—é"""
        print(f"\nüß≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –º–æ–¥—É–ª—é: {icon} {module_name}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
        module_url = f"http://127.0.0.1:5502/app.html#{module_path}"
        self.driver.get(module_url)
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏
        console_errors = self.get_console_logs()
        if console_errors:
            critical_errors = [err for err in console_errors if err['level'] == 'SEVERE']
            if critical_errors:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: {len(critical_errors)}")
                for error in critical_errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    print(f"   - {error['message']}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        try:
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥—É–ª—è
            main_content = self.driver.find_element(By.ID, "main_content")
            if main_content.is_displayed():
                print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è {module_name} –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                return False
        except NoSuchElementException:
            print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥—É–ª—è {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

    def analyze_module_content(self, module_path, module_name):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥—É–ª—è"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥—É–ª—è: {module_name}")
        
        content_analysis = {
            "has_title": False,
            "has_navigation": False,
            "has_data_display": False,
            "has_interactive_elements": False,
            "error_count": 0,
            "missing_elements": []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            titles = self.driver.find_elements(By.CSS_SELECTOR, "h1, h2, .page-title, .module-title")
            if titles:
                content_analysis["has_title"] = True
                print(f"  ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω: {titles[0].text}")
            else:
                content_analysis["missing_elements"].append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            nav_elements = self.driver.find_elements(By.CSS_SELECTOR, "nav, .navigation, .nav-menu, .sidebar")
            if nav_elements:
                content_analysis["has_navigation"] = True
                print(f"  ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
            else:
                content_analysis["missing_elements"].append("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data_elements = self.driver.find_elements(By.CSS_SELECTOR, 
                ".data-card, .info-card, .stat-card, .balance-card, table, .chart, .graph")
            if data_elements:
                content_analysis["has_data_display"] = True
                print(f"  ‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã: {len(data_elements)}")
            else:
                content_analysis["missing_elements"].append("–≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            interactive_elements = self.driver.find_elements(By.CSS_SELECTOR, 
                "button, input, select, .btn, .interactive, .clickable")
            if interactive_elements:
                content_analysis["has_interactive_elements"] = True
                print(f"  ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {len(interactive_elements)}")
            else:
                content_analysis["missing_elements"].append("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
            console_errors = self.get_console_logs()
            content_analysis["error_count"] = len([err for err in console_errors if err['level'] == 'SEVERE'])
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
            content_analysis["error_count"] += 1
        
        return content_analysis

    def compare_with_cabinet(self, module_path, module_name):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ä–∞–∑–¥–µ–ª–æ–º –≤ cabinet.html"""
        print(f"üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–∞–∑–¥–µ–ª–æ–º –≤ cabinet.html: {module_name}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ cabinet.html –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        cabinet_url = "http://127.0.0.1:5502/cabinet.html"
        original_url = self.driver.current_url
        
        comparison_result = {
            "cabinet_accessible": False,
            "similar_content": False,
            "feature_parity": 0,  # –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
            "notes": []
        }
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            module_text = self.driver.find_element(By.TAG_NAME, "body").text
            module_elements = len(self.driver.find_elements(By.CSS_SELECTOR, "*"))
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ cabinet.html
            self.driver.get(cabinet_url)
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cabinet.html
            try:
                cabinet_body = self.driver.find_element(By.TAG_NAME, "body")
                if cabinet_body:
                    comparison_result["cabinet_accessible"] = True
                    cabinet_text = cabinet_body.text
                    cabinet_elements = len(self.driver.find_elements(By.CSS_SELECTOR, "*"))
                    
                    # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if cabinet_elements > 0:
                        similarity = min(module_elements / cabinet_elements * 100, 100)
                        comparison_result["feature_parity"] = round(similarity, 1)
                        
                        if similarity > 70:
                            comparison_result["similar_content"] = True
                            comparison_result["notes"].append("–í—ã—Å–æ–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
                        elif similarity > 40:
                            comparison_result["notes"].append("–°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
                        else:
                            comparison_result["notes"].append("–ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
                    
            except Exception as e:
                comparison_result["notes"].append(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ cabinet.html: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            self.driver.get(original_url)
            time.sleep(2)
            
        except Exception as e:
            comparison_result["notes"].append(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        
        return comparison_result

    def test_all_modules(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π GENESIS")
        print("=" * 70)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            return
        
        total_modules = len(self.modules_to_test)
        successful_tests = 0
        
        for i, (module_path, module_name, icon) in enumerate(self.modules_to_test, 1):
            print(f"\nüìã –ú–æ–¥—É–ª—å {i}/{total_modules}: {icon} {module_name}")
            print("-" * 50)
            
            module_result = {
                "path": module_path,
                "name": module_name,
                "icon": icon,
                "navigation_success": False,
                "content_analysis": {},
                "cabinet_comparison": {},
                "overall_success": False
            }
            
            # –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if self.test_module_navigation(module_path, module_name, icon):
                module_result["navigation_success"] = True
                
                # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                module_result["content_analysis"] = self.analyze_module_content(module_path, module_name)
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å cabinet.html
                module_result["cabinet_comparison"] = self.compare_with_cabinet(module_path, module_name)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
                content_score = sum([
                    module_result["content_analysis"].get("has_title", False),
                    module_result["content_analysis"].get("has_navigation", False),
                    module_result["content_analysis"].get("has_data_display", False),
                    module_result["content_analysis"].get("has_interactive_elements", False),
                    module_result["content_analysis"].get("error_count", 10) == 0
                ])
                
                if content_score >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 5 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                    module_result["overall_success"] = True
                    successful_tests += 1
                    self.test_results["working_features"].append(f"{icon} {module_name}")
                else:
                    self.test_results["missing_features"].extend(
                        module_result["content_analysis"].get("missing_elements", [])
                    )
            
            self.test_results["modules_tested"].append(module_result)
            
            # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –º–æ–¥—É–ª—é
            if module_result["overall_success"]:
                print(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå –ú–æ–¥—É–ª—å {module_name} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.test_results["overall_score"] = round((successful_tests / total_modules) * 100, 1)
        
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        print(f"üéØ –û–±—â–∏–π —É—Å–ø–µ—Ö: {successful_tests}/{total_modules} ({self.test_results['overall_score']}%)")
        print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π: {successful_tests}")
        print(f"‚ùå –¢—Ä–µ–±—É—é—â–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {total_modules - successful_tests}")
        
        if self.test_results["working_features"]:
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã:")
            for feature in self.test_results["working_features"]:
                print(f"   - {feature}")
        
        if self.test_results["missing_features"]:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
            unique_missing = list(set(self.test_results["missing_features"]))
            for missing in unique_missing[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                print(f"   - {missing}")

    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        filename = "comprehensive_modules_test_results.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'driver'):
            self.driver.quit()

def main():
    tester = GenesisModulesComprehensiveTest()
    try:
        tester.test_all_modules()
        tester.save_results()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        tester.cleanup()

if __name__ == "__main__":
    main()
