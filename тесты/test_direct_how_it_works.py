#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é "–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ"
"""

import sys
from playwright.sync_api import sync_playwright, ConsoleMessage
from typing import List

def test_direct_how_it_works_access() -> bool:
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥—É–ª—é '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ'...")
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False, devtools=True)
        context = browser.new_context()
        page = context.new_page()
        
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å —Ö–µ—à-—Ä–æ—É—Ç–∏–Ω–≥–æ–º
            correct_url = 'http://127.0.0.1:5502/app.html#/how-it-works'
            print(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É URL: {correct_url}")
            
            page.goto(correct_url)
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            print("‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            page.wait_for_timeout(5000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
            console_messages: List[str] = []
            def handle_console(msg: ConsoleMessage) -> None:
                console_messages.append(f"{msg.type}: {msg.text}")
                print(f"üñ•Ô∏è CONSOLE [{msg.type.upper()}]: {msg.text}")
            
            page.on('console', handle_console)
            
            # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
            page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ –º–æ–¥—É–ª—å
            module_container = page.locator('.how-it-works-module')
            module_exists = module_container.count() > 0
            
            print(f"üì¶ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {'‚úÖ' if module_exists else '‚ùå'}")
            
            if module_exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                elements_check = {
                    'header': 'h1:has-text("–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ")',
                    'tabs': '.tabs-nav',
                    'overview_tab': '[data-tab="overview"]',
                    'mev_tab': '[data-tab="mev-bots"]',
                    'content': '.tabs-content'
                }
                
                for name, selector in elements_check.items():
                    exists = page.locator(selector).count() > 0
                    status = "‚úÖ" if exists else "‚ùå"
                    print(f"{status} {name}: {exists}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                new_content_check = {
                    'income_types': '.income-types',
                    'mev_section': '.mev-section', 
                    'plex_section': '.plex-section',
                    'requirements': '.requirements-section'
                }
                
                print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
                for name, selector in new_content_check.items():
                    exists = page.locator(selector).count() > 0
                    status = "‚úÖ" if exists else "‚ùå"
                    print(f"{status} {name}: {exists}")
                    
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É MEV-–±–æ—Ç—ã
                print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É MEV-–±–æ—Ç—ã:")
                mev_tab = page.locator('[data-tab="mev-bots"]')
                if mev_tab.count() > 0:
                    mev_tab.click()
                    page.wait_for_timeout(1000)
                    
                    mev_content = page.locator('#tab-mev-bots')
                    mev_visible = mev_content.count() > 0
                    print(f"‚úÖ MEV –≤–∫–ª–∞–¥–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è: {mev_visible}")
                    
                    if mev_visible:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç MEV
                        mev_elements = {
                            'workflow': '.mev-workflow',
                            'stats': '.stats-grid',
                            'transparency': '.mev-transparency'
                        }
                        
                        for name, selector in mev_elements.items():
                            exists = page.locator(selector).count() > 0
                            print(f"  üìä {name}: {'‚úÖ' if exists else '‚ùå'}")
                else:
                    print("‚ùå MEV –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                return True
                
            else:
                print("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
                if console_messages:
                    print("\nüîç –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:")
                    for msg in console_messages:
                        print(f"  {msg}")
                
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            page.wait_for_timeout(5000)
            browser.close()

if __name__ == "__main__":
    success = test_direct_how_it_works_access()
    if success:
        print("\nüéâ –ú–æ–¥—É–ª—å '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª–µ–º")
    
    sys.exit(0 if success else 1)
