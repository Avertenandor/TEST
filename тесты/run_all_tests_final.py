"""
–ú–∞—Å—Ç–µ—Ä-–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ GENESIS —Å–∞–π—Ç–∞.
–ó–∞–ø—É—Å–∫–∞–µ—Ç:
- E2E —Ç–µ—Å—Ç—ã (landing, functional, console monitor)
- Unit —Ç–µ—Å—Ç—ã JS –º–æ–¥—É–ª–µ–π
- Performance —Ç–µ—Å—Ç—ã
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
"""
from __future__ import annotations

import argparse
import json
import os
import subprocess
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, TypedDict


class TestSuiteResult(TypedDict):
    name: str
    status: str
    exit_code: int
    output: str
    execution_time: float


class MasterTestReport(TypedDict):
    timestamp: str
    total_suites: int
    passed_suites: int
    failed_suites: int
    results: List[TestSuiteResult]
    status: str


def run_test_suite(name: str, description: str, file_path: str, url: str, timeout: int, headless: int) -> TestSuiteResult:
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π —Å—é–∏—Ç—ã"""
    print(f"\nüîç –ó–∞–ø—É—Å–∫ {name}: {description}")
    
    start_time = time.time()
    
    env = os.environ.copy()
    env["BROWSER_CHANNEL"] = "chrome"
    
    try:
        result = subprocess.run(
            ["python", file_path, "--url", url, "--timeout", str(timeout), "--headless", str(headless)],
            capture_output=True,
            text=True,
            timeout=timeout // 1000 + 60,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã + –∑–∞–ø–∞—Å
            env=env
        )
        
        execution_time = time.time() - start_time
        
        return {
            "name": name,
            "status": "PASS" if result.returncode == 0 else "FAIL",
            "exit_code": result.returncode,
            "output": result.stdout + result.stderr,
            "execution_time": execution_time
        }
        
    except subprocess.TimeoutExpired:
        execution_time = time.time() - start_time
        return {
            "name": name,
            "status": "FAIL",
            "exit_code": -1,
            "output": f"–¢–µ—Å—Ç {name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ {timeout//1000}s",
            "execution_time": execution_time
        }
    except Exception as e:
        execution_time = time.time() - start_time
        return {
            "name": name,
            "status": "FAIL", 
            "exit_code": -2,
            "output": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {str(e)}",
            "execution_time": execution_time
        }


def run_all_tests(url: str, timeout: int = 30000, headless: int = 1, save_report: bool = False) -> MasterTestReport:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—é–∏—Ç"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {url}")
    print(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: timeout={timeout}ms, headless={bool(headless)}")
    
    test_suites = [
        {
            "name": "E2E_Landing_Chrome",
            "description": "E2E —Ç–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Chrome", 
            "file_path": "—Ç–µ—Å—Ç—ã/e2e/test_landing_chrome.py"
        },
        {
            "name": "E2E_Full_Landing",
            "description": "–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            "file_path": "—Ç–µ—Å—Ç—ã/e2e/test_full_landing.py"
        },
        {
            "name": "E2E_Functional",
            "description": "–¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–±–∏–Ω–µ—Ç–∞",
            "file_path": "—Ç–µ—Å—Ç—ã/e2e/test_functional.py"
        },
        {
            "name": "E2E_Console_Monitor", 
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞",
            "file_path": "—Ç–µ—Å—Ç—ã/e2e/test_console_monitor.py"
        },
        {
            "name": "Unit_JS_Modules",
            "description": "Unit —Ç–µ—Å—Ç—ã JS –º–æ–¥—É–ª–µ–π",
            "file_path": "—Ç–µ—Å—Ç—ã/unit/test_js_modules.py"
        },
        {
            "name": "Performance",
            "description": "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "file_path": "—Ç–µ—Å—Ç—ã/performance/test_performance.py"
        }
    ]
    
    results: List[TestSuiteResult] = []
    
    for suite in test_suites:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not Path(suite["file_path"]).exists():
            results.append({
                "name": suite["name"],
                "status": "FAIL",
                "exit_code": -3,
                "output": f"–§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {suite['file_path']}",
                "execution_time": 0.0
            })
            continue
            
        result = run_test_suite(
            suite["name"],
            suite["description"], 
            suite["file_path"],
            url,
            timeout,
            headless
        )
        results.append(result)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status_emoji = "‚úÖ" if result["status"] == "PASS" else "‚ùå"
        print(f"{status_emoji} {suite['name']}: {result['status']} ({result['execution_time']:.1f}s)")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed = sum(1 for r in results if r["status"] == "PASS")
    total = len(results)

    report: MasterTestReport = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "total_suites": total,
        "passed_suites": passed,
        "failed_suites": total - passed,
        "results": results,
        "status": "PASS" if passed == total else "FAIL"
    }

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –ò–¢–û–ì–ò:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"   –ü—Ä–æ—à–ª–∏: {passed}")
    print(f"   –£–ø–∞–ª–∏: {total - passed}")
    print(f"   –°—Ç–∞—Ç—É—Å: {'üü¢ PASS' if report['status'] == 'PASS' else 'üî¥ FAIL'}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    if save_report:
        artifacts_dir = Path("—Ç–µ—Å—Ç—ã/_reports")
        artifacts_dir.mkdir(parents=True, exist_ok=True)
        report_path = artifacts_dir / f"master_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            report_path.write_text(json.dumps(report, ensure_ascii=False, indent=2), encoding="utf-8")
            print(f"üíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")

    return report


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ GENESIS —Å–∞–π—Ç–∞")
    parser.add_argument("--url", default=os.environ.get("GENESIS_SITE_URL", "https://crypto-processing.net/"))
    parser.add_argument("--timeout", type=int, default=30000)
    parser.add_argument("--headless", type=int, default=int(os.environ.get("HEADLESS", "1")))
    parser.add_argument("--save-report", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ JSON")
    args = parser.parse_args()
    
    result = run_all_tests(args.url, args.timeout, args.headless, args.save_report)
    raise SystemExit(0 if result["status"] == "PASS" else 1)