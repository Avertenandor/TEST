#!/usr/bin/env python3
"""
üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –†–ê–ó–î–ï–õ–û–í –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê GENESIS
–°–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
"""

import sys
import json
import time
from pathlib import Path
from playwright.sync_api import sync_playwright, ConsoleMessage
from typing import Dict, List, Any

def create_detailed_test_report() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    
    print("üîç –ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–£–Æ –ü–†–û–í–ï–†–ö–£ –í–°–ï–• –†–ê–ó–î–ï–õ–û–í –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê GENESIS...")
    print("üìã –°–ª–µ–¥—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: MCP + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π")
    
    # –†–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    cabinet_modules: Dict[str, Dict[str, Any]] = {
        'dashboard': {
            'route': '/',
            'name': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'expected_elements': [
                'h1:has-text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")',
                '.balance-card',
                '.portfolio-overview',
                '.recent-transactions',
                '.quick-actions'
            ],
            'key_content': ['–±–∞–ª–∞–Ω—Å', '–ø–æ—Ä—Ç—Ñ–µ–ª—å', '–¥–µ–ø–æ–∑–∏—Ç—ã', '–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'],
            'monolith_sections': ['balance_overview', 'portfolio_stats', 'deposits_summary']
        },
        'deposits': {
            'route': '/deposits',
            'name': '–î–µ–ø–æ–∑–∏—Ç—ã',
            'expected_elements': [
                'h1:has-text("–î–µ–ø–æ–∑–∏—Ç—ã")',
                '.deposit-plans',
                '.plan-starter',
                '.plan-ultimate',
                '.create-deposit-btn'
            ],
            'key_content': ['STARTER', 'ULTIMATE', 'PROFESSIONAL', '—Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç'],
            'monolith_sections': ['investment_plans', 'deposit_creation', 'active_deposits']
        },
        'portfolio': {
            'route': '/portfolio',
            'name': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
            'expected_elements': [
                'h1:has-text("–ü–æ—Ä—Ç—Ñ–µ–ª—å")',
                '.portfolio-stats',
                '.assets-breakdown',
                '.performance-chart',
                '.holdings-table'
            ],
            'key_content': ['–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å', '–∞–∫—Ç–∏–≤—ã', '–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '—Ö–æ–ª–¥–∏–Ω–≥–∏'],
            'monolith_sections': ['portfolio_overview', 'asset_allocation', 'performance_metrics']
        },
        'bonuses': {
            'route': '/bonuses',
            'name': '–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
            'expected_elements': [
                'h1:has-text("–ë–æ–Ω—É—Å—ã")',
                '.bonus-program',
                '.multipliers',
                '.active-bonuses',
                '.bonus-history'
            ],
            'key_content': ['–±–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '–º–Ω–æ–∂–∏—Ç–µ–ª–∏', '–ë–û–ù–£–°–ù–ê–Ø 1000', '–±—É—Å—Ç–µ—Ä'],
            'monolith_sections': ['bonus_system', 'multiplier_effects', 'bonus_history']
        },
        'referrals': {
            'route': '/referrals',
            'name': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
            'expected_elements': [
                'h1:has-text("–†–µ—Ñ–µ—Ä–∞–ª—ã")',
                '.referral-link',
                '.referral-stats',
                '.commission-table',
                '.referral-levels'
            ],
            'key_content': ['—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', '–∫–æ–º–∏—Å—Å–∏—è', '—É—Ä–æ–≤–Ω–∏'],
            'monolith_sections': ['referral_system', 'commission_structure', 'referral_tree']
        },
        'gifts': {
            'route': '/gifts',
            'name': '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'expected_elements': [
                'h1:has-text("–ü–æ–¥–∞—Ä–∫–∏")',
                '.gift-system',
                '.welcome-bonus',
                '.upcoming-gifts',
                '.gift-history'
            ],
            'key_content': ['–ø–æ–¥–∞—Ä–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å', '–ø–æ–¥–∞—Ä–∫–∏', '–ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç'],
            'monolith_sections': ['gift_mechanics', 'welcome_system', 'gift_calendar']
        },
        'settings': {
            'route': '/settings',
            'name': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            'expected_elements': [
                'h1:has-text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")',
                '.profile-settings',
                '.security-settings',
                '.notification-settings',
                '.theme-selector'
            ],
            'key_content': ['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–ø—Ä–æ—Ñ–∏–ª—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '—Ç–µ–º–∞'],
            'monolith_sections': ['user_profile', 'security_settings', 'preferences']
        },
        'how-it-works': {
            'route': '/how-it-works',
            'name': '–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ',
            'expected_elements': [
                'h1:has-text("–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ")',
                '.tab-navigation',
                '.content-sections',
                '.overview-tab',
                '.mev-bots-tab'
            ],
            'key_content': ['–∫–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ', 'MEV-–±–æ—Ç—ã', '–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥', '–∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥'],
            'monolith_sections': ['how_it_works_content', 'mev_explanation', 'income_types']
        }
    }
    
    results: Dict[str, Any] = {
        'timestamp': time.time(),
        'test_type': 'comprehensive_cabinet_sections_check',
        'modules_tested': [],
        'detailed_results': {},
        'comparison_with_monolith': {},
        'overall_statistics': {},
        'errors_and_issues': [],
        'recommendations': []
    }
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False, devtools=True)
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        page = context.new_page()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        console_logs: List[Dict[str, str]] = []
        errors: List[Dict[str, str]] = []
        
        def handle_console(msg: ConsoleMessage) -> None:
            log_entry: Dict[str, Any] = {
                'type': str(msg.type),
                'text': str(msg.text),
                'timestamp': time.time()
            }
            console_logs.append(log_entry)
            print(f"üñ•Ô∏è CONSOLE [{msg.type.upper()}]: {msg.text}")
        
        def handle_error(error: Exception) -> None:
            error_entry: Dict[str, Any] = {
                'message': str(error),
                'timestamp': time.time()
            }
            errors.append(error_entry)
            print(f"‚ùå PAGE ERROR: {error}")
        
        page.on('console', handle_console)
        page.on('pageerror', handle_error)
        
        try:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            print("\nüéØ –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
            modular_url = 'http://127.0.0.1:5502/app.html'
            print(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {modular_url}")
            
            page.goto(modular_url, wait_until='domcontentloaded', timeout=30000)
            page.wait_for_timeout(5000)  # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º)
            print("\nüîê –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            auth_result = test_authentication(page)
            results['authentication'] = auth_result
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            print("\nüìã –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞")
            for module_key, module_config in cabinet_modules.items():
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–¥–µ–ª: {module_config['name']} ({module_config['route']})")
                
                module_result = test_cabinet_module(page, module_key, module_config)
                results['detailed_results'][module_key] = module_result
                results['modules_tested'].append(module_key)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                page.wait_for_timeout(2000)
            
            # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
            print("\nüîç –≠–¢–ê–ü 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π")
            monolith_comparison = compare_with_monolith(results['detailed_results'])
            results['comparison_with_monolith'] = monolith_comparison
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("\nüìä –≠–¢–ê–ü 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            statistics = generate_statistics(results['detailed_results'])
            results['overall_statistics'] = statistics
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            results['critical_error'] = str(e)
        
        finally:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
            results['console_logs'] = console_logs[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
            results['errors'] = errors
            
            browser.close()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_test_results(results)
    generate_detailed_report(results)
    
    return results

def test_authentication(page: Any) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"""
    print("üîê –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    auth_result: Dict[str, Any] = {
        'required': False,
        'form_present': False,
        'test_mode_active': False,
        'bypass_successful': False,
        'status': 'unknown'
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_form = page.locator('.auth-form, .login-form, #auth-modal').first
        if auth_form.count() > 0:
            auth_result['form_present'] = True
            auth_result['required'] = True
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            test_login = page.locator('input[type="email"], input[name="email"]').first
            test_password = page.locator('input[type="password"]').first
            
            if test_login.count() > 0 and test_password.count() > 0:
                test_login.fill('test@genesis.local')
                test_password.fill('test123')
                
                submit_btn = page.locator('button[type="submit"], .auth-submit').first
                if submit_btn.count() > 0:
                    submit_btn.click()
                    page.wait_for_timeout(3000)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if page.locator('.dashboard, .cabinet-main, #app-container').count() > 0:
                        auth_result['bypass_successful'] = True
                        auth_result['test_mode_active'] = True
                        auth_result['status'] = 'success'
                        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —É—Å–ø–µ—à–Ω–∞")
                    else:
                        auth_result['status'] = 'failed'
                        print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        else:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            auth_result['status'] = 'not_required'
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    except Exception as e:
        auth_result['error'] = str(e)
        auth_result['status'] = 'error'
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    
    return auth_result

def test_cabinet_module(page: Any, module_key: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∫–∞–±–∏–Ω–µ—Ç–∞"""
    
    result: Dict[str, Any] = {
        'module': module_key,
        'name': config['name'],
        'route': config['route'],
        'navigation_success': False,
        'elements_found': {},
        'content_analysis': {},
        'functionality_check': {},
        'completeness_score': 0,
        'issues': []
    }
    
    try:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–æ–¥—É–ª—é
        if config['route'] != '/':
            nav_link = page.locator(f'[data-route="{config["route"]}"], a[href*="{config["route"]}"]').first
            if nav_link.count() > 0:
                nav_link.click()
                page.wait_for_timeout(3000)
                result['navigation_success'] = True
                print(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ {config['name']} —É—Å–ø–µ—à–Ω–∞")
            else:
                # –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ URL
                page.evaluate(f'window.router && window.router.navigate("{config["route"]}")')
                page.wait_for_timeout(3000)
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ {config['name']}")
        else:
            result['navigation_success'] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è {config['name']}")
        elements_found: int = 0
        for element_selector in config['expected_elements']:
            element = page.locator(element_selector)
            found: bool = bool(element.count() > 0)
            result['elements_found'][element_selector] = found
            if found:
                elements_found += 1
        
        result['elements_found_count'] = elements_found
        result['elements_expected_count'] = len(config['expected_elements'])
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        print(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {config['name']}")
        page_content: str = str(page.inner_text('main, .content, #app-container')).lower()
        content_matches: int = 0
        for key_content in config['key_content']:
            found: bool = key_content.lower() in page_content
            result['content_analysis'][key_content] = found
            if found:
                content_matches += 1
        
        result['content_matches_count'] = content_matches
        result['content_expected_count'] = len(config['key_content'])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        functionality_result: Dict[str, Any] = test_module_functionality(page, module_key, config)
        result['functionality_check'] = functionality_result
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø–æ–ª–Ω–æ—Ç—ã
        elements_score: float = (elements_found / len(config['expected_elements'])) * 40
        content_score: float = (content_matches / len(config['key_content'])) * 40
        functionality_score: float = float(functionality_result.get('score', 0)) * 20
        
        result['completeness_score'] = round(elements_score + content_score + functionality_score, 2)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {config['name']}: {result['completeness_score']}%")
        
    except Exception as e:
        result['error'] = str(e)
        result['issues'].append(f"Error during testing: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {config['name']}: {e}")
    
    return result

def test_module_functionality(page: Any, module_key: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è"""
    
    functionality: Dict[str, Any] = {
        'interactive_elements': 0,
        'forms_present': 0,
        'api_calls_detected': 0,
        'errors_count': 0,
        'score': 0,
        'specific_tests': {}
    }
    
    try:
        # –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        buttons: int = int(page.locator('button, .btn, input[type="submit"]').count())
        forms: int = int(page.locator('form').count())
        links: int = int(page.locator('a').count())
        
        functionality['interactive_elements'] = buttons + links
        functionality['forms_present'] = forms
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º
        if module_key == 'deposits':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            plans: int = int(page.locator('.plan, .deposit-plan').count())
            create_btn: int = int(page.locator('button:has-text("–°–æ–∑–¥–∞—Ç—å"), .create-deposit').count())
            functionality['specific_tests']['deposit_plans'] = plans
            functionality['specific_tests']['create_button'] = create_btn > 0
            
        elif module_key == 'portfolio':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            charts: int = int(page.locator('.chart, canvas, svg').count())
            tables: int = int(page.locator('table, .table').count())
            functionality['specific_tests']['charts'] = charts
            functionality['specific_tests']['data_tables'] = tables
            
        elif module_key == 'bonuses':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–æ–≤
            multipliers: int = int(page.locator('.multiplier, .bonus').count())
            functionality['specific_tests']['bonus_elements'] = multipliers
            
        elif module_key == 'how-it-works':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª–∞–¥–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            tabs: int = int(page.locator('.tab, [data-tab]').count())
            tab_content: int = int(page.locator('.tab-content, .tab-pane').count())
            functionality['specific_tests']['tabs'] = tabs
            functionality['specific_tests']['tab_content'] = tab_content
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        base_score: float = min(float(functionality['interactive_elements']) * 10, 50)
        forms_score: float = min(float(functionality['forms_present']) * 20, 30)
        specific_score: float = float(len([v for v in functionality['specific_tests'].values() if v]) * 10)
        
        functionality['score'] = min((base_score + forms_score + specific_score) / 100, 1.0)
        
    except Exception as e:
        functionality['error'] = str(e)
    
    return functionality

def compare_with_monolith(modular_results: Dict[str, Any]) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π"""
    
    comparison: Dict[str, Any] = {
        'modules_comparison': {},
        'overall_coverage': {},
        'missing_features': [],
        'improvements': [],
        'parity_score': 0
    }
    
    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    monolith_baseline: Dict[str, Dict[str, Any]] = {
        'dashboard': {'completeness': 85, 'features': ['balance', 'overview', 'transactions']},
        'deposits': {'completeness': 90, 'features': ['plans', 'creation', 'history']},
        'portfolio': {'completeness': 80, 'features': ['assets', 'performance', 'allocation']},
        'bonuses': {'completeness': 75, 'features': ['multipliers', 'history', 'activation']},
        'referrals': {'completeness': 70, 'features': ['links', 'statistics', 'commission']},
        'gifts': {'completeness': 65, 'features': ['calendar', 'welcome', 'history']},
        'settings': {'completeness': 85, 'features': ['profile', 'security', 'preferences']},
        'how-it-works': {'completeness': 95, 'features': ['explanation', 'tabs', 'content']}
    }
    
    total_modular_score: float = 0
    total_monolith_score: float = 0
    modules_compared: int = 0
    
    for module_key, modular_data in modular_results.items():
        if module_key in monolith_baseline:
            modules_compared += 1
            modular_score: float = float(modular_data.get('completeness_score', 0))
            monolith_score: float = float(monolith_baseline[module_key].get('completeness', 0))
            
            module_comparison: Dict[str, Any] = {
                'modular_score': modular_score,
                'monolith_score': monolith_score,
                'difference': modular_score - monolith_score,
                'status': 'improved' if modular_score >= monolith_score else 'needs_attention'
            }
            
            comparison['modules_comparison'][module_key] = module_comparison
            total_modular_score += modular_score
            total_monolith_score += monolith_score
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            if modular_score < monolith_score:
                comparison['missing_features'].append({
                    'module': module_key,
                    'gap': monolith_score - modular_score,
                    'priority': 'high' if monolith_score - modular_score > 20 else 'medium'
                })
    
    if modules_compared > 0:
        avg_modular: float = total_modular_score / modules_compared
        avg_monolith: float = total_monolith_score / modules_compared
        comparison['parity_score'] = round((avg_modular / avg_monolith) * 100, 2)
    
    comparison['overall_coverage'] = {
        'average_modular_score': round(total_modular_score / modules_compared, 2) if modules_compared > 0 else 0,
        'average_monolith_score': round(total_monolith_score / modules_compared, 2) if modules_compared > 0 else 0,
        'modules_compared': modules_compared
    }
    
    return comparison

def generate_statistics(results: Dict[str, Any]) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    stats: Dict[str, Any] = {
        'modules_tested': len(results),
        'successful_modules': 0,
        'failed_modules': 0,
        'average_completeness': 0,
        'best_module': {'name': '', 'score': 0},
        'worst_module': {'name': '', 'score': 100},
        'total_elements_checked': 0,
        'total_content_items_checked': 0,
        'recommendations': []
    }
    
    total_score: float = 0
    
    for module_key, module_data in results.items():
        if 'completeness_score' in module_data:
            score: float = float(module_data['completeness_score'])
            total_score += score
            
            if score >= 70:
                stats['successful_modules'] += 1
            else:
                stats['failed_modules'] += 1
            
            if score > stats['best_module']['score']:
                stats['best_module'] = {'name': module_key, 'score': score}
            
            if score < stats['worst_module']['score']:
                stats['worst_module'] = {'name': module_key, 'score': score}
            
            stats['total_elements_checked'] += module_data.get('elements_expected_count', 0)
            stats['total_content_items_checked'] += module_data.get('content_expected_count', 0)
    
    if len(results) > 0:
        stats['average_completeness'] = round(total_score / len(results), 2)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if stats['average_completeness'] < 70:
        stats['recommendations'].append("–û–±—â–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–∏–∂–µ 70% - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    if stats['failed_modules'] > stats['successful_modules']:
        stats['recommendations'].append("–ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –º–æ–¥—É–ª–µ–π —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    
    if stats['worst_module']['score'] < 50:
        stats['recommendations'].append(f"–ú–æ–¥—É–ª—å {stats['worst_module']['name']} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–π")
    
    return stats

def save_test_results(results: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    results_file = Path('cabinet_sections_test_results.json')
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")

def generate_detailed_report(results: Dict[str, Any]) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ markdown"""
    
    report_lines = [
        "# üîç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–†–û–í–ï–†–ö–ò –†–ê–ó–î–ï–õ–û–í –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê GENESIS",
        f"**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** {time.strftime('%d.%m.%Y %H:%M:%S')}",
        f"**–¢–∏–ø —Ç–µ—Å—Ç–∞:** –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–∞",
        "",
        "## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"
    ]
    
    if 'overall_statistics' in results:
        stats = results['overall_statistics']
        report_lines.extend([
            f"- **–ú–æ–¥—É–ª–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {stats['modules_tested']}",
            f"- **–£—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:** {stats['successful_modules']}",
            f"- **–¢—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è:** {stats['failed_modules']}",
            f"- **–°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞:** {stats['average_completeness']}%",
            f"- **–õ—É—á—à–∏–π –º–æ–¥—É–ª—å:** {stats['best_module']['name']} ({stats['best_module']['score']}%)",
            f"- **–•—É–¥—à–∏–π –º–æ–¥—É–ª—å:** {stats['worst_module']['name']} ({stats['worst_module']['score']}%)",
            ""
        ])
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º
    report_lines.append("## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ú–û–î–£–õ–Ø–ú")
    report_lines.append("")
    
    for module_key, module_data in results.get('detailed_results', {}).items():
        report_lines.extend([
            f"### üîß {module_data.get('name', module_key)}",
            f"- **–ú–∞—Ä—à—Ä—É—Ç:** {module_data.get('route', 'N/A')}",
            f"- **–ù–∞–≤–∏–≥–∞—Ü–∏—è:** {'‚úÖ' if module_data.get('navigation_success') else '‚ùå'}",
            f"- **–ü–æ–ª–Ω–æ—Ç–∞:** {module_data.get('completeness_score', 0)}%",
            f"- **–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:** {module_data.get('elements_found_count', 0)}/{module_data.get('elements_expected_count', 0)}",
            f"- **–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:** {module_data.get('content_matches_count', 0)}/{module_data.get('content_expected_count', 0)}",
            ""
        ])
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    if 'comparison_with_monolith' in results:
        comparison = results['comparison_with_monolith']
        report_lines.extend([
            "## ‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –° –ú–û–ù–û–õ–ò–¢–ù–û–ô –í–ï–†–°–ò–ï–ô",
            f"- **–ü–∞—Ä–∏—Ç–µ—Ç:** {comparison.get('parity_score', 0)}%",
            f"- **–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:** {comparison.get('overall_coverage', {}).get('average_modular_score', 0)}%",
            f"- **–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:** {comparison.get('overall_coverage', {}).get('average_monolith_score', 0)}%",
            ""
        ])
        
        if comparison.get('missing_features'):
            report_lines.append("### ‚ùå –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò:")
            for missing in comparison['missing_features']:
                report_lines.append(f"- **{missing['module']}:** –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –Ω–∞ {missing['gap']}% (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {missing['priority']})")
            report_lines.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if 'overall_statistics' in results and results['overall_statistics'].get('recommendations'):
        report_lines.extend([
            "## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò",
            ""
        ])
        for rec in results['overall_statistics']['recommendations']:
            report_lines.append(f"- {rec}")
        report_lines.append("")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_content = '\n'.join(report_lines)
    report_file = Path('cabinet_sections_detailed_report.md')
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    
    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏
    print("\n" + "="*60)
    print("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*60)
    
    if 'overall_statistics' in results:
        stats = results['overall_statistics']
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['successful_modules']} –º–æ–¥—É–ª–µ–π")
        print(f"‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {stats['failed_modules']} –º–æ–¥—É–ª–µ–π")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞: {stats['average_completeness']}%")
    
    if 'comparison_with_monolith' in results:
        print(f"‚öñÔ∏è  –ü–∞—Ä–∏—Ç–µ—Ç —Å –º–æ–Ω–æ–ª–∏—Ç–æ–º: {results['comparison_with_monolith'].get('parity_score', 0)}%")

if __name__ == '__main__':
    try:
        results = create_detailed_test_report()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        avg_completeness = results.get('overall_statistics', {}).get('average_completeness', 0)
        if avg_completeness >= 80:
            print("\nüéâ –û–¢–õ–ò–ß–ù–û: –ö–∞–±–∏–Ω–µ—Ç –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            sys.exit(0)
        elif avg_completeness >= 60:
            print("\n‚ö†Ô∏è –•–û–†–û–®–û: –ö–∞–±–∏–Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø: –ö–∞–±–∏–Ω–µ—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–µ")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(2)
