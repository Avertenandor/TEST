"""
–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ GENESIS.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç.
"""
from __future__ import annotations

import argparse
import json
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, TypedDict


class TestSuite(TypedDict):
    name: str
    file: str
    description: str


class TestSuiteResult(TypedDict):
    name: str
    status: str
    exit_code: int
    output: str
    execution_time: float
    suite_name: str
    description: str
    file_path: str
    error: str


class MasterReport(TypedDict):
    url: str
    timestamp: str
    total_execution_time: float
    test_suites: List[TestSuiteResult]


def run_test_suite(test_file: str, url: str, headless: bool, timeout: int = 30000) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    print(f"üîÑ –ó–∞–ø—É—Å–∫ {test_file}...")
    
    start_time = time.time()
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            sys.executable,
            test_file,
            "--url", url,
            "--headless", str(int(headless)),
            "--timeout", str(timeout)
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=timeout // 1000 + 60,  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö + –∑–∞–ø–∞—Å
            cwd=Path(__file__).parent.parent
        )
        
        execution_time = time.time() - start_time
        
        status = "PASS" if result.returncode == 0 else "FAIL"
        
        return {
            "name": Path(test_file).stem,
            "status": status,
            "exit_code": result.returncode,
            "output": result.stdout + result.stderr,
            "execution_time": execution_time,
            "error": "" if status == "PASS" else "Test failed",
            "all_errors": []
        }
    except subprocess.TimeoutExpired:
        execution_time = time.time() - start_time
        return {
            "name": Path(test_file).stem,
            "status": "TIMEOUT",
            "exit_code": -1,
            "output": "Test timed out",
            "execution_time": execution_time,
            "error": "Test timed out",
            "all_errors": ["Test timed out"]
        }
    except Exception as e:
        execution_time = time.time() - start_time
        return {
            "name": Path(test_file).stem,
            "status": "ERROR",
            "exit_code": -1,
            "output": f"Error running test: {str(e)}",
            "execution_time": execution_time,
            "error": str(e),
            "all_errors": [str(e)]
        }


def run_all_tests(url: str, timeout: int = 25000, headless: bool = True) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    base_path = Path(__file__).parent
    artifacts_dir = base_path / "_artifacts"
    artifacts_dir.mkdir(exist_ok=True)
    
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    start_time = time.time()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    test_suites: List[TestSuite] = [
        TestSuite(
            name="Landing Chrome Test",
            file=str(base_path / "e2e" / "test_landing_chrome.py"),
            description="–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏ DOM"
        ),
        TestSuite(
            name="Full Landing Test", 
            file=str(base_path / "e2e" / "test_full_landing.py"),
            description="–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞"
        ),
        TestSuite(
            name="Console Monitor",
            file=str(base_path / "e2e" / "test_console_monitor.py"), 
            description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Å–æ–ª–∏ –∏ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        ),
        TestSuite(
            name="Functional Tests",
            file=str(base_path / "e2e" / "test_functional.py"),
            description="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞–±–∏–Ω–µ—Ç–∞"
        ),
        TestSuite(
            name="JavaScript Unit Tests",
            file=str(base_path / "unit" / "test_js_modules.py"),
            description="Unit —Ç–µ—Å—Ç—ã JavaScript –º–æ–¥—É–ª–µ–π"
        ),
        TestSuite(
            name="Performance Tests",
            file=str(base_path / "performance" / "test_performance.py"),
            description="Performance, accessibility, SEO —Ç–µ—Å—Ç—ã"
        )
    ]
    
    results: List[Dict[str, Any]] = []
    total_passed = 0
    total_failed = 0
    total_skipped = 0
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {url}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: {len(test_suites)}")
    print("=" * 60)
    
    for i, suite in enumerate(test_suites, 1):
        print(f"[{i}/{len(test_suites)}] {suite['name']}...")
        
        test_file_path = Path(suite["file"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not test_file_path.exists():
            result: Dict[str, Any] = {
                "name": Path(suite["file"]).stem,
                "status": "SKIP",
                "exit_code": -1,
                "output": f"Test file not found: {suite['file']}",
                "execution_time": 0,
                "error": "File not found",
                "suite_name": suite["name"],
                "description": suite["description"],
                "file_path": str(suite["file"]),
                "all_errors": [f"File not found: {suite['file']}"]
            }
            total_skipped += 1
        else:
            result = run_test_suite(str(suite["file"]), url, headless, timeout)
            result["suite_name"] = suite["name"]
            result["description"] = suite["description"]
            result["file_path"] = str(suite["file"])
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if result["status"] == "PASS":
                total_passed += 1
            elif result["status"] != "SKIP":
                total_failed += 1
        
        results.append(result)
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        if result["status"] == "PASS":
            print(f"   ‚úÖ PASS")
        elif result["status"] == "SKIP":
            print(f"   ‚è≠Ô∏è  SKIP - {result.get('error', 'Unknown')}")
        else:
            print(f"   ‚ùå FAIL - {result.get('error', 'Unknown')}")
    
    print("=" * 60)
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tests = total_passed + total_failed
    success_rate = (total_passed / total_tests * 100) if total_tests > 0 else 0
    total_execution_time = time.time() - start_time
    
    # –°–±–æ—Ä –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
    all_errors: List[str] = []
    for result in results:
        if "all_errors" in result and result["all_errors"]:
            all_errors.extend(result["all_errors"])
        elif result["status"] in ["FAIL", "ERROR", "TIMEOUT"] and "error" in result:
            all_errors.append(f"{result.get('suite_name', result['name'])}: {result['error']}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_report: Dict[str, Any] = {
        "url": url,
        "timestamp": ts,
        "test_type": "full_test_suite",
        "total_execution_time": total_execution_time,
        "summary": {
            "total_suites": len(test_suites),
            "passed": total_passed,
            "failed": total_failed,
            "skipped": total_skipped,
            "success_rate": f"{success_rate:.1f}%"
        },
        "suite_results": results,
        "all_errors": all_errors[:20],  # –ü–µ—Ä–≤—ã–µ 20 –æ—à–∏–±–æ–∫
        "artifacts_directory": str(artifacts_dir),
        "status": "PASS" if total_failed == 0 and total_passed > 0 else "FAIL"
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    report_path = artifacts_dir / f"master_report_{ts}.json"
    try:
        report_path.write_text(json.dumps(final_report, ensure_ascii=False, indent=2), encoding="utf-8")
        print(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ REPORT_GENESIS.md
    try:
        genesis_report_path = Path("C:/Users/konfu/Desktop/Sites/Experiment/Experiment1/GENESIS-Website-Clean/REPORT_GENESIS.md")
        if genesis_report_path.exists():
            existing_content = genesis_report_path.read_text(encoding="utf-8")
        else:
            existing_content = "# GENESIS Test Reports\n\n"
        
        new_report = f"""
## Test Run: {ts}
- **URL**: {url}
- **Status**: {'‚úÖ PASS' if final_report['status'] == 'PASS' else '‚ùå FAIL'}
- **Success Rate**: {final_report['summary']['success_rate']}
- **Passed/Total**: {total_passed}/{len(test_suites)}
- **Execution Time**: {total_execution_time:.2f}s

### Suite Results:
"""
        for result in results:
            status_icon = "‚úÖ" if result["status"] == "PASS" else "‚ùå" if result["status"] == "FAIL" else "‚è≠Ô∏è"
            new_report += f"- {status_icon} **{result['suite_name']}**: {result['status']} ({result['execution_time']:.2f}s)\n"
        
        if all_errors:
            new_report += "\n### Errors:\n"
            for error in all_errors[:5]:
                new_report += f"- {error}\n"
        
        new_report += "\n---\n"
        
        genesis_report_path.write_text(existing_content + new_report, encoding="utf-8")
        print(f"üìù –û—Ç—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ REPORT_GENESIS.md")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ REPORT_GENESIS.md: {e}")
    
    return final_report


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ GENESIS")
    parser.add_argument("--url", default=os.environ.get("GENESIS_SITE_URL", "https://crypto-processing.net/"))
    parser.add_argument("--timeout", type=int, default=25000)
    parser.add_argument("--headless", type=int, default=1)
    parser.add_argument("--json", action="store_true", help="–í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    args = parser.parse_args()
    
    report = run_all_tests(args.url, args.timeout, bool(args.headless))
    
    if args.json:
        print(json.dumps(report, ensure_ascii=False, indent=2))
    else:
        print(f"""
üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
URL: {report['url']}
–°—Ç–∞—Ç—É—Å: {'üü¢ PASS' if report['status'] == 'PASS' else 'üî¥ FAIL'}
–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['summary']['success_rate']}
–ü—Ä–æ—à–ª–æ: {report['summary']['passed']}/{report['summary']['total_suites']}
–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {report['total_execution_time']:.2f}—Å

üìä –î–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–±–æ—Ä–∞–º:""")
        
        for result in report["suite_results"]:
            status_icon = "‚úÖ" if result["status"] == "PASS" else "‚ùå" if result["status"] == "FAIL" else "‚è≠Ô∏è"
            print(f"  {status_icon} {result['suite_name']} ({result['execution_time']:.2f}—Å)")
        
        if report["all_errors"]:
            print(f"\n‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:")
            for error in report["all_errors"][:5]:
                print(f"  ‚Ä¢ {error}")
    
    sys.exit(0 if report["status"] == "PASS" else 1)
