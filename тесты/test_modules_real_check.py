#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
"""

import requests
import time
import json
from pathlib import Path
from typing import Dict, List, Any, Tuple

class GenesisModulesRealTest:
    def __init__(self) -> None:
        self.base_url: str = "http://127.0.0.1:5502"
        self.modules_path: Path = Path(__file__).parent.parent / "modules"
        
        self.test_results: Dict[str, Any] = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "modules_tested": [],
            "working_modules": [],
            "broken_modules": [],
            "missing_templates": [],
            "console_test_results": [],
            "overall_health": 0
        }
        
        # –ú–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.modules_to_test: List[Tuple[str, str, str]] = [
            ("dashboard", "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "üìä"),
            ("deposits", "–î–µ–ø–æ–∑–∏—Ç—ã", "üí∞"),
            ("portfolio", "–ü–æ—Ä—Ç—Ñ–µ–ª—å", "üíº"),
            ("transactions", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "üìã"),
            ("analytics", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìà"),
            ("bonuses", "–ë–æ–Ω—É—Å—ã", "üéÅ"),
            ("gifts", "–ü–æ–¥–∞—Ä–∫–∏", "üéà"),
            ("referrals", "–†–µ—Ñ–µ—Ä–∞–ª—ã", "üë•"),
            ("multipliers", "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏", "‚ö°"),
            ("mining-rent", "–ê—Ä–µ–Ω–¥–∞ –º–∞–π–Ω–∏–Ω–≥–∞", "‚õèÔ∏è"),
            ("device", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "üîß"),
            ("plex-coin", "PLEX Coin", "ü™ô"),
            ("experience", "–û–ø—ã—Ç", "üåü"),
            ("rank", "–†–∞–Ω–≥", "üèÜ"),
            ("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è"),
            ("terminal", "–¢–µ—Ä–º–∏–Ω–∞–ª", "üíª"),
            ("platform-access", "–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", "üîê"),
            ("how-it-works", "–ö–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ", "üõ†Ô∏è")
        ]

    def check_module_files(self, module_name: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª—è"""
        module_path = self.modules_path / module_name
        
        file_check: Dict[str, Any] = {
            "module_exists": module_path.exists(),
            "has_index": False,
            "has_template": False,
            "has_styles": False,
            "has_module_js": False,
            "has_api": False,
            "template_file": None,
            "styles_file": None,
            "missing_files": []
        }
        
        if not file_check["module_exists"]:
            file_check["missing_files"].append("–ü–∞–ø–∫–∞ –º–æ–¥—É–ª—è")
            return file_check
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º index.js
        if (module_path / "index.js").exists():
            file_check["has_index"] = True
        else:
            file_check["missing_files"].append("index.js")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º template —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        template_file = module_path / f"{module_name}.template.html"
        if template_file.exists():
            file_check["has_template"] = True
            file_check["template_file"] = template_file.name
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
            alt_template = module_path / "template.html"
            if alt_template.exists():
                file_check["has_template"] = True
                file_check["template_file"] = alt_template.name
            else:
                file_check["missing_files"].append(f"{module_name}.template.html")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º styles —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        styles_file = module_path / f"{module_name}.styles.css"
        if styles_file.exists():
            file_check["has_styles"] = True
            file_check["styles_file"] = styles_file.name
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
            alt_styles = module_path / "styles.css"
            if alt_styles.exists():
                file_check["has_styles"] = True
                file_check["styles_file"] = alt_styles.name
            else:
                file_check["missing_files"].append(f"{module_name}.styles.css")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
        module_file = module_path / f"{module_name}.module.js"
        if module_file.exists():
            file_check["has_module_js"] = True
        else:
            file_check["missing_files"].append(f"{module_name}.module.js")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        api_files = list(module_path.glob("*.api.js"))
        file_check["has_api"] = len(api_files) > 0
        
        return file_check

    def analyze_template_content(self, module_name: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        module_path = self.modules_path / module_name
        
        content_analysis: Dict[str, Any] = {
            "template_size": 0,
            "has_content": False,
            "has_navigation": False,
            "has_data_sections": False,
            "has_forms": False,
            "interactive_elements": 0,
            "unique_sections": 0,
            "quality_score": 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω
        template_file = module_path / f"{module_name}.template.html"
        if not template_file.exists():
            template_file = module_path / "template.html"
        
        if template_file.exists():
            try:
                template_content = template_file.read_text(encoding='utf-8')
                content_analysis["template_size"] = len(template_content)
                
                if len(template_content) > 100:
                    content_analysis["has_content"] = True
                
                # –ü–æ–∏—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                nav_patterns = ['nav', 'navigation', 'sidebar', 'menu']
                content_analysis["has_navigation"] = any(
                    pattern in template_content.lower() for pattern in nav_patterns
                )
                
                # –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö
                data_patterns = ['data-', 'info-', 'stat-', 'balance-', 'chart', 'table']
                content_analysis["has_data_sections"] = any(
                    pattern in template_content.lower() for pattern in data_patterns
                )
                
                # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º
                form_patterns = ['<form', '<input', '<button', '<select']
                content_analysis["has_forms"] = any(
                    pattern in template_content.lower() for pattern in form_patterns
                )
                
                # –ü–æ–¥—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                interactive_patterns = ['onclick', 'addEventListener', 'data-action', 'btn-']
                for pattern in interactive_patterns:
                    content_analysis["interactive_elements"] += template_content.lower().count(pattern)
                
                # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
                section_patterns = ['<div class=', '<section', '<article', '<aside']
                for pattern in section_patterns:
                    content_analysis["unique_sections"] += template_content.lower().count(pattern)
                
                # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                score = 0
                if content_analysis["template_size"] > 1000: score += 2
                if content_analysis["has_navigation"]: score += 2
                if content_analysis["has_data_sections"]: score += 2
                if content_analysis["has_forms"]: score += 1
                if content_analysis["interactive_elements"] > 3: score += 1
                if content_analysis["unique_sections"] > 5: score += 2
                
                content_analysis["quality_score"] = score
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        
        return content_analysis

    def test_module_accessibility(self, module_name: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ HTTP"""
        accessibility: Dict[str, Any] = {
            "template_accessible": False,
            "styles_accessible": False,
            "module_accessible": False,
            "http_errors": []
        }
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ template
        template_url = f"{self.base_url}/modules/{module_name}/{module_name}.template.html"
        try:
            response = requests.get(template_url, timeout=5)
            if response.status_code == 200:
                accessibility["template_accessible"] = True
            else:
                accessibility["http_errors"].append(f"Template HTTP {response.status_code}")
        except Exception as e:
            accessibility["http_errors"].append(f"Template: {e}")
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ styles
        styles_url = f"{self.base_url}/modules/{module_name}/{module_name}.styles.css"
        try:
            response = requests.get(styles_url, timeout=5)
            if response.status_code == 200:
                accessibility["styles_accessible"] = True
            else:
                accessibility["http_errors"].append(f"Styles HTTP {response.status_code}")
        except Exception as e:
            accessibility["http_errors"].append(f"Styles: {e}")
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
        module_url = f"{self.base_url}/modules/{module_name}/{module_name}.module.js"
        try:
            response = requests.get(module_url, timeout=5)
            if response.status_code == 200:
                accessibility["module_accessible"] = True
            else:
                accessibility["http_errors"].append(f"Module HTTP {response.status_code}")
        except Exception as e:
            accessibility["http_errors"].append(f"Module: {e}")
        
        return accessibility

    def generate_console_test_script(self, module_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JavaScript –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        return f'''
// –¢–µ—Å—Ç –º–æ–¥—É–ª—è {module_name}
(async function test{module_name.title().replace('-', '')}Module() {{
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å {module_name}...');
    
    try {{
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–æ–¥—É–ª—é
        window.location.hash = '/{module_name}';
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const mainContent = document.getElementById('main_content');
        if (!mainContent) {{
            console.error('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
        }}
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è
        const hasContent = mainContent.innerHTML.trim().length > 100;
        if (!hasContent) {{
            console.error('‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç');
            return false;
        }}
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏
        const errors = console.errors || [];
        const criticalErrors = errors.filter(err => 
            err.level === 'error' && 
            !err.message.includes('MetaMask') && 
            !err.message.includes('inpage.js')
        );
        
        if (criticalErrors.length > 0) {{
            console.warn('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:', criticalErrors.length);
        }}
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const navElements = document.querySelectorAll('[data-page], .nav-link, .navigation a');
        const interactiveElements = document.querySelectorAll('button, input, select, .btn');
        
        console.log('‚úÖ –ú–æ–¥—É–ª—å {module_name} —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', {{
            hasContent: hasContent,
            navElements: navElements.length,
            interactiveElements: interactiveElements.length,
            errors: criticalErrors.length
        }});
        
        return {{
            success: hasContent && criticalErrors.length === 0,
            contentLoaded: hasContent,
            navigationElements: navElements.length,
            interactiveElements: interactiveElements.length,
            errorCount: criticalErrors.length
        }};
        
    }} catch (error) {{
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è {module_name}:', error);
        return false;
    }}
}})();
'''

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üî¨ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π GENESIS")
        print("=" * 70)
        
        working_modules = 0
        total_modules = len(self.modules_to_test)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console_script = "// GENESIS Modules Console Test Script\\n"
        console_script += "// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞\\n\\n"
        
        for i, (module_name, display_name, icon) in enumerate(self.modules_to_test, 1):
            print(f"\\nüìã –ú–æ–¥—É–ª—å {i}/{total_modules}: {icon} {display_name}")
            print("-" * 50)
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
            file_check = self.check_module_files(module_name)
            print(f"üìÅ –§–∞–π–ª—ã –º–æ–¥—É–ª—è:")
            print(f"   üì¶ –ú–æ–¥—É–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if file_check['module_exists'] else '‚ùå'}")
            
            if file_check["module_exists"]:
                print(f"   üìú index.js: {'‚úÖ' if file_check['has_index'] else '‚ùå'}")
                print(f"   üé® template: {'‚úÖ' if file_check['has_template'] else '‚ùå'}")
                print(f"   üíÑ styles: {'‚úÖ' if file_check['has_styles'] else '‚ùå'}")
                print(f"   ‚öôÔ∏è module.js: {'‚úÖ' if file_check['has_module_js'] else '‚ùå'}")
                print(f"   üîå API: {'‚úÖ' if file_check['has_api'] else '‚ùå'}")
                
                if file_check["missing_files"]:
                    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(file_check['missing_files'])}")
                
                # 2. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content_analysis = self.analyze_template_content(module_name)
                print(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
                print(f"   üìè –†–∞–∑–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: {content_analysis['template_size']} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìÑ –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {'‚úÖ' if content_analysis['has_content'] else '‚ùå'}")
                print(f"   üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {'‚úÖ' if content_analysis['has_navigation'] else '‚ùå'}")
                print(f"   üìà –°–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if content_analysis['has_data_sections'] else '‚ùå'}")
                print(f"   üìù –§–æ—Ä–º—ã: {'‚úÖ' if content_analysis['has_forms'] else '‚ùå'}")
                print(f"   üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {content_analysis['interactive_elements']}")
                print(f"   üíé –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {content_analysis['quality_score']}/10")
                
                # 3. HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                accessibility = self.test_module_accessibility(module_name)
                print(f"üåê HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:")
                print(f"   üé® Template: {'‚úÖ' if accessibility['template_accessible'] else '‚ùå'}")
                print(f"   üíÑ Styles: {'‚úÖ' if accessibility['styles_accessible'] else '‚ùå'}")
                print(f"   ‚öôÔ∏è Module: {'‚úÖ' if accessibility['module_accessible'] else '‚ùå'}")
                
                if accessibility["http_errors"]:
                    print(f"   ‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∏: {', '.join(accessibility['http_errors'])}")
                
                # –û—Ü–µ–Ω–∫–∞ –º–æ–¥—É–ª—è
                module_score = 0
                if file_check["has_index"]: module_score += 1
                if file_check["has_template"]: module_score += 2
                if file_check["has_styles"]: module_score += 1
                if file_check["has_module_js"]: module_score += 2
                if content_analysis["has_content"]: module_score += 2
                if content_analysis["quality_score"] >= 5: module_score += 2
                
                module_working = module_score >= 7  # –ò–∑ 10 –≤–æ–∑–º–æ–∂–Ω—ã—Ö
                
                if module_working:
                    working_modules += 1
                    self.test_results["working_modules"].append(f"{icon} {display_name}")
                    print(f"‚úÖ –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω ({module_score}/10)")
                else:
                    self.test_results["broken_modules"].append(f"{icon} {display_name}")
                    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ({module_score}/10)")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
                console_script += f"\\n// {icon} {display_name}\\n"
                console_script += self.generate_console_test_script(module_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥—É–ª—è
                module_result: Dict[str, Any] = {
                    "name": module_name,
                    "display_name": display_name,
                    "icon": icon,
                    "files": file_check,
                    "content": content_analysis,
                    "accessibility": accessibility,
                    "score": module_score,
                    "working": module_working
                }
                
                self.test_results["modules_tested"].append(module_result)
            else:
                print(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                self.test_results["broken_modules"].append(f"{icon} {display_name} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.test_results["overall_health"] = round((working_modules / total_modules) * 100, 1)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        script_path = Path(__file__).parent.parent / "console_test_script.js"
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(console_script)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        print(f"üéØ –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {working_modules}/{total_modules} ({self.test_results['overall_health']}%)")
        print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π: {working_modules}")
        print(f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—â–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {total_modules - working_modules}")
        
        if self.test_results["working_modules"]:
            print(f"\\n‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏:")
            for module in self.test_results["working_modules"]:
                print(f"   - {module}")
        
        if self.test_results["broken_modules"]:
            print(f"\\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")
            for module in self.test_results["broken_modules"]:
                print(f"   - {module}")
        
        print(f"\\nüß™ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: console_test_script.js")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        filename = "comprehensive_modules_test_final.json"
        filepath = Path(__file__).parent.parent / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        
        print(f"\\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main():
    tester = GenesisModulesRealTest()
    try:
        tester.run_comprehensive_test()
        tester.save_results()
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
