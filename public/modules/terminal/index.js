import { emit } from '../../app/pubsub.js';

export default {
    async mount(root, config) {
        console.log('[TERMINAL] –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è terminal');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —à–∞–±–ª–æ–Ω
            const response = await fetch('./modules/terminal/template.html');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const template = await response.text();
            console.log('[TERMINAL] HTML —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞:', template.length);

            root.innerHTML = template;
            console.log('[TERMINAL] HTML –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ DOM');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
            this.initTerminal(root);

            console.log('[TERMINAL] –ú–æ–¥—É–ª—å terminal —É—Å–ø–µ—à–Ω–æ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');

            return () => {
                console.log('[TERMINAL] –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è terminal');
                this.cleanup(root);
            };
        } catch (error) {
            console.error('[TERMINAL ERROR] –û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            root.innerHTML = `
                <div style="padding: 2rem; text-align: center; color: #ff6b6b;">
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞</h3>
                    <p>${error.message}</p>
                    <button onclick="location.reload()" style="background: #4ecdc4; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            `;
        }
    },

    initTerminal(root) {
        console.log('[TERMINAL] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...');

        const connectBtn = root.querySelector('[data-action="connect"]');
        const settingsBtn = root.querySelector('[data-action="settings"]');
        const fullscreenBtn = root.querySelector('[data-action="fullscreen"]');
        const toggleBtn = root.querySelector('[data-action="toggle-terminal"]');
        const timeframeBtns = root.querySelectorAll('[data-timeframe]');
        const terminalWidget = root.querySelector('.genesis-terminal-widget');

        console.log('[TERMINAL] –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
            connectBtn: !!connectBtn,
            settingsBtn: !!settingsBtn,
            fullscreenBtn: !!fullscreenBtn,
            toggleBtn: !!toggleBtn,
            terminalWidget: !!terminalWidget,
            timeframeBtns: timeframeBtns.length
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        if (toggleBtn && terminalWidget) {
            console.log('[TERMINAL] –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è');
            toggleBtn.addEventListener('click', (e) => {
                console.log('[TERMINAL] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è');
                e.preventDefault();
                e.stopPropagation();
                this.toggleTerminal(terminalWidget, toggleBtn);
            });
        } else {
            console.warn('[TERMINAL] –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –≤–∏–¥–∂–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        if (connectBtn) {
            connectBtn.addEventListener('click', () => {
                emit('wallet:connect', { source: 'terminal' });
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => {
                emit('terminal:settings', {});
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if (fullscreenBtn) {
            fullscreenBtn.addEventListener('click', () => {
                emit('terminal:fullscreen', {});
            });
        }

        // –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        timeframeBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const timeframe = btn.getAttribute('data-timeframe');
                this.switchTimeframe(timeframe, btn);
            });
        });

        this.startDataUpdates(root);
        console.log('[TERMINAL] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },

    toggleTerminal(widget, button) {
        console.log('[TERMINAL] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞');

        const isCollapsed = widget.classList.contains('collapsed');
        const toggleIcon = button.querySelector('.genesis-terminal-toggle-icon');
        const buttonText = button.querySelector('.genesis-terminal-btn-text');

        console.log('[TERMINAL] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { isCollapsed, hasIcon: !!toggleIcon, hasText: !!buttonText });

        if (isCollapsed) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
            console.log('[TERMINAL] –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª');
            widget.classList.remove('collapsed');
            if (toggleIcon) toggleIcon.textContent = 'üìâ';
            if (buttonText) buttonText.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
            emit('terminal:expanded', {});

            console.log('[TERMINAL] –¢–µ—Ä–º–∏–Ω–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç');
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
            console.log('[TERMINAL] –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª');
            widget.classList.add('collapsed');
            if (toggleIcon) toggleIcon.textContent = 'üìà';
            if (buttonText) buttonText.textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
            emit('terminal:collapsed', {});

            console.log('[TERMINAL] –¢–µ—Ä–º–∏–Ω–∞–ª —Å–≤–µ—Ä–Ω—É—Ç');
        }

        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É
        setTimeout(() => {
            try {
                widget.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            } catch (error) {
                console.warn('[TERMINAL] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', error);
            }
        }, 300);
    },

    switchTimeframe(timeframe, activeBtn) {
        const allBtns = document.querySelectorAll('[data-timeframe]');
        allBtns.forEach(btn => btn.classList.remove('genesis-terminal-chart-btn-active'));
        activeBtn.classList.add('genesis-terminal-chart-btn-active');

        emit('terminal:timeframe-change', { timeframe });
    },

    startDataUpdates(root) {
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        setInterval(() => {
            this.updatePrice(root);
            this.updateOrderbook(root);
            this.updateTrades(root);
        }, 3000);
    },

    updatePrice(root) {
        const priceElement = root.querySelector('.genesis-terminal-chart-pair-price');
        if (priceElement) {
            const currentPrice = parseFloat(priceElement.textContent.replace('$', ''));
            const change = (Math.random() - 0.5) * 0.01;
            const newPrice = Math.max(0.1, currentPrice + change);
            priceElement.textContent = '$' + newPrice.toFixed(4);
        }
    },

    updateOrderbook(root) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä–æ–≤
    },

    updateTrades(root) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    },

    cleanup(root) {
        root.innerHTML = '';
    }
};