// PROFESSIONAL DEDUPLICATION TOOL –¥–ª—è cabinet.html
const fs = require('fs');

console.log('üîß MCP DEDUPLICATION TOOL v2.0');
console.log('================================');

try {
    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const content = fs.readFileSync('cabinet.html', 'utf8');
    const lines = content.split('\n');
    
    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${lines.length} —Å—Ç—Ä–æ–∫`);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    const methodMap = new Map();
    const methodRegex = /^\s*(\w+):\s*function\(\)/;
    
    lines.forEach((line, index) => {
        const match = line.match(methodRegex);
        if (match) {
            const methodName = match[1];
            if (!methodMap.has(methodName)) {
                methodMap.set(methodName, []);
            }
            methodMap.get(methodName).push({
                line: index,
                content: line,
                lineNumber: index + 1
            });
        }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = new Map();
    for (let [methodName, occurrences] of methodMap) {
        if (occurrences.length > 1) {
            duplicates.set(methodName, occurrences);
            console.log(`üîç –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: ${methodName} (${occurrences.length} —Ä–∞–∑)`);
            occurrences.forEach((occ, i) => {
                console.log(`   ${i + 1}. –°—Ç—Ä–æ–∫–∞ ${occ.lineNumber}: ${occ.content.trim()}`);
            });
        }
    }
    
    console.log(`\n‚ö° –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${duplicates.size}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    let linesToRemove = new Set();
    
    for (let [methodName, occurrences] of duplicates) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        for (let i = 0; i < occurrences.length - 1; i++) {
            const startLine = occurrences[i].line;
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ (–∏—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –∏ –∑–∞–ø—è—Ç—É—é)
            let endLine = startLine;
            let braceCount = 0;
            let foundOpenBrace = false;
            
            for (let j = startLine; j < lines.length; j++) {
                const line = lines[j];
                
                // –°—á–∏—Ç–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
                const openBraces = (line.match(/\{/g) || []).length;
                const closeBraces = (line.match(/\}/g) || []).length;
                
                if (openBraces > 0) foundOpenBrace = true;
                braceCount += openBraces - closeBraces;
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–µ—Ç–æ–¥–∞
                if (foundOpenBrace && braceCount <= 0 && line.includes('},')) {
                    endLine = j;
                    break;
                }
            }
            
            console.log(`‚ùå –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç ${methodName}: —Å—Ç—Ä–æ–∫–∏ ${startLine + 1}-${endLine + 1}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–æ–¥–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for (let k = startLine; k <= endLine; k++) {
                linesToRemove.add(k);
            }
        }
    }
    
    console.log(`\nüóëÔ∏è –°—Ç—Ä–æ–∫ –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${linesToRemove.size}`);
    
    // –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const cleanedLines = lines.filter((line, index) => !linesToRemove.has(index));
    const cleanedContent = cleanedLines.join('\n');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs.writeFileSync('cabinet_clean.html', cleanedContent);
    
    console.log(`\n‚úÖ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${lines.length} —Å—Ç—Ä–æ–∫`);
    console.log(`   ‚Ä¢ –û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${cleanedLines.length} —Å—Ç—Ä–æ–∫`);
    console.log(`   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${lines.length - cleanedLines.length}`);
    console.log(`   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.size} –º–µ—Ç–æ–¥–æ–≤`);
    console.log(`\nüíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: cabinet_clean.html`);
    
} catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
}