/**
 * GENESIS 1.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CSS –æ—à–∏–±–æ–∫
 * –ü—Ä–æ–±–ª–µ–º–∞: CSS –æ—à–∏–±–∫–∏ –∏–∑-–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è JavaScript template literals –≤ HTML
 * –†–µ—à–µ–Ω–∏–µ: –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS –æ—à–∏–±–æ–∫...');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã template literals –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    function fixTemplateLiterals() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const allElements = document.querySelectorAll('*');
        let fixedCount = 0;
        
        allElements.forEach(element => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç style
            const style = element.getAttribute('style');
            if (style && style.includes('${')) {
                console.log('üîß –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π style:', style);
                // –ó–∞–º–µ–Ω—è–µ–º ${} –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç
                element.removeAttribute('style');
                fixedCount++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            ['onclick', 'data-value', 'data-color', 'data-bg-color'].forEach(attr => {
                const value = element.getAttribute(attr);
                if (value && value.includes('${')) {
                    console.log(`üîß –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π ${attr}:`, value);
                    // –î–ª—è onclick –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    if (attr === 'onclick') {
                        const fixedValue = value.replace(/\$\{([^}]+)\}/g, function(match, p1) {
                            // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                            try {
                                return eval(p1);
                            } catch (e) {
                                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å:', p1);
                                return '';
                            }
                        });
                        element.setAttribute(attr, fixedValue);
                    } else {
                        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É–¥–∞–ª—è–µ–º
                        element.removeAttribute(attr);
                    }
                    fixedCount++;
                }
            });
        });
        
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${fixedCount}`);
        return fixedCount;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö CSS –ø—Ä–æ–±–ª–µ–º
    function fixSpecificCSSIssues() {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        const progressBars = document.querySelectorAll('.progress-bar[data-progress]');
        progressBars.forEach(bar => {
            const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
            bar.style.width = progress + '%';
        });
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
        document.querySelectorAll('[data-color]').forEach(el => {
            const color = el.getAttribute('data-color');
            if (color && !color.includes('${')) {
                el.style.color = color;
            }
        });
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ñ–æ–Ω—ã
        document.querySelectorAll('[data-bg-color]').forEach(el => {
            const bgColor = el.getAttribute('data-bg-color');
            if (bgColor && !bgColor.includes('${')) {
                el.style.background = bgColor;
            }
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS –≤ —Å—Ç–∏–ª—è—Ö
    function fixInlineCSS() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ style —Ç–µ–≥–∏
        const styleTags = document.querySelectorAll('style');
        styleTags.forEach(styleTag => {
            let cssText = styleTag.textContent;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if (cssText.includes('${')) {
                console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω template literal –≤ CSS');
                // –ó–∞–º–µ–Ω—è–µ–º template literals –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                cssText = cssText.replace(/\$\{[^}]+\}/g, 'inherit');
                styleTag.textContent = cssText;
            }
        });
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixTemplateLiterals();
    fixSpecificCSSIssues();
    fixInlineCSS();
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setTimeout(() => {
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CSS –æ—à–∏–±–æ–∫...');
        fixTemplateLiterals();
        fixSpecificCSSIssues();
    }, 2000);
    
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS –æ—à–∏–±–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
window.fixCSSErrors = function() {
    console.log('üîß –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS –æ—à–∏–±–æ–∫...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å inline —Å—Ç–∏–ª—è–º–∏
    const elementsWithStyle = document.querySelectorAll('[style]');
    let fixedCount = 0;
    
    elementsWithStyle.forEach(element => {
        const style = element.getAttribute('style');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if (style && (style.includes('${') || style.includes('undefined') || style.includes('null'))) {
            console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º style:', style);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª—è–µ–º
            const cleanedStyle = style
                .replace(/\$\{[^}]+\}/g, '0')
                .replace(/undefined/g, '0')
                .replace(/null/g, '0');
            
            if (cleanedStyle.trim()) {
                element.setAttribute('style', cleanedStyle);
            } else {
                element.removeAttribute('style');
            }
            fixedCount++;
        }
    });
    
    console.log(`üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ inline —Å—Ç–∏–ª–µ–π: ${fixedCount}`);
    return fixedCount;
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', window.fixCSSErrors);
} else {
    window.fixCSSErrors();
}

console.log('üíä Fix CSS Errors loaded. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.fixCSSErrors() –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
