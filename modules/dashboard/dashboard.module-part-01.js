        const element = this.container.querySelector(`#stat-${id} .stats-value`);
        if (element) {
            element.textContent = value;
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            element.classList.add('updated');
            setTimeout(() => element.classList.remove('updated'), 500);
        }
    }
    
    updateActiveDeposits() {
        const container = this.container.querySelector('#active-deposits-list');
        if (!container) return;
        
        if (this.state.activeDeposits === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üìä</div>
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞</p>
                    <button class="btn btn-primary" data-action="create-deposit">
                        üí∞ –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
                    </button>
                </div>
            `;
        } else {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            container.innerHTML = `
                <div class="deposits-grid">
                    ${this.generateDepositCards()}
                </div>
            `;
        }
    }
    
    generateDepositCards() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const deposits = this.state.deposits.slice(0, 3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        
        if (deposits.length === 0) {
            return '<p class="no-deposits">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</p>';
        }
        
        return deposits.map(deposit => `
            <div class="deposit-card active">
                <div class="deposit-header">
                    <h4>–î–µ–ø–æ–∑–∏—Ç #${deposit.id}</h4>
                    <span class="deposit-status">–ê–∫—Ç–∏–≤–µ–Ω</span>
                </div>
                <div class="deposit-info">
                    <div class="deposit-stat">
                        <span class="label">–°—É–º–º–∞:</span>
                        <span class="value">$${deposit.amount}</span>
                    </div>
                    <div class="deposit-stat">
                        <span class="label">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</span>
                        <span class="value">${deposit.daily}%</span>
                    </div>
                    <div class="deposit-stat">
                        <span class="label">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</span>
                        <span class="value success">$${deposit.earned.toFixed(2)}</span>
                    </div>
                    <div class="deposit-stat">
                        <span class="label">–î–Ω–µ–π:</span>
                        <span class="value">${deposit.days}/300</span>
                    </div>
                </div>
                <div class="deposit-progress">
                    <div class="progress-bar" style="width: ${(deposit.days/300)*100}%"></div>
                </div>
            </div>
        `).join('');
    }
    
    updateLastActivity() {
        const container = this.container.querySelector('#last-activity');
        if (!container) return;
        
        let activities = [];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.state.lastActivity && this.state.lastActivity.length > 0) {
            activities = this.state.lastActivity.map(tx => {
                const timeAgo = this.getTimeAgo(tx.timestamp);
                const action = tx.type === 'in' ? '–í—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂' : '–ò—Å—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–µ–∂';
                const amount = `${tx.type === 'in' ? '+' : '-'}${tx.value.toFixed(2)} ${tx.token}`;
                
                return {
                    time: timeAgo,
                    action: action,
                    amount: amount,
                    hash: tx.hash
                };
            });
        } else {
            // Fallback –Ω–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            activities = [
                { time: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', action: '–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞', amount: '' }
            ];
        }
        
        container.innerHTML = `
            <h3>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
            <div class="activity-list">
                ${activities.map(activity => `
                    <div class="activity-item">
                        <span class="activity-time">${activity.time}</span>
                        <span class="activity-action">${activity.action}</span>
                        ${activity.amount ? 
                            `<span class="activity-amount ${activity.amount.startsWith('+') ? 'success' : 'danger'}">${activity.amount}</span>` : 
                            ''
                        }
                        ${activity.hash ? 
                            `<a href="https://bscscan.com/tx/${activity.hash}" target="_blank" class="tx-link">üîó</a>` : 
                            ''
                        }
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    getTimeAgo(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (days > 0) return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
        if (hours > 0) return `${hours} —á. –Ω–∞–∑–∞–¥`;
        if (minutes > 0) return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
        return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    }
    
    updateUserInfo() {
        const userAddress = this.context.store?.get('user.address');
        if (userAddress) {
            const displayElement = this.container.querySelector('#user-address-display');
            if (displayElement) {
                displayElement.textContent = this.formatAddress(userAddress);
            }
        }
    }
    
    updatePlatformAccessStatus(hasAccess, days) {
        const indicator = this.container.querySelector('#platform-access-indicator');
        if (!indicator) return;
        
        if (hasAccess) {
            indicator.className = 'access-status active';
            indicator.innerHTML = `
                <span class="access-icon">‚úÖ</span>
                <span class="access-text">–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω</span>
                <span class="access-days">${days} –¥–Ω–µ–π</span>
            `;
        } else {
            indicator.className = 'access-status inactive';
            indicator.innerHTML = `
                <span class="access-icon">üîí</span>
                <span class="access-text">–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞</span>
                <button class="btn btn-small btn-warning" data-action="platform-access">
                    –û–ø–ª–∞—Ç–∏—Ç—å $1
                </button>
            `;
        }
    }
    
    startAutoUpdate() {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        let emptyResultCount = 0;
        let currentInterval = 30000; // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 30 —Å–µ–∫—É–Ω–¥
        
        const scheduleNextUpdate = () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            if (this.isDestroyed) {
                console.log('üìä Module destroyed, stopping auto-update');
                return;
            }
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.autoUpdateTimeout) {
                clearTimeout(this.autoUpdateTimeout);
            }
            
            this.autoUpdateTimeout = setTimeout(async () => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
                if (!this.dashboardLoading) {
                    const prevDeposits = this.state.deposits.length;
                    await this.loadDashboardData();
                    const newDeposits = this.state.deposits.length;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                    if (prevDeposits === newDeposits && newDeposits === 0) {
                        emptyResultCount++;
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (exponential idle)
                        if (emptyResultCount > 2) {
                            currentInterval = Math.min(currentInterval * 1.5, 120000); // –ú–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
                            console.log(`üìä No changes detected, increasing interval to ${currentInterval/1000}s`);
                        }
                    } else {
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                        emptyResultCount = 0;
                        currentInterval = 30000;
                        console.log('üìä Changes detected, resetting interval to 30s');
                    }
                }
                
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                scheduleNextUpdate();
            }, currentInterval);
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        scheduleNextUpdate();
    }
    
    startFPSMeasurement() {
        let frameCount = 0;
        let lastTime = performance.now();
        
        const measureFPS = () => {
            frameCount++;
            const currentTime = performance.now();
            
            if (currentTime - lastTime >= 1000) {
                this.state.stats.fps = Math.round((frameCount * 1000) / (currentTime - lastTime));
                this.updateTechnicalStat('fps', `${this.state.stats.fps} FPS`);
                
                frameCount = 0;
                lastTime = currentTime;
            }
            
            if (!this.isDestroyed) {
                requestAnimationFrame(measureFPS);
            }
        };
        
        requestAnimationFrame(measureFPS);
    }
    
    async measurePing() {
        const startTime = performance.now();
        
        try {
            // Use a simple request to measure network latency
            await fetch('https://api.bscscan.com/api?module=gastracker&action=gasoracle&apikey=YourApiKeyToken', {
                method: 'GET',
                mode: 'cors'
            });
            
            const endTime = performance.now();
            this.state.stats.ping = Math.round(endTime - startTime);
            this.updateTechnicalStat('ping', `${this.state.stats.ping} ms`);
            
        } catch (error) {
            // If CORS fails, just show a simulated ping based on performance
            const simulatedPing = Math.floor(Math.random() * (80 - 20) + 20);
            this.state.stats.ping = simulatedPing;
            this.updateTechnicalStat('ping', `~${simulatedPing} ms`);
        }
        
        // Repeat measurement every 10 seconds
        setTimeout(() => this.measurePing(), 10000);
    }
    
    updateUptime() {
        const startTime = Date.now();
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.uptimeInterval) {
            clearInterval(this.uptimeInterval);
        }
        
        this.uptimeInterval = setInterval(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            if (this.isDestroyed) {
                clearInterval(this.uptimeInterval);
                return;
            }
            
            const uptime = Math.floor((Date.now() - startTime) / 1000);
            const hours = Math.floor(uptime / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            const seconds = uptime % 60;
            
            this.state.stats.uptime = uptime;
            this.updateTechnicalStat('uptime', 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
            );
        }, 1000);
    }
    
    updateTechnicalStat(stat, value) {
        const element = this.container.querySelector(`#tech-${stat}`);
        if (element) {
            element.textContent = value;
        }
    }
    
    navigateToPage(page) {
        console.log(`Navigating to: ${page}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
        const navLinks = this.container.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            if (link.dataset.page === page) {
                link.classList.add('active');
            } else {
                link.classList.remove('active');
            }
        });
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
        if (this.context.router) {
            this.context.router.navigate(`/${page}`);
        }
    }
    
    showCreateDepositModal() {
        console.log('Opening create deposit modal...');
        if (this.context.eventBus) {
            this.context.eventBus.emit('modal:show', {
                type: 'create-deposit'
            });
        }
    }
    
    showPlatformAccessModal() {
        console.log('Opening platform access modal...');
        if (this.context.eventBus) {
            this.context.eventBus.emit('modal:show', {
                type: 'platform-access'
            });
        }
    }
    
    toggleMobileMenu() {
        const sidebar = this.container.querySelector('.dashboard-sidebar');
        if (sidebar) {
            sidebar.classList.toggle('active');
        }
    }
    
    subscribeToEvents() {
        if (this.context.eventBus) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            this.subscriptions.push(
                this.context.eventBus.on('data:updated', () => {
                    this.loadDashboardData();
                })
            );
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            this.subscriptions.push(
                this.context.eventBus.on('balance:changed', (data) => {
                    this.state.balance = data.balance;
                    this.updateDashboard();
                })
            );
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
            this.subscriptions.push(
                this.context.eventBus.on('deposit:created', () => {
                    this.loadDashboardData();
                })
            );
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
            this.subscriptions.push(
                this.context.eventBus.on('prices:updated', (prices) => {
                    console.log('üìà Prices updated:', prices);
                    this.updateDetailedBalances();
                })
            );
        }
    }
    
    subscribeToPriceUpdates() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –æ—Ç PriceMonitor
        const unsubscribe = priceMonitor.subscribe((prices) => {
            console.log('üí± Price update received:', prices);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            this.updateDetailedBalances();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –≤ UI
            this.updatePriceDisplay(prices);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        this.subscriptions.push(unsubscribe);
    }
    
    updatePriceDisplay(prices) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤
        const priceContainer = this.container.querySelector('#token-prices');
        if (priceContainer) {
            priceContainer.innerHTML = `
                <div class="price-item">
                    <span class="price-token">BNB:</span>
                    <span class="price-value">${prices.BNB?.toFixed(2) || 'N/A'}</span>
                </div>
                <div class="price-item">
                    <span class="price-token">PLEX:</span>
                    <span class="price-value">${prices.PLEX?.toFixed(4) || 'N/A'}</span>
                </div>
            `;
        }
    }
    
    formatAddress(address) {
        if (!address || address.length < 10) return address;
        return `${address.slice(0, 6)}...${address.slice(-4)}`;
    }
    
    getFallbackTemplate() {
        return `
            <div class="dashboard-container">
                <div class="dashboard-header">
                    <h2>üè† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
                    <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GENESIS DeFi Platform</p>
                </div>
                
                <div class="stats-grid">
                    <div id="stat-total-balance" class="stats-card">
                        <div class="stats-header">
                            <span class="stats-title">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</span>
                            <span class="stats-icon">üí∞</span>
                        </div>
                        <div class="stats-value">$0.00</div>
                    </div>
                    
                    <div id="stat-active-deposits" class="stats-card">
                        <div class="stats-header">
                            <span class="stats-title">–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã</span>
                            <span class="stats-icon">üìà</span>
                        </div>
                        <div class="stats-value">0</div>
                    </div>
                    
                    <div id="stat-total-earnings" class="stats-card">
                        <div class="stats-header">
                            <span class="stats-title">–û–±—â–∏–π –¥–æ—Ö–æ–¥</span>
                            <span class="stats-icon">üöÄ</span>
                        </div>
                        <div class="stats-value">$0.00</div>
                    </div>
                    
                    <div id="stat-today-earnings" class="stats-card">
                        <div class="stats-header">
