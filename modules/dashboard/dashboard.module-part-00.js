// modules/dashboard/dashboard.module.js
// –ú–æ–¥—É–ª—å –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GENESIS DeFi Platform

import DashboardAPI from './dashboard.api.js';
import priceMonitor from '../../shared/services/price-monitor.js';

export default class DashboardModule {
    constructor() {
        this.name = 'dashboard';
        this.version = '1.1.0';
        this.dependencies = ['auth'];
        
        this.container = null;
        this.context = null;
        this.api = null;
        this.subscriptions = [];
        this.updateInterval = null;
        this.autoUpdateTimeout = null; // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.uptimeInterval = null; // –û—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è uptime
        
        // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.dashboardLoading = false;
        this.isDestroyed = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
        this.state = {
            balance: 0,
            balances: {
                bnb: 0,
                plex: 0,
                usdt: 0,
                totalUSD: 0
            },
            deposits: [],
            activeDeposits: 0,
            totalDeposited: 0,
            totalEarnings: 0,
            todayEarnings: 0,
            platformAccessDays: 0,
            lastActivity: [],
            stats: {
                fps: 0,
                ping: 0,
                uptime: 0
            }
        };
    }
    
    async init(context) {
        console.log('üìä Initializing Dashboard Module...');
        
        this.context = context;
        this.container = context.container;
        
        try {
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            this.api = new DashboardAPI(window.bscApi);
            
            // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            await this.loadTemplate();
            
            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
            await this.loadStyles();
            
            // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            this.initComponents();
            
            // 5. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            this.subscribeToEvents();
            
            // 6. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
            this.subscribeToPriceUpdates();
            
            // 7. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadDashboardData();
            
            // 8. –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.startAutoUpdate();
            
            console.log('‚úÖ Dashboard Module initialized successfully');
            
            return this;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Dashboard Module:', error);
            throw error;
        }
    }
    
    async loadTemplate() {
        try {
            const response = await fetch('./modules/dashboard/dashboard.template.html');
            const html = await response.text();
            this.container.innerHTML = html;
        } catch (error) {
            console.error('Failed to load dashboard template:', error);
            this.container.innerHTML = this.getFallbackTemplate();
        }
    }
    
    async loadStyles() {
        const existingLink = document.querySelector(`link[data-module="${this.name}"]`);
        if (existingLink) return;
        
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = './modules/dashboard/dashboard.styles.css';
        link.dataset.module = this.name;
        document.head.appendChild(link);
    }
    
    initComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.initNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        this.initQuickActions();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.initStats();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserInfo();
    }
    
    initNavigation() {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
        const navLinks = this.container.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = link.dataset.page;
                this.navigateToPage(page);
            });
        });
        
        // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
        const mobileToggle = this.container.querySelector('.mobile-menu-toggle');
        if (mobileToggle) {
            mobileToggle.addEventListener('click', () => {
                this.toggleMobileMenu();
            });
        }
    }
    
    initQuickActions() {
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
        const createDepositBtn = this.container.querySelector('[data-action="create-deposit"]');
        if (createDepositBtn) {
            createDepositBtn.addEventListener('click', () => {
                this.showCreateDepositModal();
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        const accessBtn = this.container.querySelector('[data-action="platform-access"]');
        if (accessBtn) {
            accessBtn.addEventListener('click', () => {
                this.showPlatformAccessModal();
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        const analyticsBtn = this.container.querySelector('[data-action="analytics"]');
        if (analyticsBtn) {
            analyticsBtn.addEventListener('click', () => {
                this.navigateToPage('analytics');
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsBtn = this.container.querySelector('[data-action="settings"]');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => {
                this.navigateToPage('settings');
            });
        }
    }
    
    initStats() {
        // –ó–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è FPS
        this.startFPSMeasurement();
        
        // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞
        this.measurePing();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        this.updateUptime();
    }
    
    async loadDashboardData() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (this.dashboardLoading) {
            console.log('‚ö†Ô∏è Dashboard already loading, skipping duplicate request');
            return;
        }
        
        this.dashboardLoading = true;
        console.log('üìä Loading dashboard data...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ store
            const userAddress = this.context.store?.get('user.address');
            const platformAccess = this.context.store?.get('user.platformAccess');
            const accessDays = this.context.store?.get('user.accessDays') || 0;
            
            if (!userAddress) {
                console.warn('No user address found, using demo data');
                this.loadDemoData();
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            this.showLoadingState();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.showPlaceholder('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–ª–æ–∫—á–µ–π–Ω–∞...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            const data = await this.api.loadUserData(userAddress, {
                sequential: true,
                onProgress: (stage, partialData) => {
                    console.log(`‚ÑπÔ∏è Partial update: ${stage}`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ –º–µ—Ä–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    if (stage === 'deposits') {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
                        this.state.deposits = partialData.deposits;
                        this.state.activeDeposits = partialData.activeDepositsCount;
                        this.state.totalDeposited = partialData.totalDeposited;
                        this.state.totalEarnings = partialData.earnings.total;
                        this.state.todayEarnings = partialData.earnings.today;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
                        this.updateStatCard('active-deposits', this.state.activeDeposits);
                        this.updateStatCard('total-earnings', `${this.state.totalEarnings.toFixed(2)}`);
                        this.updateStatCard('today-earnings', `${this.state.todayEarnings.toFixed(2)}`);
                        this.updateActiveDeposits();
                        
                        this.showPlaceholder('–î–µ–ø–æ–∑–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã...');
                        
                    } else if (stage === 'bnb' || stage === 'plex' || stage === 'usdt') {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
                        this.state.balances = partialData.balances;
                        this.state.balance = partialData.balances.totalUSD;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
                        this.updateDetailedBalances();
                        
                        if (stage === 'usdt') {
                            this.hidePlaceholder();
                        }
                    }
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state.balances = data.balances;
            this.state.balance = data.balances.totalUSD;
            this.state.deposits = data.deposits;
            this.state.activeDeposits = data.activeDepositsCount;
            this.state.totalDeposited = data.totalDeposited;
            this.state.totalEarnings = data.earnings.total;
            this.state.todayEarnings = data.earnings.today;
            this.state.platformAccessDays = accessDays;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if (data.errors && data.errors.length > 0) {
                console.warn('‚ö†Ô∏è Dashboard loaded with errors:', data.errors);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI
                this.showWarning(`–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –û—à–∏–±–æ–∫: ${data.errors.length}`);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            this.api.getRecentTransactions(userAddress, 5)
                .then(transactions => {
                    this.state.lastActivity = transactions;
                    this.updateLastActivity();
                })
                .catch(error => {
                    console.error('Failed to load recent transactions:', error);
                });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.updateDashboard();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            this.updatePlatformAccessStatus(platformAccess, accessDays);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            this.hideLoadingState();
            
        } catch (error) {
            console.error('Error loading dashboard data:', error);
            this.hideLoadingState();
            this.hidePlaceholder();
            this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. ${error.message ? `(${error.message})` : ''}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            this.showRetryButton();
        } finally {
            // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
            this.dashboardLoading = false;
            console.log('‚úÖ Dashboard loading flag reset');
        }
    }
    
    showPlaceholder(message) {
        const placeholder = this.container.querySelector('.dashboard-placeholder');
        if (placeholder) {
            placeholder.textContent = message;
            placeholder.style.display = 'block';
        } else {
            // –°–æ–∑–¥–∞–µ–º placeholder –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const newPlaceholder = document.createElement('div');
            newPlaceholder.className = 'dashboard-placeholder';
            newPlaceholder.textContent = message;
            const header = this.container.querySelector('.dashboard-header');
            if (header) {
                header.insertAdjacentElement('afterend', newPlaceholder);
            }
        }
    }
    
    hidePlaceholder() {
        const placeholder = this.container.querySelector('.dashboard-placeholder');
        if (placeholder) {
            placeholder.style.display = 'none';
        }
    }
    
    showWarning(message) {
        if (this.context.eventBus) {
            this.context.eventBus.emit('notification:show', {
                message: message,
                type: 'warning',
                duration: 5000
            });
        }
    }
    
    showRetryButton() {
        const container = this.container.querySelector('.quick-actions');
        if (container && !container.querySelector('.retry-button')) {
            const retryBtn = document.createElement('button');
            retryBtn.className = 'btn btn-warning retry-button';
            retryBtn.innerHTML = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É';
            retryBtn.onclick = () => {
                retryBtn.remove();
                this.loadDashboardData();
            };
            container.insertAdjacentElement('afterbegin', retryBtn);
        }
    }
    
    loadDemoData() {
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.state.balance = 0;
        this.state.activeDeposits = 0;
        this.state.totalEarnings = 0;
        this.state.todayEarnings = 0;
        this.updateDashboard();
    }
    
    showLoadingState() {
        const loader = this.container.querySelector('.dashboard-loader');
        if (loader) {
            loader.style.display = 'flex';
        }
    }
    
    hideLoadingState() {
        const loader = this.container.querySelector('.dashboard-loader');
        if (loader) {
            loader.style.display = 'none';
        }
    }
    
    showError(message) {
        if (this.context.eventBus) {
            this.context.eventBus.emit('notification:show', {
                message: message,
                type: 'error'
            });
        }
    }
    
    updateDashboard() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        this.updateStatCard('total-balance', `${this.state.balance.toFixed(2)}`);
        this.updateStatCard('active-deposits', this.state.activeDeposits);
        this.updateStatCard('total-earnings', `${this.state.totalEarnings.toFixed(2)}`);
        this.updateStatCard('today-earnings', `${this.state.todayEarnings.toFixed(2)}`);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
        this.updateDetailedBalances();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        this.updateActiveDeposits();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.updateLastActivity();
    }
    
    updateDetailedBalances() {
        const balancesContainer = this.container.querySelector('#detailed-balances');
        if (balancesContainer) {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            const bnbPrice = priceMonitor.getPrice('BNB');
            const plexPrice = priceMonitor.getPrice('PLEX');
            const usdtPrice = priceMonitor.getPrice('USDT');
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
            const bnbUSD = this.state.balances.bnb * bnbPrice;
            const plexUSD = this.state.balances.plex * plexPrice;
            const usdtUSD = this.state.balances.usdt * usdtPrice;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD
            this.state.balances.totalUSD = bnbUSD + plexUSD + usdtUSD;
            this.state.balance = this.state.balances.totalUSD;
            
            balancesContainer.innerHTML = `
                <div class="balance-item">
                    <span class="balance-label">BNB:</span>
                    <span class="balance-value">${this.state.balances.bnb.toFixed(6)}</span>
                    <span class="balance-usd">(${bnbUSD.toFixed(2)})</span>
                </div>
                <div class="balance-item">
                    <span class="balance-label">PLEX:</span>
                    <span class="balance-value">${this.state.balances.plex.toFixed(2)}</span>
                    <span class="balance-usd">(${plexUSD.toFixed(2)})</span>
                </div>
                <div class="balance-item">
                    <span class="balance-label">USDT:</span>
                    <span class="balance-value">${this.state.balances.usdt.toFixed(2)}</span>
                    <span class="balance-usd">(${usdtUSD.toFixed(2)})</span>
                </div>
                <div class="balance-item balance-total">
                    <span class="balance-label">–ò—Ç–æ–≥–æ USD:</span>
                    <span class="balance-value-total">${this.state.balances.totalUSD.toFixed(2)}</span>
                </div>
            `;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –±–∞–ª–∞–Ω—Å–∞
            this.updateStatCard('total-balance', `${this.state.balances.totalUSD.toFixed(2)}`);
        }
    }
    
    updateStatCard(id, value) {
