// modules/referrals/referrals.api.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

export default class ReferralsAPI {
    constructor(bscApi) {
        this.bscApi = bscApi;
        this.contractAddress = '0x...' // –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        this.cache = new Map();
        this.cacheTimeout = 60000; // 1 –º–∏–Ω—É—Ç–∞
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getReferralLink(userAddress) {
        try {
            const baseUrl = window.location.origin;
            const referralCode = userAddress.slice(0, 6) + '...' + userAddress.slice(-4);
            
            return {
                link: `${baseUrl}/?ref=${userAddress}`,
                code: referralCode,
                qrCode: await this.generateQRCode(`${baseUrl}/?ref=${userAddress}`)
            };
        } catch (error) {
            console.error('Error generating referral link:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
     */
    async getReferralStats(userAddress) {
        const cacheKey = `referral_stats_${userAddress}`;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–ª–æ–∫—á–µ–π–Ω—É)
            const stats = {
                totalReferrals: this.generateRandomCount(0, 25),
                activeReferrals: this.generateRandomCount(0, 15),
                totalEarnings: this.generateRandomAmount(0, 1000),
                monthlyEarnings: this.generateRandomAmount(0, 200),
                averageDailyEarnings: this.generateRandomAmount(0, 10),
                level1Count: this.generateRandomCount(0, 15),
                level2Count: this.generateRandomCount(0, 8),
                level3Count: this.generateRandomCount(0, 3)
            };

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: stats,
                timestamp: Date.now()
            });

            return stats;
        } catch (error) {
            console.error('Error fetching referral stats:', error);
            return {
                totalReferrals: 0,
                activeReferrals: 0,
                totalEarnings: 0,
                monthlyEarnings: 0,
                averageDailyEarnings: 0,
                level1Count: 0,
                level2Count: 0,
                level3Count: 0
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
     */
    async getReferralsList(userAddress, level = 'all', offset = 0, limit = 50) {
        const cacheKey = `referrals_list_${userAddress}_${level}_${offset}_${limit}`;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            const referrals = this.generateMockReferrals(level, limit);

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: referrals,
                timestamp: Date.now()
            });

            return referrals;
        } catch (error) {
            console.error('Error fetching referrals list:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∏—Å—Å–∏–π
     */
    async getCommissionHistory(userAddress, period = 30) {
        const cacheKey = `commission_history_${userAddress}_${period}`;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∏—Å—Å–∏–π
            const history = this.generateCommissionHistory(period);

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: history,
                timestamp: Date.now()
            });

            return history;
        } catch (error) {
            console.error('Error fetching commission history:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
     */
    async getLoyaltyLevel(userAddress) {
        try {
            const stats = await this.getReferralStats(userAddress);
            const totalRefs = stats.totalReferrals;

            let level = 'bronze';
            let progress = 0;
            let nextLevel = 'silver';
            let nextLevelRefs = 20;

            if (totalRefs >= 100) {
                level = 'platinum';
                progress = 100;
                nextLevel = null;
                nextLevelRefs = null;
            } else if (totalRefs >= 50) {
                level = 'gold';
                progress = ((totalRefs - 50) / 50) * 100;
                nextLevel = 'platinum';
                nextLevelRefs = 100;
            } else if (totalRefs >= 20) {
                level = 'silver';
                progress = ((totalRefs - 20) / 30) * 100;
                nextLevel = 'gold';
                nextLevelRefs = 50;
            } else {
                level = 'bronze';
                progress = (totalRefs / 20) * 100;
                nextLevel = 'silver';
                nextLevelRefs = 20;
            }

            return {
                level,
                progress: Math.min(progress, 100),
                nextLevel,
                nextLevelRefs,
                currentRefs: totalRefs,
                refsToNext: nextLevelRefs ? nextLevelRefs - totalRefs : 0
            };
        } catch (error) {
            console.error('Error getting loyalty level:', error);
            return {
                level: 'bronze',
                progress: 0,
                nextLevel: 'silver',
                nextLevelRefs: 20,
                currentRefs: 0,
                refsToNext: 20
            };
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
     */
    async generateQRCode(url) {
        try {
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(url)}`;
            return qrApiUrl;
        } catch (error) {
            console.error('Error generating QR code:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
     */
    getPromotionMaterials() {
        return {
            banners: [
                { size: '728x90', url: '/assets/banners/referral_728x90.png' },
                { size: '300x250', url: '/assets/banners/referral_300x250.png' },
                { size: '160x600', url: '/assets/banners/referral_160x600.png' }
            ],
            emailTemplate: `
–ü—Ä–∏–≤–µ—Ç!

–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∫—Ä—É—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π GENESIS –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ!

üöÄ –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:
‚Ä¢ –î–µ–ø–æ–∑–∏—Ç—ã –æ—Ç $25 —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏
‚Ä¢ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã –º–∞–π–Ω–∏–Ω–≥–æ–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å MEV-–±–æ—Ç–∞–º–∏
‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 3 —É—Ä–æ–≤–Ω—è

üí∞ –ü–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: [REFERRAL_LINK]

–ü–æ–ø—Ä–æ–±—É–π, –Ω–µ –ø–æ–∂–∞–ª–µ–µ—à—å!
            `,
            socialPost: `
üöÄ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —Å GENESIS!

üíé –î–µ–ø–æ–∑–∏—Ç—ã, –º–∞–π–Ω–∏–Ω–≥, —Ç–æ—Ä–≥–æ–≤–ª—è, —Ä–µ—Ñ–µ—Ä–∞–ª—ã - –≤—Å–µ –≤ –æ–¥–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
üî• –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–µ—Å—è—Ç–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏
‚ö° –ù–∞—á–Ω–∏ —Å $25 –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ

#GENESIS #–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ #–ø–∞—Å—Å–∏–≤–Ω—ã–π–¥–æ—Ö–æ–¥ #PLEX #BSC

[REFERRAL_LINK]
            `
        };
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    generateRandomCount(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    generateRandomAmount(min, max) {
        return +(Math.random() * (max - min) + min).toFixed(2);
    }

    generateMockReferrals(level, limit) {
        const referrals = [];
        const count = Math.min(this.generateRandomCount(0, limit), limit);

        for (let i = 0; i < count; i++) {
            const refLevel = level === 'all' ? this.generateRandomCount(1, 3) : parseInt(level);
            const deposits = this.generateRandomAmount(25, 2500);
            const commission = deposits * this.getCommissionRate(refLevel) / 100;

            referrals.push({
                address: this.generateMockAddress(),
                level: refLevel,
                deposits: deposits,
                commission: commission,
                registrationDate: this.generateRandomDate(),
                isActive: Math.random() > 0.3
            });
        }

        return referrals.sort((a, b) => new Date(b.registrationDate) - new Date(a.registrationDate));
    }

    generateCommissionHistory(period) {
        const history = [];
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - period);

        const daysCount = period || 365;
        for (let i = 0; i < daysCount; i++) {
            const date = new Date(startDate);
            date.setDate(date.getDate() + i);

            history.push({
                date: date.toISOString().split('T')[0],
                amount: this.generateRandomAmount(0, 20),
                level1: this.generateRandomAmount(0, 10),
                level2: this.generateRandomAmount(0, 5),
                level3: this.generateRandomAmount(0, 2)
            });
        }

        return history;
    }

    generateMockAddress() {
        const chars = '0123456789abcdef';
        let address = '0x';
        for (let i = 0; i < 40; i++) {
            address += chars[Math.floor(Math.random() * chars.length)];
        }
        return address;
    }

    generateRandomDate() {
        const start = new Date(2024, 0, 1);
        const end = new Date();
        const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());
        return new Date(randomTime).toISOString();
    }

    getCommissionRate(level) {
        const rates = { 1: 15, 2: 10, 3: 5 };
        return rates[level] || 0;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        console.log('Referrals API cache cleared');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
     */
    getCacheInfo() {
        return {
            size: this.cache.size,
            timeout: this.cacheTimeout
        };
    }
}
