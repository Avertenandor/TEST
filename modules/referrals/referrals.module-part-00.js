// modules/referrals/referrals.module.js
// –ú–æ–¥—É–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã GENESIS DeFi Platform

import ReferralsState from './referrals.state.js';
import ReferralsAPI from './referrals.api.js';

export default class ReferralsModule {
    constructor() {
        this.name = 'referrals';
        this.version = '1.0.0';
        this.dependencies = ['auth', 'platform-access'];
        
        this.state = null;
        this.api = null;
        this.container = null;
        this.context = null;
        this.subscriptions = [];
    }
    
    async init(context) {
        console.log('üë• Initializing Referrals Module...');
        
        this.context = context;
        this.container = context.container;
        
        try {
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.state = new ReferralsState();
            this.state.load();
            
            // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            const config = context.config || window.store.get('config');
            this.api = new ReferralsAPI(config);
            
            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            await this.loadTemplate();
            
            // 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
            await this.loadStyles();
            
            // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this.initEventHandlers();
            
            // 6. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            this.subscribeToEvents();
            
            // 7. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await this.loadReferralsData();
            
            console.log('‚úÖ Referrals Module initialized successfully');
            
            return this;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Referrals Module:', error);
            throw error;
        }
    }
    
    async loadTemplate() {
        try {
            const response = await fetch('/modules/referrals/referrals.template.html');
            const html = await response.text();
            this.container.innerHTML = html;
        } catch (error) {
            console.error('Failed to load referrals template:', error);
            this.container.innerHTML = this.getFallbackTemplate();
        }
    }
    
    async loadStyles() {
        const existingLink = document.querySelector(`link[data-module="${this.name}"]`);
        if (existingLink) return;
        
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = '/modules/referrals/referrals.styles.css';
        link.dataset.module = this.name;
        document.head.appendChild(link);
    }
    
    initEventHandlers() {
        // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        const copyLinkBtn = this.container.querySelector('#copy-referral-link');
        if (copyLinkBtn) {
            copyLinkBtn.addEventListener('click', () => this.copyReferralLink());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
        const generateLinkBtn = this.container.querySelector('#generate-new-link');
        if (generateLinkBtn) {
            generateLinkBtn.addEventListener('click', () => this.generateNewLink());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
        const withdrawBtn = this.container.querySelector('#withdraw-referral-bonus');
        if (withdrawBtn) {
            withdrawBtn.addEventListener('click', () => this.withdrawReferralBonus());
        }
        
        // –ü–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const searchInput = this.container.querySelector('#referral-search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => this.searchReferrals(e.target.value));
        }
        
        // –§–∏–ª—å—Ç—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const filterButtons = this.container.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const filter = e.target.dataset.filter;
                this.filterReferrals(filter);
            });
        });
        
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —à–∞—Ä–∏–Ω–≥–∞
        const shareButtons = this.container.querySelectorAll('.share-btn');
        shareButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const network = e.target.dataset.network;
                this.shareOnSocialNetwork(network);
            });
        });
    }
    
    async loadReferralsData() {
        try {
            const userAddress = window.store.get('user.address');
            if (!userAddress) return;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
            const referralsData = await this.api.getUserReferrals(userAddress);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state.update(referralsData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUI();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!this.state.getReferralLink()) {
                await this.generateReferralLink();
            }
            
        } catch (error) {
            console.error('Error loading referrals data:', error);
        }
    }
    
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStatistics();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        this.updateReferralsList();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        this.updateReferralTree();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        this.updateReferralLink();
    }
    
    updateStatistics() {
        const stats = this.state.getStatistics();
        
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const totalRefEl = this.container.querySelector('#total-referrals');
        if (totalRefEl) {
            totalRefEl.textContent = stats.totalReferrals;
        }
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        const activeRefEl = this.container.querySelector('#active-referrals');
        if (activeRefEl) {
            activeRefEl.textContent = stats.activeReferrals;
        }
        
        // –û–±—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const totalIncomeEl = this.container.querySelector('#referral-income');
        if (totalIncomeEl) {
            totalIncomeEl.textContent = `${stats.totalIncome} PLEX`;
        }
        
        // –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É
        const availableEl = this.container.querySelector('#available-withdrawal');
        if (availableEl) {
            availableEl.textContent = `${stats.availableWithdrawal} PLEX`;
        }
        
        // –£—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const levelsEl = this.container.querySelector('#referral-levels');
        if (levelsEl) {
            levelsEl.innerHTML = this.renderLevelStatistics(stats.levels);
        }
    }
    
    renderLevelStatistics(levels) {
        return Object.entries(levels).map(([level, count]) => `
            <div class="level-stat">
                <span class="level-label">–£—Ä–æ–≤–µ–Ω—å ${level}:</span>
                <span class="level-count">${count}</span>
            </div>
        `).join('');
    }
    
    updateReferralsList() {
        const listContainer = this.container.querySelector('#referrals-list');
        if (!listContainer) return;
        
        const referrals = this.state.getReferrals();
        
        if (referrals.length === 0) {
            listContainer.innerHTML = `
                <div class="no-referrals">
                    <div class="no-referrals-icon">üë•</div>
                    <div class="no-referrals-text">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</div>
                    <div class="no-referrals-hint">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏</div>
                </div>
            `;
            return;
        }
        
        listContainer.innerHTML = referrals.map(referral => this.renderReferralCard(referral)).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        listContainer.querySelectorAll('.referral-card').forEach(card => {
            card.addEventListener('click', () => {
                const refId = card.dataset.referralId;
                this.showReferralDetails(refId);
            });
        });
    }
    
    renderReferralCard(referral) {
        const statusClass = referral.isActive ? 'active' : 'inactive';
        const statusText = referral.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
        
        return `
            <div class="referral-card ${statusClass}" data-referral-id="${referral.id}">
                <div class="referral-avatar">
                    ${this.getAvatarIcon(referral.address)}
                </div>
                <div class="referral-info">
                    <div class="referral-address">${this.formatAddress(referral.address)}</div>
                    <div class="referral-meta">
                        <span class="referral-level">–£—Ä–æ–≤–µ–Ω—å ${referral.level}</span>
                        <span class="referral-date">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${this.formatDate(referral.joinDate)}</span>
                    </div>
                </div>
                <div class="referral-stats">
                    <div class="stat-item">
                        <span class="stat-label">–î–µ–ø–æ–∑–∏—Ç—ã:</span>
                        <span class="stat-value">${referral.deposits}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–î–æ—Ö–æ–¥:</span>
                        <span class="stat-value">${referral.income} PLEX</span>
                    </div>
                </div>
                <div class="referral-status">
                    <span class="status-badge ${statusClass}">${statusText}</span>
                </div>
            </div>
        `;
    }
    
    updateReferralTree() {
        const treeContainer = this.container.querySelector('#referral-tree');
        if (!treeContainer) return;
        
        const treeData = this.state.getReferralTree();
        
        if (!treeData || treeData.length === 0) {
            treeContainer.innerHTML = `
                <div class="empty-tree">
                    <p>–î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—É—Å—Ç–æ</p>
                </div>
            `;
            return;
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –¥–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        treeContainer.innerHTML = this.renderTree(treeData);
    }
    
    renderTree(nodes, level = 1) {
        return `
            <ul class="tree-level level-${level}">
                ${nodes.map(node => `
                    <li class="tree-node">
                        <div class="node-content">
                            <div class="node-avatar">${this.getAvatarIcon(node.address)}</div>
                            <div class="node-info">
                                <div class="node-address">${this.formatAddress(node.address)}</div>
                                <div class="node-stats">
                                    <span class="node-deposits">${node.deposits} –¥–µ–ø–æ–∑–∏—Ç–æ–≤</span>
                                    <span class="node-income">+${node.income} PLEX</span>
                                </div>
                            </div>
                        </div>
                        ${node.children && node.children.length > 0 ? 
                            this.renderTree(node.children, level + 1) : ''
                        }
                    </li>
                `).join('')}
            </ul>
        `;
    }
    
    updateReferralLink() {
        const linkInput = this.container.querySelector('#referral-link-input');
        const qrContainer = this.container.querySelector('#referral-qr-code');
        
        const referralLink = this.state.getReferralLink();
        
        if (linkInput && referralLink) {
            linkInput.value = referralLink;
        }
        
        if (qrContainer && referralLink) {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
            qrContainer.innerHTML = `
                <div class="qr-placeholder">
                    <p>QR –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏</p>
                </div>
            `;
        }
    }
    
    async generateReferralLink() {
        try {
            const userAddress = window.store.get('user.address');
            if (!userAddress) return;
            
            const result = await this.api.generateReferralLink(userAddress);
            
            if (result.success) {
                this.state.setReferralLink(result.link);
                this.updateReferralLink();
                this.showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞', 'success');
            }
            
        } catch (error) {
            console.error('Error generating referral link:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏', 'error');
        }
    }
    
    async copyReferralLink() {
        const referralLink = this.state.getReferralLink();
        
        if (!referralLink) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', 'warning');
            return;
        }
        
        try {
            await navigator.clipboard.writeText(referralLink);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            const copyBtn = this.container.querySelector('#copy-referral-link');
            if (copyBtn) {
                const originalText = copyBtn.textContent;
                copyBtn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                copyBtn.classList.add('copied');
                
                setTimeout(() => {
                    copyBtn.textContent = originalText;
                    copyBtn.classList.remove('copied');
                }, 2000);
            }
            
            this.showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞', 'success');
            
        } catch (error) {
            console.error('Error copying link:', error);
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
        }
    }
    
    async generateNewLink() {
        const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
        
        if (!confirmed) return;
        
        await this.generateReferralLink();
    }
    
    async withdrawReferralBonus() {
        try {
            const available = this.state.getAvailableWithdrawal();
            
            if (available < 100) {
                this.showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100 PLEX', 'warning');
                return;
            }
            
            const confirmed = confirm(`–í—ã–≤–µ—Å—Ç–∏ ${available} PLEX –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫?`);
            if (!confirmed) return;
            
            const result = await this.api.withdrawReferralBonus(available);
            
            if (result.success) {
                this.state.resetAvailableWithdrawal();
                this.updateStatistics();
                this.showNotification(`–£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ ${available} PLEX`, 'success');
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                if (this.context.eventBus) {
                    this.context.eventBus.emit('referral:withdrawn', {
                        amount: available,
                        txHash: result.txHash
                    });
                }
            }
            
        } catch (error) {
            console.error('Error withdrawing bonus:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –±–æ–Ω—É—Å–∞', 'error');
        }
    }
    
    searchReferrals(query) {
        const referrals = this.state.getReferrals();
        const filtered = referrals.filter(ref => 
            ref.address.toLowerCase().includes(query.toLowerCase())
        );
        
        this.renderFilteredReferrals(filtered);
    }
    
    filterReferrals(filter) {
        const referrals = this.state.getReferrals();
        let filtered = referrals;
        
        switch(filter) {
            case 'active':
                filtered = referrals.filter(ref => ref.isActive);
                break;
            case 'inactive':
                filtered = referrals.filter(ref => !ref.isActive);
                break;
            case 'level1':
                filtered = referrals.filter(ref => ref.level === 1);
                break;
            case 'level2':
                filtered = referrals.filter(ref => ref.level === 2);
                break;
            case 'level3':
