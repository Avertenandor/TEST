// modules/home/ctaGrid/index.ts
// –ú–æ–¥—É–ª—å CTA Grid –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

import { Module } from '../../../core/router';
import './ctaGrid.module.css';

export interface CtaItem {
    id: string;
    title: string;
    description: string;
    icon: string;
    link: string;
    color: string;
    external?: boolean;
}

export interface CtaGridProps {
    items?: CtaItem[];
}

export class CtaGridModule implements Module {
    id = 'ctaGrid';
    private element: HTMLElement | null = null;
    private props: CtaGridProps;

    constructor(props: CtaGridProps = {}) {
        this.props = {
            items: [
                {
                    id: 'buy-plex',
                    title: '–ö—É–ø–∏—Ç—å PLEX',
                    description: '–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã PLEX ONE –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ',
                    icon: 'üí∞',
                    link: '/auth',
                    color: '#e74c3c'
                },
                {
                    id: 'install-app',
                    title: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    description: '–°–∫–∞—á–∞–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞',
                    icon: 'üì±',
                    link: '#',
                    color: '#3498db',
                    external: true
                },
                {
                    id: 'analytics',
                    title: '–ì—Ä–∞—Ñ–∏–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                    description: '–ò–∑—É—á–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
                    icon: 'üìà',
                    link: '/analytics',
                    color: '#27ae60'
                },
                {
                    id: 'deposits',
                    title: '–°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç',
                    description: '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
                    icon: 'üè¶',
                    link: '/deposits',
                    color: '#f39c12'
                },
                {
                    id: 'portfolio',
                    title: '–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                    description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –¥–æ—Ö–æ–¥—ã',
                    icon: 'üíº',
                    link: '/portfolio',
                    color: '#9b59b6'
                },
                {
                    id: 'terminal',
                    title: '–¢–µ—Ä–º–∏–Ω–∞–ª',
                    description: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º —Ç–æ—Ä–≥–æ–≤–ª–∏',
                    icon: 'üíª',
                    link: '/terminal',
                    color: '#34495e'
                }
            ],
            ...props
        };
    }

    mount(el: HTMLElement, context?: any): void {
        this.element = el;

        el.innerHTML = `
      <section class="cta-grid">
        <div class="cta-grid__container">
          <div class="cta-grid__header">
            <h2 class="cta-grid__title">–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h2>
            <p class="cta-grid__subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
          </div>
          
          <div class="cta-grid__content">
            ${this.props.items!.map(item => `
              <div class="cta-grid__item" data-item-id="${item.id}">
                <div class="cta-grid__item-icon" style="background: ${item.color}">
                  ${item.icon}
                </div>
                <div class="cta-grid__item-content">
                  <h3 class="cta-grid__item-title">${item.title}</h3>
                  <p class="cta-grid__item-description">${item.description}</p>
                </div>
                <div class="cta-grid__item-arrow">
                  <span>‚Üí</span>
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      </section>
    `;

        this.bindEvents();
    }

    unmount(): void {
        if (this.element) {
            this.element.innerHTML = '';
            this.element = null;
        }
    }

    private bindEvents(): void {
        if (!this.element) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        const items = this.element.querySelectorAll('.cta-grid__item');
        items.forEach(item => {
            item.addEventListener('click', (e) => {
                const target = e.currentTarget as HTMLElement;
                const itemId = target.dataset.itemId;
                const ctaItem = this.props.items!.find(item => item.id === itemId);

                if (ctaItem) {
                    this.handleItemClick(ctaItem);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã
            item.addEventListener('mouseenter', () => {
                item.classList.add('cta-grid__item--hover');
            });

            item.addEventListener('mouseleave', () => {
                item.classList.remove('cta-grid__item--hover');
            });
        });
    }

    private handleItemClick(item: CtaItem): void {
        if (item.external) {
            // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            window.open(item.link, '_blank');
        } else {
            // –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if (item.link.startsWith('#')) {
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è–∫–æ—Ä—é
                const targetElement = document.querySelector(item.link);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                }
            } else {
                // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
                window.location.href = item.link;
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
        this.trackEvent('cta_click', {
            item_id: item.id,
            item_title: item.title,
            link: item.link
        });
    }

    private trackEvent(eventName: string, data: any): void {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        console.log(`Event: ${eventName}`, data);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ event bus –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof window !== 'undefined' && (window as any).eventBus) {
            (window as any).eventBus.emit('analytics:event', {
                event: eventName,
                data: data,
                timestamp: Date.now()
            });
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—Å–æ–≤
    updateProps(newProps: Partial<CtaGridProps>): void {
        this.props = { ...this.props, ...newProps };
        if (this.element) {
            this.mount(this.element);
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    addItem(item: CtaItem): void {
        this.props.items!.push(item);
        if (this.element) {
            this.mount(this.element);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    removeItem(itemId: string): void {
        const index = this.props.items!.findIndex(item => item.id === itemId);
        if (index !== -1) {
            this.props.items!.splice(index, 1);
            if (this.element) {
                this.mount(this.element);
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å router
export default CtaGridModule;
