// modules/terminal/index.js
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã GENESIS

export default class TerminalModule {
    constructor() {
        this.name = 'terminal';
        this.version = '2.0.0';
        this.dependencies = [];
        this.isLoaded = false;
        this.container = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥—É–ª—è (container, etc.)
     */
    async init(context) {
        if (this.isLoaded) return;

        try {
            this.container = context.container;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —à–∞–±–ª–æ–Ω
            const template = await this.loadTemplate();
            this.container.innerHTML = template;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏
            await this.loadStyles();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            setTimeout(() => {
                if (window.CabinetTerminal) {
                    window.CabinetTerminal.init();
                    this.setupEventListeners();
                }
            }, 100);
            
            this.isLoaded = true;
            console.log('üöÄ Terminal module initialized successfully');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
            if (window.eventBus) {
                window.eventBus.emit('terminal:loaded');
            }
            
        } catch (error) {
            console.error('‚ùå Failed to initialize terminal module:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ HTML —à–∞–±–ª–æ–Ω–∞
     */
    async loadTemplate() {
        try {
            const response = await fetch('./modules/terminal/terminal.template.html');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return await response.text();
        } catch (error) {
            console.error('Failed to load terminal template:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return `
                <div class="terminal-container">
                    <div class="terminal-error">
                        <h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞</h3>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: ${error.message}</p>
                    </div>
                </div>
            `;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
     */
    async loadStyles() {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
            const existingLink = document.querySelector('link[href*="terminal.styles.css"]');
            if (existingLink) {
                resolve();
                return;
            }

            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = './modules/terminal/terminal.styles.css';
            link.onload = () => resolve();
            link.onerror = () => {
                console.warn('Failed to load terminal styles, continuing without them');
                resolve(); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç–∏–ª—è–º–∏
            };
            document.head.appendChild(link);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!window.eventBus) return;

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        window.eventBus.on('user:balance:updated', (data) => {
            this.onBalanceUpdate(data);
        });

        window.eventBus.on('deposits:updated', (data) => {
            this.onDepositsUpdate(data);
        });

        window.eventBus.on('transaction:completed', (data) => {
            this.onTransactionComplete(data);
        });

        window.eventBus.on('api:call', (data) => {
            this.onApiCall(data.endpoint, data.data);
        });

        window.eventBus.on('error', (error) => {
            this.onError(error);
        });

        window.eventBus.on('system:event', (data) => {
            this.onSystemEvent(data.event, data.data);
        });
    }

    /**
     * –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
     */
    log(message, type = 'info') {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log(message, type);
        }
    }

    executeCommand(command) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.executeCommand(command);
        }
    }

    getStats() {
        if (window.CabinetTerminal) {
            return window.CabinetTerminal.stats;
        }
        return null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
     */
    onBalanceUpdate(balanceData) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log('üí∞ Balance updated', 'success', balanceData);
        }
    }

    onDepositsUpdate(depositsData) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log('üìä Deposits updated', 'info', depositsData);
        }
    }

    onTransactionComplete(txData) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log(`üí∏ Transaction ${txData.type}: ${txData.amount}`, 'success', txData);
            window.CabinetTerminal.stats.transactions++;
        }
    }

    onApiCall(endpoint, data) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log(`üîó API: ${endpoint}`, 'api', data);
            window.CabinetTerminal.stats.apiCalls++;
        }
    }

    onError(error) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log(`‚ùå Error: ${error.message}`, 'error', error);
            window.CabinetTerminal.stats.errorCount++;
        }
    }

    onSystemEvent(event, data) {
        if (window.CabinetTerminal) {
            window.CabinetTerminal.log(`‚öôÔ∏è System: ${event}`, 'system', data);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (window.eventBus) {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            window.eventBus.off('user:balance:updated');
            window.eventBus.off('deposits:updated');
            window.eventBus.off('transaction:completed');
            window.eventBus.off('api:call');
            window.eventBus.off('error');
            window.eventBus.off('system:event');
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (this.container) {
            this.container.innerHTML = '';
        }

        this.isLoaded = false;
        console.log('üóëÔ∏è Terminal module destroyed');
    }
}
