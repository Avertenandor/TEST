// modules/experience/experience.module.js
// –ú–æ–¥—É–ª—å —Å—Ç–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GENESIS - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–∏—Å—Ç–µ–º–µ

export default class ExperienceModule {
    constructor() {
        this.name = 'experience';
        this.version = '1.0.0';
        this.dependencies = ['auth'];
        
        this.container = null;
        this.context = null;
        this.joinDate = null;
        this.updateInterval = null;
    }
    
    async init(context) {
        console.log('üìÖ Initializing Experience Module...');
        
        this.context = context;
        this.container = context.container;
        
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            await this.loadTemplate();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
            await this.loadStyles();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–∂–µ
            this.initExperienceData();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            this.updateDisplay();
            
            // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.startAutoUpdate();
            
            console.log('‚úÖ Experience Module initialized successfully');
            return this;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Experience Module:', error);
            throw error;
        }
    }
    
    async loadTemplate() {
        if (this.container) {
            this.container.innerHTML = `
                <div class="experience-container">
                    <div class="page-header">
                        <h2 class="page-title">üìÖ –°—Ç–∞–∂ –≤ —Å–∏—Å—Ç–µ–º–µ</h2>
                        <p class="page-subtitle">–í–∞—à–µ –≤—Ä–µ–º—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ GENESIS</p>
                    </div>
                    
                    <div class="experience-main-card">
                        <div class="experience-display">
                            <div class="experience-icon">‚è±Ô∏è</div>
                            <div class="experience-content">
                                <h3>–í—ã —Å –Ω–∞–º–∏ —É–∂–µ:</h3>
                                <div class="experience-time">
                                    <span id="exp-days" class="time-value">0</span>
                                    <span class="time-label">–¥–Ω–µ–π</span>
                                    <span id="exp-hours" class="time-value">0</span>
                                    <span class="time-label">—á–∞—Å–æ–≤</span>
                                    <span id="exp-minutes" class="time-value">0</span>
                                    <span class="time-label">–º–∏–Ω—É—Ç</span>
                                </div>
                                <div class="join-date">
                                    –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <span id="join-date-display">-</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="experience-milestones">
                            <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞–∂—É</h3>
                            <div class="milestones-grid">
                                <div class="milestone-card" data-days="1">
                                    <div class="milestone-icon">üå±</div>
                                    <div class="milestone-title">–ù–æ–≤–∏—á–æ–∫</div>
                                    <div class="milestone-requirement">1 –¥–µ–Ω—å</div>
                                    <div class="milestone-reward">+1 USDT</div>
                                </div>
                                <div class="milestone-card" data-days="7">
                                    <div class="milestone-icon">üìà</div>
                                    <div class="milestone-title">–ê–∫—Ç–∏–≤–Ω—ã–π</div>
                                    <div class="milestone-requirement">7 –¥–Ω–µ–π</div>
                                    <div class="milestone-reward">+5 USDT</div>
                                </div>
                                <div class="milestone-card" data-days="30">
                                    <div class="milestone-icon">‚≠ê</div>
                                    <div class="milestone-title">–û–ø—ã—Ç–Ω—ã–π</div>
                                    <div class="milestone-requirement">30 –¥–Ω–µ–π</div>
                                    <div class="milestone-reward">+15 USDT</div>
                                </div>
                                <div class="milestone-card" data-days="90">
                                    <div class="milestone-icon">üíé</div>
                                    <div class="milestone-title">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª</div>
                                    <div class="milestone-requirement">90 –¥–Ω–µ–π</div>
                                    <div class="milestone-reward">+50 USDT</div>
                                </div>
                                <div class="milestone-card" data-days="180">
                                    <div class="milestone-icon">üèÖ</div>
                                    <div class="milestone-title">–≠–∫—Å–ø–µ—Ä—Ç</div>
                                    <div class="milestone-requirement">180 –¥–Ω–µ–π</div>
                                    <div class="milestone-reward">+100 USDT</div>
                                </div>
                                <div class="milestone-card" data-days="365">
                                    <div class="milestone-icon">üëë</div>
                                    <div class="milestone-title">–õ–µ–≥–µ–Ω–¥–∞</div>
                                    <div class="milestone-requirement">365 –¥–Ω–µ–π</div>
                                    <div class="milestone-reward">+500 USDT</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="experience-benefits">
                            <h3>üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å—Ç–∞–∂–∞</h3>
                            <ul>
                                <li>üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ</li>
                                <li>‚ö° –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</li>
                                <li>üèÖ –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å –∏ —Ä–∞–Ω–≥ –≤ —Å–∏—Å—Ç–µ–º–µ</li>
                                <li>üí∞ –ë–æ–Ω—É—Å—ã –∑–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</li>
                                <li>üîì –î–æ—Å—Ç—É–ø –∫ VIP —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</li>
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        }
    }
    
    async loadStyles() {
        const existingLink = document.querySelector(`link[data-module="${this.name}"]`);
        if (existingLink) return;
        
        const styles = `
            <style data-module="${this.name}">
                .experience-container {
                    padding: 2rem;
                    max-width: 1200px;
                    margin: 0 auto;
                }
                
                .experience-main-card {
                    background: var(--bg-secondary);
                    border-radius: 16px;
                    padding: 2rem;
                    border: 1px solid var(--border-color);
                }
                
                .experience-display {
                    display: flex;
                    align-items: center;
                    gap: 2rem;
                    padding: 2rem;
                    background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(0, 212, 255, 0.1));
                    border-radius: 12px;
                    margin-bottom: 2rem;
                }
                
                .experience-icon {
                    font-size: 4rem;
                }
                
                .experience-content h3 {
                    color: var(--text-primary);
                    margin-bottom: 1rem;
                }
                
                .experience-time {
                    display: flex;
                    align-items: baseline;
                    gap: 0.5rem;
                    margin-bottom: 1rem;
                }
                
                .time-value {
                    font-size: 2.5rem;
                    font-weight: 700;
                    color: var(--primary-color);
                    font-family: 'Orbitron', monospace;
                }
                
                .time-label {
                    color: var(--text-secondary);
                    margin-right: 1rem;
                }
                
                .join-date {
                    color: var(--text-secondary);
                    font-size: 0.9rem;
                }
                
                #join-date-display {
                    color: var(--text-primary);
                    font-weight: 600;
                }
                
                .experience-milestones {
                    margin: 2rem 0;
                }
                
                .experience-milestones h3 {
                    color: var(--primary-color);
                    margin-bottom: 1.5rem;
                }
                
                .milestones-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    gap: 1rem;
                }
                
                .milestone-card {
                    background: var(--bg-primary);
                    padding: 1.5rem;
                    border-radius: 12px;
                    text-align: center;
                    border: 2px solid var(--border-color);
                    transition: all 0.3s ease;
                }
                
                .milestone-card.achieved {
                    border-color: var(--success-color);
                    background: rgba(0, 255, 65, 0.1);
                }
                
                .milestone-card:hover {
                    transform: translateY(-4px);
                    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
                }
                
                .milestone-icon {
                    font-size: 2rem;
                    margin-bottom: 0.5rem;
                }
                
                .milestone-title {
                    color: var(--text-primary);
                    font-weight: 600;
                    margin-bottom: 0.5rem;
                }
                
                .milestone-requirement {
                    color: var(--text-secondary);
                    font-size: 0.9rem;
                    margin-bottom: 0.5rem;
                }
                
                .milestone-reward {
                    color: var(--success-color);
                    font-weight: 700;
                }
                
                .experience-benefits {
                    background: var(--bg-primary);
                    padding: 1.5rem;
                    border-radius: 12px;
                    margin-top: 2rem;
                }
                
                .experience-benefits h3 {
                    color: var(--primary-color);
                    margin-bottom: 1rem;
                }
                
                .experience-benefits ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
                
                .experience-benefits li {
                    padding: 0.5rem 0;
                    color: var(--text-secondary);
                }
                
                @media (max-width: 768px) {
                    .experience-display {
                        flex-direction: column;
                        text-align: center;
                    }
                    
                    .experience-time {
                        flex-direction: column;
                        align-items: center;
                    }
                    
                    .milestones-grid {
                        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
                    }
                }
            </style>
        `;
        
        document.head.insertAdjacentHTML('beforeend', styles);
    }
    
    initExperienceData() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        let joinDate = localStorage.getItem('genesis_join_date');
        
        if (!joinDate) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é
            joinDate = new Date().toISOString();
            localStorage.setItem('genesis_join_date', joinDate);
        }
        
        this.joinDate = new Date(joinDate);
    }
    
    updateDisplay() {
        if (!this.container) return;
        
        const now = new Date();
        const diff = now - this.joinDate;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const daysEl = this.container.querySelector('#exp-days');
        const hoursEl = this.container.querySelector('#exp-hours');
        const minutesEl = this.container.querySelector('#exp-minutes');
        const joinDateEl = this.container.querySelector('#join-date-display');
        
        if (daysEl) daysEl.textContent = days;
        if (hoursEl) hoursEl.textContent = hours;
        if (minutesEl) minutesEl.textContent = minutes;
        if (joinDateEl) {
            joinDateEl.textContent = this.joinDate.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.updateMilestones(days);
    }
    
    updateMilestones(currentDays) {
        const milestones = this.container?.querySelectorAll('.milestone-card');
        
        milestones?.forEach(milestone => {
            const requiredDays = parseInt(milestone.dataset.days);
            if (currentDays >= requiredDays) {
                milestone.classList.add('achieved');
            } else {
                milestone.classList.remove('achieved');
            }
        });
    }
    
    startAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.updateInterval = setInterval(() => {
            this.updateDisplay();
        }, 60000);
    }
    
    destroy() {
        console.log('üßπ Destroying Experience Module...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        const styles = document.querySelector(`style[data-module="${this.name}"]`);
        if (styles) styles.remove();
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if (this.container) {
            this.container.innerHTML = '';
        }
        
        console.log('‚úÖ Experience Module destroyed');
    }
}
