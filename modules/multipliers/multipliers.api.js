// modules/multipliers/multipliers.api.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π

export default class MultipliersAPI {
    constructor(bscApi) {
        this.bscApi = bscApi;
        this.cache = new Map();
        this.cacheTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.timers = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
     */
    async getActiveMultipliers(userAddress) {
        const cacheKey = `active_multipliers_${userAddress}`;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            const activeMultipliers = [
                {
                    id: 'fire_boost',
                    name: '–û–≥–Ω–µ–Ω–Ω—ã–π',
                    icon: 'üî•',
                    multiplier: 2.5,
                    remainingTime: 4 * 3600 + 23 * 60, // 4—á 23–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    totalDuration: 6 * 3600, // 6 —á–∞—Å–æ–≤
                    type: 'active',
                    color: 'success'
                },
                {
                    id: 'diamond_boost',
                    name: '–ê–ª–º–∞–∑–Ω—ã–π',
                    icon: 'üíé',
                    multiplier: 1.8,
                    remainingTime: 12 * 3600 + 45 * 60, // 12—á 45–º
                    totalDuration: 24 * 3600, // 24 —á–∞—Å–∞
                    type: 'secondary',
                    color: 'secondary'
                },
                {
                    id: 'star_boost',
                    name: '–ó–≤–µ–∑–¥–Ω—ã–π',
                    icon: '‚≠ê',
                    multiplier: 3.2,
                    remainingTime: 23 * 3600 + 17 * 60, // 23—á 17–º
                    totalDuration: 24 * 3600, // 24 —á–∞—Å–∞
                    type: 'warning',
                    color: 'warning'
                }
            ];

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: activeMultipliers,
                timestamp: Date.now()
            });

            return activeMultipliers;
        } catch (error) {
            console.error('Error fetching active multipliers:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
     */
    async getMultiplierEffect(userAddress) {
        try {
            const activeMultipliers = await this.getActiveMultipliers(userAddress);
            const baseIncome = 45.20; // –ë–∞–∑–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            let totalMultiplier = 1;
            activeMultipliers.forEach(mult => {
                totalMultiplier *= mult.multiplier;
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–æ-–±–æ–Ω—É—Å—ã
            const comboBonus = this.calculateComboBonus(activeMultipliers);
            totalMultiplier *= (1 + comboBonus / 100);

            const boostedIncome = baseIncome * totalMultiplier;

            return {
                baseIncome,
                boostedIncome,
                totalMultiplier: Math.round(totalMultiplier * 100) / 100,
                comboBonus,
                increase: Math.round(((boostedIncome - baseIncome) / baseIncome) * 100)
            };
        } catch (error) {
            console.error('Error calculating multiplier effect:', error);
            return {
                baseIncome: 45.20,
                boostedIncome: 45.20,
                totalMultiplier: 1,
                comboBonus: 0,
                increase: 0
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ
     */
    getAvailableMultipliers() {
        return [
            {
                id: 'turbo',
                name: '–¢—É—Ä–±–æ x2.0',
                icon: 'üöÄ',
                multiplier: 2.0,
                duration: 6 * 3600, // 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                priceUSD: 25,
                pricePLEX: 500,
                description: '–£–¥–≤–∞–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ 6 —á–∞—Å–æ–≤',
                category: 'short',
                color: 'success'
            },
            {
                id: 'lightning',
                name: '–ú–æ–ª–Ω–∏—è x4.0',
                icon: '‚ö°',
                multiplier: 4.0,
                duration: 3 * 3600, // 3 —á–∞—Å–∞
                priceUSD: 45,
                pricePLEX: 900,
                description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ 4 —Ä–∞–∑–∞ –Ω–∞ 3 —á–∞—Å–∞',
                category: 'power',
                color: 'primary'
            },
            {
                id: 'golden',
                name: '–ó–æ–ª–æ—Ç–æ–π x1.5',
                icon: 'üí∞',
                multiplier: 1.5,
                duration: 24 * 3600, // 24 —á–∞—Å–∞
                priceUSD: 35,
                pricePLEX: 700,
                description: '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –Ω–∞ 50% –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫',
                category: 'stable',
                color: 'warning'
            },
            {
                id: 'mega',
                name: '–ú–µ–≥–∞ x10.0',
                icon: 'üåü',
                multiplier: 10.0,
                duration: 1 * 3600, // 1 —á–∞—Å
                priceUSD: 100,
                pricePLEX: 2000,
                description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –≤ 10 —Ä–∞–∑ –Ω–∞ —á–∞—Å',
                category: 'premium',
                color: 'error',
                isPremium: true
            }
        ];
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
     */
    async activateMultiplier(userAddress, multiplierId, paymentMethod = 'PLEX') {
        try {
            const multipliers = this.getAvailableMultipliers();
            const multiplier = multipliers.find(m => m.id === multiplierId);
            
            if (!multiplier) {
                throw new Error('–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–∏–º–∏—Ç–∞—Ü–∏—è)
            const userBalance = await this.getUserBalance(userAddress);
            const price = paymentMethod === 'USD' ? multiplier.priceUSD : multiplier.pricePLEX;
            
            if (paymentMethod === 'PLEX' && userBalance.plex < price) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PLEX —Ç–æ–∫–µ–Ω–æ–≤');
            }
            
            if (paymentMethod === 'USD' && userBalance.usd < price) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ USD');
            }

            // –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            const activationData = {
                id: `${multiplierId}_${Date.now()}`,
                multiplierId,
                userAddress,
                activatedAt: Date.now(),
                expiresAt: Date.now() + multiplier.duration * 1000,
                paymentMethod,
                pricePaid: price,
                transactionHash: this.generateMockTxHash()
            };

            // –û—á–∏—â–∞–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
            this.cache.delete(`active_multipliers_${userAddress}`);

            return {
                success: true,
                activation: activationData,
                message: `–ú–Ω–æ–∂–∏—Ç–µ–ª—å "${multiplier.name}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`
            };

        } catch (error) {
            console.error('Error activating multiplier:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
     */
    async getMultiplierHistory(userAddress, period = 30) {
        const cacheKey = `multiplier_history_${userAddress}_${period}`;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout * 2) {
                    return cached.data;
                }
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            const history = this.generateMockHistory(period);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: history,
                timestamp: Date.now()
            });

            return history;
        } catch (error) {
            console.error('Error fetching multiplier history:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º
     */
    async getMultiplierStats(userAddress, period = 30) {
        try {
            const history = await this.getMultiplierHistory(userAddress, period);
            
            const stats = {
                totalActivated: history.length,
                totalSpent: history.reduce((sum, item) => sum + item.cost, 0),
                totalEarned: history.reduce((sum, item) => sum + item.earned, 0),
                averageMultiplier: history.length > 0 ? 
                    history.reduce((sum, item) => sum + item.multiplier, 0) / history.length : 0,
                mostUsed: this.getMostUsedMultiplier(history),
                roi: 0
            };

            // –í—ã—á–∏—Å–ª—è–µ–º ROI
            if (stats.totalSpent > 0) {
                stats.roi = Math.round(((stats.totalEarned - stats.totalSpent) / stats.totalSpent) * 100);
            }

            return stats;
        } catch (error) {
            console.error('Error calculating multiplier stats:', error);
            return {
                totalActivated: 0,
                totalSpent: 0,
                totalEarned: 0,
                averageMultiplier: 0,
                mostUsed: null,
                roi: 0
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserBalance(userAddress) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
        return {
            plex: this.generateRandomAmount(500, 5000),
            usd: this.generateRandomAmount(100, 1000)
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º
     */
    getMultiplierRecommendations(userStats, currentTime = new Date()) {
        const recommendations = [];
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const hour = currentTime.getHours();
        if (hour >= 9 && hour <= 11) {
            recommendations.push({
                type: 'timing',
                title: '–£—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Å—Ç',
                description: '–°–µ–π—á–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ—â–Ω—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π',
                suggested: ['lightning', 'mega']
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (userStats.totalActivated < 5) {
            recommendations.push({
                type: 'beginner',
                title: '–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
                description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
                suggested: ['golden', 'turbo']
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ ROI
        if (userStats.roi < 50) {
            recommendations.push({
                type: 'optimization',
                title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏',
                description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è ROI',
                suggested: ['combo']
            });
        }

        return recommendations;
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    calculateComboBonus(activeMultipliers) {
        if (activeMultipliers.length < 2) return 0;
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–±–æ-–±–æ–Ω—É—Å–æ–≤
        const types = activeMultipliers.map(m => m.type);
        
        if (types.includes('active') && types.includes('secondary')) {
            return 10; // +10% –∑–∞ –∫–æ–º–±–æ –û–≥–æ–Ω—å + –ê–ª–º–∞–∑
        }
        
        if (types.includes('warning') && activeMultipliers.length >= 3) {
            return 25; // +25% –∑–∞ —Ç—Ä–æ–π–Ω–æ–µ –∫–æ–º–±–æ
        }
        
        return 5; // –ë–∞–∑–æ–≤—ã–π –∫–æ–º–±–æ-–±–æ–Ω—É—Å –∑–∞ –ª—é–±—ã–µ 2+ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    }

    generateMockHistory(days) {
        const history = [];
        const multipliers = this.getAvailableMultipliers();
        const count = Math.floor(Math.random() * days + 5);

        for (let i = 0; i < count; i++) {
            const multiplier = multipliers[Math.floor(Math.random() * multipliers.length)];
            const activatedAt = new Date();
            activatedAt.setDate(activatedAt.getDate() - Math.floor(Math.random() * days));
            
            const cost = Math.random() > 0.6 ? multiplier.priceUSD : multiplier.pricePLEX * 0.05; // PLEX –≤ USD
            const earned = cost * (1.5 + Math.random() * 2); // ROI –æ—Ç 150% –¥–æ 350%

            history.push({
                id: `hist_${i}`,
                multiplierId: multiplier.id,
                name: multiplier.name,
                icon: multiplier.icon,
                multiplier: multiplier.multiplier,
                duration: multiplier.duration,
                cost: Math.round(cost * 100) / 100,
                earned: Math.round(earned * 100) / 100,
                activatedAt: activatedAt.toISOString(),
                paymentMethod: Math.random() > 0.6 ? 'USD' : 'PLEX'
            });
        }

        return history.sort((a, b) => new Date(b.activatedAt) - new Date(a.activatedAt));
    }

    getMostUsedMultiplier(history) {
        if (history.length === 0) return null;
        
        const counts = {};
        history.forEach(item => {
            counts[item.multiplierId] = (counts[item.multiplierId] || 0) + 1;
        });
        
        const mostUsedId = Object.keys(counts).reduce((a, b) => 
            counts[a] > counts[b] ? a : b
        );
        
        const multipliers = this.getAvailableMultipliers();
        return multipliers.find(m => m.id === mostUsedId);
    }

    generateRandomAmount(min, max) {
        return Math.round((Math.random() * (max - min) + min) * 100) / 100;
    }

    generateMockTxHash() {
        const chars = '0123456789abcdef';
        let hash = '0x';
        for (let i = 0; i < 64; i++) {
            hash += chars[Math.floor(Math.random() * chars.length)];
        }
        return hash;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        
        if (hours > 0) {
            return `${hours}—á ${minutes}–º`;
        }
        return `${minutes}–º`;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        console.log('Multipliers API cache cleared');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
     */
    startTimerUpdates(callback) {
        const interval = setInterval(async () => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            this.cache.delete('active_multipliers_current');
            if (callback) callback();
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        return interval;
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
     */
    stopTimerUpdates(interval) {
        if (interval) {
            clearInterval(interval);
        }
    }
}
