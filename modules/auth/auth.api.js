// modules/auth/auth.api.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ BSCScan

class AuthAPI {
    constructor(config) {
        this.config = config;
        this.bscApiKey = config?.bscscan?.apiKeys?.PRIMARY || config?.api?.bscScanKey || '';
        this.plexContract = config?.plex?.address || config?.contracts?.PLEX_ONE || '';
        this.systemAddress = config?.addresses?.system || config?.systemAddress || '';
        this.baseUrl = config?.bscscan?.apiUrl || 'https://api.bscscan.com/api';
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 PLEX –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å
     * @param {string} userAddress - BSC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
     */
    async checkAuthorization(userAddress) {
        console.log('üîç Checking authorization for:', userAddress);
        
        // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        if (this.isTestMode()) {
            const testAddresses = [
                '0x742d35Cc6634C0532925a3b844Bc9e7595f2bD8e',
                '0x1234567890abcdef1234567890abcdef12345678',
                '0x1234567890123456789012345678901234567890'
            ];
            
            if (testAddresses.some(addr => addr.toLowerCase() === userAddress.toLowerCase())) {
                console.log('‚úÖ Test mode: Authorization granted for test address');
                return true;
            }
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const tokenTxResponse = await this.getTokenTransactions(userAddress);
            
            if (!tokenTxResponse.result || tokenTxResponse.result.length === 0) {
                console.log('‚ÑπÔ∏è No token transactions found');
                return false;
            }
            
            // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (1 PLEX –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥—Ä–µ—Å—É)
            const authPayment = tokenTxResponse.result.find(tx => {
                const isFromUser = tx.from.toLowerCase() === userAddress.toLowerCase();
                const isToSystem = tx.to.toLowerCase() === this.systemAddress.toLowerCase();
                const isOnePlex = tx.value === '1000000000000000000'; // 1 PLEX = 10^18 wei
                
                return isFromUser && isToSystem && isOnePlex;
            });
            
            if (authPayment) {
                console.log('‚úÖ Authorization payment found:', authPayment.hash);
                return true;
            }
            
            console.log('‚ùå No authorization payment found');
            return false;
            
        } catch (error) {
            console.error('Error checking authorization:', error);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
            if (this.isTestMode()) {
                console.log('‚ö†Ô∏è API error in test mode, granting access');
                return true;
            }
            
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞
     * @param {string} address - BSC –∞–¥—Ä–µ—Å
     * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç BSCScan API
     */
    async getTokenTransactions(address) {
        const params = new URLSearchParams({
            module: 'account',
            action: 'tokentx',
            contractaddress: this.plexContract,
            address: address,
            startblock: 0,
            endblock: 999999999,
            sort: 'desc',
            apikey: this.bscApiKey
        });
        
        const url = `${this.baseUrl}?${params.toString()}`;
        
        try {
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ API
            if (data.status === '0' && data.message !== 'No transactions found') {
                throw new Error(`BSCScan API error: ${data.message || 'Unknown error'}`);
            }
            
            return data;
            
        } catch (error) {
            console.error('Error fetching token transactions:', error);
            throw error;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
     * @returns {boolean}
     */
    isTestMode() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const isLocalhost = window.location.hostname === 'localhost' || 
                           window.location.hostname === '127.0.0.1';
        const isDevMode = this.config?.environment === 'development';
        const hasTestKey = this.bscApiKey === 'test' || this.bscApiKey === '';
        
        return isLocalhost || isDevMode || hasTestKey;
    }
}

export default AuthAPI;
