// modules/auth/auth.state.js
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

export default class AuthState {
    constructor() {
        this.isAuthenticated = false;
        this.userAddress = null;
        this.authTime = null;
        this.authTransactionHash = null;
        this.sessionId = null;
        
        // –ö–ª—é—á–∏ –¥–ª—è localStorage
        this.STORAGE_KEYS = {
            AUTH_STATE: 'genesis_auth_state',
            USER_ADDRESS: 'genesis_user_address',
            SESSION_ID: 'genesis_session_id'
        };
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * @param {string} address - BSC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} transactionHash - –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    setAuthenticated(address, transactionHash = null) {
        this.isAuthenticated = true;
        this.userAddress = address;
        this.authTime = Date.now();
        this.authTransactionHash = transactionHash;
        this.sessionId = this.generateSessionId();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.save();
        
        console.log('‚úÖ Authentication state saved for:', this.formatAddress(address));
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
     */
    save() {
        const stateData = {
            isAuthenticated: this.isAuthenticated,
            userAddress: this.userAddress,
            authTime: this.authTime,
            authTransactionHash: this.authTransactionHash,
            sessionId: this.sessionId
        };
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            localStorage.setItem(this.STORAGE_KEYS.AUTH_STATE, JSON.stringify(stateData));
            
            // –î—É–±–ª–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if (this.userAddress) {
                localStorage.setItem(this.STORAGE_KEYS.USER_ADDRESS, this.userAddress);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏
            if (this.sessionId) {
                localStorage.setItem(this.STORAGE_KEYS.SESSION_ID, this.sessionId);
            }
            
        } catch (error) {
            console.error('Failed to save auth state:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
     */
    load() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const savedState = localStorage.getItem(this.STORAGE_KEYS.AUTH_STATE);
            
            if (savedState) {
                const data = JSON.parse(savedState);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if (this.isValidSavedState(data)) {
                    Object.assign(this, data);
                    console.log('üìÇ Loaded auth state for:', this.formatAddress(data.userAddress));
                    return true;
                }
            }
            
            // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const savedAddress = localStorage.getItem(this.STORAGE_KEYS.USER_ADDRESS);
            if (savedAddress && this.isValidAddress(savedAddress)) {
                this.userAddress = savedAddress;
                this.isAuthenticated = true;
                this.authTime = Date.now();
                this.sessionId = this.generateSessionId();
                console.log('üìÇ Loaded legacy auth for:', this.formatAddress(savedAddress));
                return true;
            }
            
        } catch (error) {
            console.error('Failed to load auth state:', error);
        }
        
        return false;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ localStorage
     */
    clear() {
        this.isAuthenticated = false;
        this.userAddress = null;
        this.authTime = null;
        this.authTransactionHash = null;
        this.sessionId = null;
        
        // –û—á–∏—â–∞–µ–º localStorage
        Object.values(this.STORAGE_KEYS).forEach(key => {
            localStorage.removeItem(key);
        });
        
        console.log('üßπ Auth state cleared');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
     * @param {number} maxAge - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π)
     * @returns {boolean}
     */
    isSessionValid(maxAge = 7 * 24 * 60 * 60 * 1000) {
        if (!this.isAuthenticated || !this.authTime) {
            return false;
        }
        
        const age = Date.now() - this.authTime;
        return age < maxAge;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateActivity() {
        if (this.isAuthenticated) {
            this.authTime = Date.now();
            this.save();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
     * @returns {Object}
     */
    getSessionInfo() {
        if (!this.isAuthenticated) {
            return null;
        }
        
        return {
            address: this.userAddress,
            sessionId: this.sessionId,
            authTime: new Date(this.authTime),
            sessionAge: Date.now() - this.authTime,
            transactionHash: this.authTransactionHash
        };
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
     * @returns {string}
     */
    generateSessionId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substr(2, 9);
        return `genesis-${timestamp}-${random}`;
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     */
    isValidSavedState(data) {
        return (
            data &&
            typeof data.isAuthenticated === 'boolean' &&
            typeof data.userAddress === 'string' &&
            this.isValidAddress(data.userAddress) &&
            typeof data.authTime === 'number'
        );
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è BSC –∞–¥—Ä–µ—Å–∞
     * @param {string} address - –ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean}
     */
    isValidAddress(address) {
        return /^0x[a-fA-F0-9]{40}$/.test(address);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} address - –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
     * @returns {string}
     */
    formatAddress(address) {
        if (!address || address.length < 10) return address;
        return `${address.slice(0, 6)}...${address.slice(-4)}`;
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     * @returns {Object}
     */
    export() {
        return {
            isAuthenticated: this.isAuthenticated,
            userAddress: this.userAddress,
            authTime: this.authTime,
            authTransactionHash: this.authTransactionHash,
            sessionId: this.sessionId,
            isSessionValid: this.isSessionValid(),
            formattedAddress: this.formatAddress(this.userAddress)
        };
    }
}
