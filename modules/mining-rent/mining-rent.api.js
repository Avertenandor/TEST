// modules/mining-rent/mining-rent.api.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–µ–Ω–¥–æ–π –º–∞–π–Ω–∏–Ω–≥–æ–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π

export default class MiningRentAPI {
    constructor(bscApi) {
        this.bscApi = bscApi;
        this.launchDate = new Date('2025-07-21T00:00:00');
        this.tariffs = {
            cpu: 1,        // $1 –∑–∞ —è–¥—Ä–æ –≤ —Å—É—Ç–∫–∏
            ram: 1,        // $1 –∑–∞ GB RAM –≤ —Å—É—Ç–∫–∏
            storage: 0.5   // $0.5 –∑–∞ TB —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ —Å—É—Ç–∫–∏
        };
        this.powerLevels = [10, 20, 30, 40, 50]; // –ü—Ä–æ—Ü–µ–Ω—Ç—ã –º–æ—â–Ω–æ—Å—Ç–∏
        this.minDepositsRequired = 3;
        this.countdownInterval = null;
        this.deviceInfo = null;
        this.cache = new Map();
        this.cacheTimeout = 60000; // 1 –º–∏–Ω—É—Ç–∞
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
     */
    async init() {
        try {
            console.log('[MiningRent] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π');
            this.deviceInfo = this.getDeviceInfo();
            this.startCountdown();
            await this.checkUserEligibility();
            console.log('[MiningRent] API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    getDeviceInfo() {
        const info = {
            cores: navigator.hardwareConcurrency || 4,
            memory: navigator.deviceMemory || 8, // GB
            storage: 1, // TB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            platform: navigator.platform || 'Unknown',
            userAgent: navigator.userAgent || 'Unknown',
            language: navigator.language || 'en',
            cookieEnabled: navigator.cookieEnabled,
            onLine: navigator.onLine
        };
        
        console.log('[MiningRent] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:', info);
        return info;
    }

    /**
     * –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏
     */
    calculateEarnings(percentage) {
        if (!this.deviceInfo) {
            this.deviceInfo = this.getDeviceInfo();
        }
        
        const cpuEarnings = (this.deviceInfo.cores * percentage / 100) * this.tariffs.cpu;
        const ramEarnings = (this.deviceInfo.memory * percentage / 100) * this.tariffs.ram;
        const storageEarnings = (this.deviceInfo.storage * percentage / 100) * this.tariffs.storage;
        
        const dailyTotal = cpuEarnings + ramEarnings + storageEarnings;
        
        return {
            cpu: parseFloat(cpuEarnings.toFixed(2)),
            ram: parseFloat(ramEarnings.toFixed(2)),
            storage: parseFloat(storageEarnings.toFixed(2)),
            daily: parseFloat(dailyTotal.toFixed(2)),
            weekly: parseFloat((dailyTotal * 7).toFixed(2)),
            monthly: parseFloat((dailyTotal * 30).toFixed(2)),
            yearly: parseFloat((dailyTotal * 365).toFixed(2))
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
     */
    getAllEarnings() {
        const earnings = {};
        this.powerLevels.forEach(level => {
            earnings[level] = this.calculateEarnings(level);
        });
        return earnings;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async checkUserEligibility() {
        const cacheKey = 'user_eligibility';
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            const deposits = await this.getUserActiveDeposits();
            const isEligible = deposits.length >= this.minDepositsRequired;
            
            const result = {
                isEligible,
                depositsCount: deposits.length,
                depositsRequired: this.minDepositsRequired,
                missingDeposits: Math.max(0, this.minDepositsRequired - deposits.length)
            };

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(cacheKey, {
                data: result,
                timestamp: Date.now()
            });

            console.log('[MiningRent] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', result);
            return result;
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
            return {
                isEligible: false,
                depositsCount: 0,
                depositsRequired: this.minDepositsRequired,
                missingDeposits: this.minDepositsRequired
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserActiveDeposits() {
        try {
            // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            if (window.depositsCabinetService && window.depositsCabinetService.getUserDeposits) {
                const deposits = await window.depositsCabinetService.getUserDeposits();
                return deposits.filter(d => d.status === 'ACTIVE');
            }
            
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const mockDeposits = [
                { id: 1, amount: 25, status: 'ACTIVE', plan: '–¢–µ—Å—Ç–æ–≤—ã–π' },
                { id: 2, amount: 100, status: 'ACTIVE', plan: '–ë–∞–∑–æ–≤—ã–π' }
            ];
            
            return mockDeposits;
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
            return [];
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    startCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
        }
        
        this.updateCountdown();
        this.countdownInterval = setInterval(() => this.updateCountdown(), 1000);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    updateCountdown() {
        const now = new Date();
        const timeLeft = this.launchDate - now;
        
        if (timeLeft <= 0) {
            this.stopCountdown();
            this.onProgramLaunched();
            return;
        }
        
        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        
        this.updateCountdownDisplay({ days, hours, minutes, seconds });
        
        return { days, hours, minutes, seconds };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
     */
    updateCountdownDisplay(time) {
        const elements = {
            days: document.getElementById('mining-countdown-days'),
            hours: document.getElementById('mining-countdown-hours'),
            minutes: document.getElementById('mining-countdown-minutes'),
            seconds: document.getElementById('mining-countdown-seconds')
        };
        
        if (elements.days) elements.days.textContent = time.days;
        if (elements.hours) elements.hours.textContent = time.hours;
        if (elements.minutes) elements.minutes.textContent = time.minutes;
        if (elements.seconds) elements.seconds.textContent = time.seconds;
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
     */
    stopCountdown() {
        if (this.countdownInterval) {
            clearInterval(this.countdownInterval);
            this.countdownInterval = null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
     */
    onProgramLaunched() {
        console.log('[MiningRent] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞!');
        
        const countdownElement = document.getElementById('mining-countdown-container');
        if (countdownElement) {
            countdownElement.innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üéâ</div>
                    <div style="font-size: 2rem; font-weight: bold; color: #4ade80; margin-bottom: 1rem;">
                        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!
                    </div>
                    <div style="font-size: 1.2rem; color: #b0b0b0;">
                        –ê—Ä–µ–Ω–¥–∞ –º–æ—â–Ω–æ—Å—Ç–µ–π —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞
                    </div>
                </div>
            `;
        }
    }

    /**
     * –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –º–æ—â–Ω–æ—Å—Ç–∏
     */
    async selectPowerLevel(percentage) {
        try {
            console.log(`[MiningRent] –í—ã–±–æ—Ä ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            const eligibility = await this.checkUserEligibility();
            
            if (!eligibility.isEligible) {
                this.showInsufficientDepositsError(eligibility);
                return false;
            }
            
            // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const earnings = this.calculateEarnings(percentage);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const confirmed = await this.showConfirmationDialog(percentage, earnings);
            
            if (confirmed) {
                await this.activateMiningPower(percentage);
                return true;
            }
            
            return false;
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ—â–Ω–æ—Å—Ç–∏:', error);
            return false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
     */
    showInsufficientDepositsError(eligibility) {
        const message = `‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º ${eligibility.depositsRequired} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞!

–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${eligibility.depositsCount}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ ${eligibility.missingDeposits} –¥–µ–ø–æ–∑–∏—Ç(–∞) –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ.`;
        
        alert(message);
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        if (window.location.hash) {
            window.location.hash = '/deposits';
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    async showConfirmationDialog(percentage, earnings) {
        const message = `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.

üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:
‚Ä¢ ${earnings.daily} USDT –≤ —Å—É—Ç–∫–∏
‚Ä¢ ${earnings.weekly} USDT –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ ${earnings.monthly} USDT –≤ –º–µ—Å—è—Ü
‚Ä¢ ${earnings.yearly} USDT –≤ –≥–æ–¥

–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä (${this.deviceInfo.cores} —è–¥–µ—Ä): ${earnings.cpu} USDT/—Å—É—Ç–∫–∏
‚Ä¢ RAM (${this.deviceInfo.memory} GB): ${earnings.ram} USDT/—Å—É—Ç–∫–∏
‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ (${this.deviceInfo.storage} TB): ${earnings.storage} USDT/—Å—É—Ç–∫–∏

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;
        
        return confirm(message);
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π
     */
    async activateMiningPower(percentage) {
        try {
            console.log(`[MiningRent] –ê–∫—Ç–∏–≤–∞—Ü–∏—è ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π`);
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            const activation = {
                percentage,
                startTime: Date.now(),
                earnings: this.calculateEarnings(percentage),
                status: 'active',
                transactionHash: this.generateMockTxHash()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ localStorage
            localStorage.setItem('mining_rent_activation', JSON.stringify(activation));
            
            alert(`üéâ –ê—Ä–µ–Ω–¥–∞ ${percentage}% –º–æ—â–Ω–æ—Å—Ç–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!

–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: $${activation.earnings.daily}/–¥–µ–Ω—å

–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.`);
            
            return activation;
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
     */
    getCurrentActivation() {
        try {
            const stored = localStorage.getItem('mining_rent_activation');
            return stored ? JSON.parse(stored) : null;
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π
     */
    async deactivateMiningPower() {
        try {
            console.log('[MiningRent] –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞—Ä–µ–Ω–¥—ã –º–æ—â–Ω–æ—Å—Ç–µ–π');
            
            localStorage.removeItem('mining_rent_activation');
            
            alert('‚úÖ –ê—Ä–µ–Ω–¥–∞ –º–æ—â–Ω–æ—Å—Ç–µ–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.');
            
            return true;
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
     */
    async getEarningsStats() {
        try {
            const activation = this.getCurrentActivation();
            if (!activation) {
                return {
                    isActive: false,
                    totalEarned: 0,
                    dailyRate: 0,
                    activeDays: 0
                };
            }

            const activeDays = Math.floor((Date.now() - activation.startTime) / (1000 * 60 * 60 * 24));
            const totalEarned = activeDays * activation.earnings.daily;

            return {
                isActive: true,
                totalEarned: parseFloat(totalEarned.toFixed(2)),
                dailyRate: activation.earnings.daily,
                activeDays,
                percentage: activation.percentage,
                startDate: new Date(activation.startTime).toLocaleDateString()
            };
        } catch (error) {
            console.error('[MiningRent] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                isActive: false,
                totalEarned: 0,
                dailyRate: 0,
                activeDays: 0
            };
        }
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

    generateMockTxHash() {
        const chars = '0123456789abcdef';
        let hash = '0x';
        for (let i = 0; i < 64; i++) {
            hash += chars[Math.floor(Math.random() * chars.length)];
        }
        return hash;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    checkDeviceCompatibility() {
        const requirements = {
            minCores: 2,
            minMemory: 4, // GB
            supportedPlatforms: ['Win32', 'Linux x86_64', 'MacIntel']
        };

        const compatible = {
            cores: this.deviceInfo.cores >= requirements.minCores,
            memory: this.deviceInfo.memory >= requirements.minMemory,
            platform: requirements.supportedPlatforms.some(p => 
                this.deviceInfo.platform.includes(p)
            )
        };

        return {
            isCompatible: Object.values(compatible).every(v => v),
            details: compatible,
            requirements
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –º–æ—â–Ω–æ—Å—Ç–∏
     */
    getRecommendedPowerLevel() {
        const compatibility = this.checkDeviceCompatibility();
        
        if (!compatibility.isCompatible) {
            return 0;
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (this.deviceInfo.cores >= 8 && this.deviceInfo.memory >= 16) {
            return 40; // –ú–æ—â–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        } else if (this.deviceInfo.cores >= 4 && this.deviceInfo.memory >= 8) {
            return 30; // –°—Ä–µ–¥–Ω–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        } else {
            return 20; // –°–ª–∞–±–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.cache.clear();
        console.log('[MiningRent] –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.stopCountdown();
        this.clearCache();
        console.log('[MiningRent] API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}
