// modules/platform-access/platform-access.api.js
// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ

export default class PlatformAccessAPI {
    constructor(config) {
        this.config = config;
        this.bscApiKey = config.api?.bscScanKey || '';
        this.usdtContract = config.contracts?.USDT || '0x55d398326f99059fF775485246999027B3197955'; // BSC USDT
        this.systemAddress = config.systemAddress || '0x...';
        this.apiUrl = 'https://api.bscscan.com/api';
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userAddress - BSC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<{hasAccess: boolean, lastPayment: Date|null, expiresAt: Date|null}>}
     */
    async checkPlatformAccess(userAddress) {
        try {
            console.log(`üîç Checking platform access for: ${userAddress}`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ USDT –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–∏—Å—Ç–µ–º–µ
            const transactions = await this.getUserPaymentTransactions(userAddress);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            const recentPayments = this.filterRecentPayments(transactions);
            
            if (recentPayments.length === 0) {
                return {
                    hasAccess: false,
                    lastPayment: null,
                    expiresAt: null
                };
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–ª–∞—Ç—É
            const lastPayment = this.findLastValidPayment(recentPayments);
            
            if (!lastPayment) {
                return {
                    hasAccess: false,
                    lastPayment: null,
                    expiresAt: null
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø
            const paymentDate = new Date(lastPayment.timeStamp * 1000);
            const expiresAt = new Date(paymentDate);
            expiresAt.setDate(expiresAt.getDate() + 1); // –î–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å
            
            const now = new Date();
            const hasAccess = now < expiresAt;
            
            return {
                hasAccess,
                lastPayment: paymentDate,
                expiresAt
            };
            
        } catch (error) {
            console.error('Error checking platform access:', error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userAddress - BSC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    async getUserPaymentTransactions(userAddress) {
        try {
            const params = new URLSearchParams({
                module: 'account',
                action: 'tokentx',
                contractaddress: this.usdtContract,
                address: this.systemAddress,
                page: 1,
                offset: 100,
                sort: 'desc',
                apikey: this.bscApiKey
            });
            
            const response = await fetch(`${this.apiUrl}?${params}`);
            const data = await response.json();
            
            if (data.status !== '1') {
                console.warn('No transactions found or API error:', data.message);
                return [];
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userTransactions = data.result.filter(tx => 
                tx.from.toLowerCase() === userAddress.toLowerCase()
            );
            
            return userTransactions;
            
        } catch (error) {
            console.error('Error fetching payment transactions:', error);
            return [];
        }
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
     * @param {Array} transactions - –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     * @returns {Array} –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    filterRecentPayments(transactions) {
        const thirtyDaysAgo = Date.now() / 1000 - (30 * 24 * 60 * 60);
        
        return transactions.filter(tx => {
            const txTime = parseInt(tx.timeStamp);
            return txTime > thirtyDaysAgo;
        });
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–ª–∏–¥–Ω–æ–π –æ–ø–ª–∞—Ç—ã ($1 USDT –∏–ª–∏ –±–æ–ª—å—à–µ)
     * @param {Array} transactions - –ú–∞—Å—Å–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     * @returns {Object|null} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ null
     */
    findLastValidPayment(transactions) {
        // USDT –∏–º–µ–µ—Ç 18 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ BSC
        const minAmount = BigInt('1000000000000000000'); // 1 USDT
        
        for (const tx of transactions) {
            const amount = BigInt(tx.value);
            
            if (amount >= minAmount) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã
                const days = Number(amount / minAmount);
                console.log(`‚úÖ Found valid payment: ${days} day(s) access`);
                return tx;
            }
        }
        
        return null;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ hash
     * @param {string} txHash - Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * @returns {Promise<boolean>} –í–∞–ª–∏–¥–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
     */
    async verifyPaymentTransaction(txHash) {
        try {
            const params = new URLSearchParams({
                module: 'transaction',
                action: 'gettxreceiptstatus',
                txhash: txHash,
                apikey: this.bscApiKey
            });
            
            const response = await fetch(`${this.apiUrl}?${params}`);
            const data = await response.json();
            
            if (data.status !== '1' || data.result.status !== '1') {
                return false;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const txDetails = await this.getTransactionDetails(txHash);
            
            if (!txDetails) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è USDT –Ω–∞ –Ω–∞—à –∞–¥—Ä–µ—Å
            const isValidPayment = 
                txDetails.to?.toLowerCase() === this.systemAddress.toLowerCase() &&
                txDetails.contractAddress?.toLowerCase() === this.usdtContract.toLowerCase() &&
                BigInt(txDetails.value || '0') >= BigInt('1000000000000000000'); // >= 1 USDT
            
            return isValidPayment;
            
        } catch (error) {
            console.error('Error verifying transaction:', error);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * @param {string} txHash - Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * @returns {Promise<Object|null>} –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    async getTransactionDetails(txHash) {
        try {
            const params = new URLSearchParams({
                module: 'proxy',
                action: 'eth_getTransactionByHash',
                txhash: txHash,
                apikey: this.bscApiKey
            });
            
            const response = await fetch(`${this.apiUrl}?${params}`);
            const data = await response.json();
            
            return data.result || null;
            
        } catch (error) {
            console.error('Error getting transaction details:', error);
            return null;
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ N –¥–Ω–µ–π
     * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
     * @returns {number} –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ USDT
     */
    calculateAccessCost(days) {
        return days * 1; // $1 –∑–∞ –¥–µ–Ω—å
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã USDT –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string|BigInt} value - –ó–Ω–∞—á–µ–Ω–∏–µ –≤ wei
     * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    formatUSDTAmount(value) {
        const amount = BigInt(value);
        const decimals = BigInt('1000000000000000000'); // 18 decimals
        const whole = amount / decimals;
        const fraction = amount % decimals;
        
        return `${whole}.${fraction.toString().padStart(18, '0').slice(0, 2)} USDT`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userAddress - BSC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
     * @returns {Promise<Array>} –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
     */
    async getPaymentHistory(userAddress, limit = 10) {
        try {
            const transactions = await this.getUserPaymentTransactions(userAddress);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            const history = transactions
                .filter(tx => BigInt(tx.value) >= BigInt('1000000000000000000')) // >= 1 USDT
                .slice(0, limit)
                .map(tx => ({
                    hash: tx.hash,
                    date: new Date(tx.timeStamp * 1000),
                    amount: this.formatUSDTAmount(tx.value),
                    days: Number(BigInt(tx.value) / BigInt('1000000000000000000')),
                    status: 'completed'
                }));
            
            return history;
            
        } catch (error) {
            console.error('Error getting payment history:', error);
            return [];
        }
    }
    
    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
     * @param {string} userAddress - BSC –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Function} callback - Callback –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
     * @returns {Function} –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    startPaymentMonitoring(userAddress, callback) {
        let lastCheckTime = Date.now();
        
        const interval = setInterval(async () => {
            try {
                const transactions = await this.getUserPaymentTransactions(userAddress);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const newTransactions = transactions.filter(tx => {
                    const txTime = tx.timeStamp * 1000;
                    return txTime > lastCheckTime;
                });
                
                if (newTransactions.length > 0) {
                    for (const tx of newTransactions) {
                        if (BigInt(tx.value) >= BigInt('1000000000000000000')) {
                            callback({
                                success: true,
                                transaction: tx,
                                amount: this.formatUSDTAmount(tx.value),
                                days: Number(BigInt(tx.value) / BigInt('1000000000000000000'))
                            });
                        }
                    }
                    
                    lastCheckTime = Date.now();
                }
            } catch (error) {
                console.error('Error monitoring payments:', error);
            }
        }, 15000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        return () => clearInterval(interval);
    }
}
