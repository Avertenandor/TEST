// modules/platform-access/platform-access.module.js
// –ú–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ GENESIS - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ–ø–ª–∞—Ç–∞ $1 USDT

import PlatformAccessAPI from './platform-access.api.js';
import PlatformAccessState from './platform-access.state.js';
import QRGenerator from '../../shared/services/qr-generator.js';

export default class PlatformAccessModule {
    constructor() {
        this.name = 'platform-access';
        this.version = '1.0.0';
        this.dependencies = ['auth'];
        
        this.state = null;
        this.api = null;
        this.container = null;
        this.context = null;
        this.subscriptions = [];
        this.checkInterval = null;
    }
    
    async init(context) {
        console.log('üíé Initializing Platform Access Module...');
        
        this.context = context;
        this.container = context.container;
        
        try {
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.state = new PlatformAccessState();
            this.state.load();
            
            // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            const config = context.config || window.store.get('config');
            this.api = new PlatformAccessAPI(config);
            
            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            await this.loadTemplate();
            
            // 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
            await this.loadStyles();
            
            // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.initEventHandlers();
            
            // 6. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            this.subscribeToEvents();
            
            // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            await this.checkCurrentAccess();
            
            // 8. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            this.startAccessMonitoring();
            
            console.log('‚úÖ Platform Access Module initialized successfully');
            
            return this;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Platform Access Module:', error);
            throw error;
        }
    }
    
    async loadTemplate() {
        try {
            const response = await fetch('/modules/platform-access/platform-access.template.html');
            if (response.ok) {
                const html = await response.text();
                if (this.container) {
                    this.container.innerHTML = html;
                }
            } else {
                throw new Error('Failed to load template');
            }
        } catch (error) {
            console.error('Failed to load platform-access template:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —à–∞–±–ª–æ–Ω
            if (this.container) {
                this.container.innerHTML = this.getFallbackTemplate();
            }
        }
    }
    
    async loadStyles() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
        const existingLink = document.querySelector(`link[data-module="${this.name}"]`);
        if (existingLink) return;
        
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = '/modules/platform-access/platform-access.styles.css';
        link.dataset.module = this.name;
        document.head.appendChild(link);
    }
    
    initEventHandlers() {
        // –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞
        const payButton = this.container?.querySelector('#pay-access-button');
        if (payButton) {
            payButton.addEventListener('click', this.handlePayAccess.bind(this));
        }
        
        // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        const daysSelector = this.container?.querySelector('#access-days-selector');
        if (daysSelector) {
            daysSelector.addEventListener('change', this.updatePaymentAmount.bind(this));
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        const copyBtn = this.container?.querySelector('.copy-payment-address');
        if (copyBtn) {
            copyBtn.addEventListener('click', this.copyPaymentAddress.bind(this));
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const checkTxBtn = this.container?.querySelector('#check-transaction-button');
        if (checkTxBtn) {
            checkTxBtn.addEventListener('click', this.checkTransaction.bind(this));
        }
    }
    
    async checkCurrentAccess() {
        const userAddress = this.context.store?.get('user.address');
        
        if (!userAddress) {
            console.log('‚ùå No user address found');
            this.updateAccessStatus(false, 0);
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ BSC API
            const accessInfo = await this.api.checkPlatformAccess(userAddress);
            
            if (accessInfo.hasAccess) {
                const daysRemaining = this.calculateDaysRemaining(accessInfo.lastPayment);
                this.updateAccessStatus(true, daysRemaining);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (this.context.store) {
                    this.context.store.set('user.platformAccess', true);
                    this.context.store.set('user.accessDays', daysRemaining);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.state.setAccess(true, daysRemaining, accessInfo.lastPayment);
                
            } else {
                this.updateAccessStatus(false, 0);
                
                if (this.context.store) {
                    this.context.store.set('user.platformAccess', false);
                    this.context.store.set('user.accessDays', 0);
                }
                
                this.state.setAccess(false, 0, null);
            }
            
        } catch (error) {
            console.error('Error checking platform access:', error);
            this.updateAccessStatus(false, 0);
        }
    }
    
    calculateDaysRemaining(lastPaymentDate) {
        if (!lastPaymentDate) return 0;
        
        const lastPayment = new Date(lastPaymentDate);
        const now = new Date();
        const diffTime = Math.abs(now - lastPayment);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        // –ö–∞–∂–¥–∞—è –æ–ø–ª–∞—Ç–∞ –¥–∞–µ—Ç 1 –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        const remainingDays = Math.max(0, 1 - diffDays);
        return remainingDays;
    }
    
    updateAccessStatus(hasAccess, daysRemaining) {
        if (!this.container) return;
        
        const statusEl = this.container.querySelector('.access-status');
        const daysEl = this.container.querySelector('.access-days');
        const paymentSection = this.container.querySelector('.payment-section');
        const activeSection = this.container.querySelector('.active-access-section');
        
        if (hasAccess && daysRemaining > 0) {
            // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
            if (statusEl) {
                statusEl.innerHTML = `<span class="status-active">‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω</span>`;
            }
            if (daysEl) {
                daysEl.innerHTML = `<span class="days-count">${daysRemaining}</span> ${this.getDaysWord(daysRemaining)} –æ—Å—Ç–∞–ª–æ—Å—å`;
            }
            if (paymentSection) {
                paymentSection.style.display = 'none';
            }
            if (activeSection) {
                activeSection.style.display = 'block';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –¥–Ω–µ–π
            if (daysRemaining <= 3) {
                this.showRenewalReminder(daysRemaining);
            }
            
        } else {
            // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫
            if (statusEl) {
                statusEl.innerHTML = `<span class="status-inactive">‚ùå –î–æ—Å—Ç—É–ø –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</span>`;
            }
            if (daysEl) {
                daysEl.innerHTML = `<span class="days-expired">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø–ª–∞—Ç–∞</span>`;
            }
            if (paymentSection) {
                paymentSection.style.display = 'block';
            }
            if (activeSection) {
                activeSection.style.display = 'none';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            this.showAccessRequired();
        }
    }
    
    getDaysWord(days) {
        if (days === 1) return '–¥–µ–Ω—å';
        if (days >= 2 && days <= 4) return '–¥–Ω—è';
        return '–¥–Ω–µ–π';
    }
    
    showRenewalReminder(daysRemaining) {
        const reminderEl = this.container?.querySelector('.renewal-reminder');
        if (reminderEl) {
            reminderEl.style.display = 'block';
            reminderEl.innerHTML = `
                <div class="reminder-content">
                    <p>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${daysRemaining} ${this.getDaysWord(daysRemaining)} –¥–æ—Å—Ç—É–ø–∞.</p>
                    <button class="btn btn-warning" onclick="this.showPaymentSection()">
                        –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø
                    </button>
                </div>
            `;
        }
    }
    
    showAccessRequired() {
        const warningEl = this.container?.querySelector('.access-warning');
        if (warningEl) {
            warningEl.style.display = 'block';
            warningEl.innerHTML = `
                <div class="warning-content">
                    <h3>‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞</h3>
                    <p>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø ($1 USDT –≤ –¥–µ–Ω—å).</p>
                    <p>–û–ø–ª–∞—Ç–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ 24 —á–∞—Å–∞.</p>
                </div>
            `;
        }
    }
    
    async handlePayAccess() {
        const daysSelector = this.container?.querySelector('#access-days-selector');
        const days = daysSelector ? parseInt(daysSelector.value) : 1;
        const amount = days; // $1 –∑–∞ –¥–µ–Ω—å
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ–ø–ª–∞—Ç–µ
        this.showPaymentInstructions(amount);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º
        await this.generatePaymentQR(amount);
        
        // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        this.startTransactionMonitoring();
    }
    
    showPaymentInstructions(amount) {
        const instructionsEl = this.container?.querySelector('.payment-instructions');
        if (instructionsEl) {
            const config = this.context.config || window.store.get('config');
            const systemAddress = config.systemAddress || '0x...';
            
            instructionsEl.style.display = 'block';
            instructionsEl.innerHTML = `
                <div class="instructions-content">
                    <h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</h4>
                    <ol>
                        <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <strong>${amount} USDT</strong> –Ω–∞ –∞–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º—ã</li>
                        <li>–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>${systemAddress}</code></li>
                        <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (1-2 –º–∏–Ω—É—Ç—ã)</li>
                        <li>–î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
                    </ol>
                    
                    <div class="payment-qr" id="payment-qr-code"></div>
                    
                    <div class="transaction-input">
                        <label>Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                        <input type="text" id="tx-hash-input" placeholder="0x..." />
                        <button id="check-transaction-button" class="btn btn-secondary">
                            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        </button>
                    </div>
                </div>
            `;
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            this.initEventHandlers();
        }
    }
    
    async generatePaymentQR(amount) {
        const qrContainer = this.container?.querySelector('#payment-qr-code');
        if (!qrContainer) return;
        
        const config = this.context.config || window.store.get('config');
        const accessAddress = config.addresses?.access || config.systemAddress || '0x28915a33562b58500cf8b5b682C89A3396B8Af76';
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            qrContainer.innerHTML = '<div class="qr-loading">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞...</div>';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
            await QRGenerator.generatePaymentQR(qrContainer, accessAddress, amount, 'USDT');
            
            console.log('‚úÖ QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const qrInfo = qrContainer.querySelector('.qr-payment-info');
            if (qrInfo) {
                const additionalInfo = document.createElement('div');
                additionalInfo.className = 'platform-access-info';
                additionalInfo.innerHTML = `
                    <div class="access-period">
                        <strong>–ü–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–∞:</strong> ${amount} ${amount === 1 ? '–¥–µ–Ω—å' : amount <= 4 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}
                    </div>
                    <div class="access-note">
                        üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    </div>
                `;
                qrInfo.appendChild(additionalInfo);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞:', error);
            // QRGenerator —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç fallback, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const fallback = qrContainer.querySelector('.qr-fallback');
            if (fallback) {
                fallback.innerHTML += `
                    <div class="access-fallback-info">
                        <p>–û–ø–ª–∞—Ç–∞ –∑–∞ ${amount} ${amount === 1 ? '–¥–µ–Ω—å' : amount <= 4 ? '–¥–Ω—è' : '–¥–Ω–µ–π'} –¥–æ—Å—Ç—É–ø–∞</p>
                    </div>
                `;
            }
        }
    }
    
    async checkTransaction() {
        const txInput = this.container?.querySelector('#tx-hash-input');
        if (!txInput) return;
        
        const txHash = txInput.value.trim();
        if (!txHash) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
            return;
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ API
            const isValid = await this.api.verifyPaymentTransaction(txHash);
            
            if (isValid) {
                this.showSuccess('–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
                await this.checkCurrentAccess();
            } else {
                this.showError('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
            }
        } catch (error) {
            console.error('Error checking transaction:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
    }
    
    startTransactionMonitoring() {
        // –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const userAddress = this.context.store?.get('user.address');
        if (!userAddress) return;
        
        let checkCount = 0;
        const maxChecks = 60; // –ü—Ä–æ–≤–µ—Ä—è–µ–º 10 –º–∏–Ω—É—Ç
        
        const checkInterval = setInterval(async () => {
            checkCount++;
            
            try {
                const accessInfo = await this.api.checkPlatformAccess(userAddress);
                
                if (accessInfo.hasAccess) {
                    clearInterval(checkInterval);
                    this.showSuccess('–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
                    await this.checkCurrentAccess();
                }
                
                if (checkCount >= maxChecks) {
                    clearInterval(checkInterval);
                    console.log('Transaction monitoring timeout');
                }
            } catch (error) {
                console.error('Error monitoring transaction:', error);
            }
        }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }
    
    startAccessMonitoring() {
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        this.checkInterval = setInterval(() => {
            this.checkCurrentAccess();
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    updatePaymentAmount() {
        const daysSelector = this.container?.querySelector('#access-days-selector');
        const amountEl = this.container?.querySelector('.payment-amount');
        
        if (daysSelector && amountEl) {
            const days = parseInt(daysSelector.value);
            const amount = days; // $1 –∑–∞ –¥–µ–Ω—å
            amountEl.textContent = `${amount} USDT`;
        }
    }
    
    copyPaymentAddress() {
        const config = this.context.config || window.store.get('config');
        const systemAddress = config.systemAddress || '0x...';
        
        navigator.clipboard.writeText(systemAddress).then(() => {
            this.showSuccess('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        }).catch(() => {
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å');
        });
    }
    
    subscribeToEvents() {
        if (this.context.eventBus) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.subscriptions.push(
                this.context.eventBus.on('user:authenticated', async () => {
                    await this.checkCurrentAccess();
                })
            );
            
