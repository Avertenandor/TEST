// modules/gifts/gifts.module.js
// –ú–æ–¥—É–ª—å –ø–æ–¥–∞—Ä–∫–æ–≤ GENESIS - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤

import GiftsAPI from './gifts.api.js';
import GiftsState from './gifts.state.js';

export default class GiftsModule {
    constructor() {
        this.name = 'gifts';
        this.version = '1.0.0';
        this.dependencies = ['auth', 'platform-access'];
        
        this.state = null;
        this.api = null;
        this.container = null;
        this.context = null;
        this.subscriptions = [];
    }
    
    async init(context) {
        console.log('üéÅ Initializing Gifts Module...');
        
        this.context = context;
        this.container = context.container;
        
        try {
            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.state = new GiftsState();
            this.state.load();
            
            // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            const config = context.config || window.store?.get('config');
            this.api = new GiftsAPI(config);
            
            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            await this.loadTemplate();
            
            // 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
            await this.loadStyles();
            
            // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this.initEventHandlers();
            
            // 6. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            this.subscribeToEvents();
            
            // 7. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
            await this.loadGifts();
            
            console.log('‚úÖ Gifts Module initialized successfully');
            return this;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Gifts Module:', error);
            throw error;
        }
    }
    
    async loadTemplate() {
        try {
            const response = await fetch('/modules/gifts/gifts.template.html');
            if (response.ok) {
                const html = await response.text();
                if (this.container) {
                    this.container.innerHTML = html;
                }
            } else {
                throw new Error('Failed to load template');
            }
        } catch (error) {
            console.error('Failed to load gifts template:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —à–∞–±–ª–æ–Ω
            if (this.container) {
                this.container.innerHTML = this.getFallbackTemplate();
            }
        }
    }
    
    async loadStyles() {
        const existingLink = document.querySelector(`link[data-module="${this.name}"]`);
        if (existingLink) return;
        
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = '/modules/gifts/gifts.styles.css';
        link.dataset.module = this.name;
        document.head.appendChild(link);
    }
    
    initEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤
        const claimButtons = this.container?.querySelectorAll('.claim-gift-btn');
        claimButtons?.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const giftId = e.target.dataset.giftId;
                this.claimGift(giftId);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
        const dailyGiftBtn = this.container?.querySelector('#claim-daily-gift');
        if (dailyGiftBtn) {
            dailyGiftBtn.addEventListener('click', this.claimDailyGift.bind(this));
        }
    }
    
    async loadGifts() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            const gifts = await this.api.getAvailableGifts();
            this.state.setGifts(gifts);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.renderGifts(gifts);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
            await this.checkDailyGift();
            
        } catch (error) {
            console.error('Error loading gifts:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏');
        }
    }
    
    renderGifts(gifts) {
        const container = this.container?.querySelector('.gifts-grid');
        if (!container) return;
        
        if (!gifts || gifts.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üéÅ</div>
                    <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤</h3>
                    <p>–ü–æ–¥–∞—Ä–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = gifts.map(gift => `
            <div class="gift-card ${gift.claimed ? 'claimed' : ''}" data-gift-id="${gift.id}">
                <div class="gift-icon">${gift.icon || 'üéÅ'}</div>
                <div class="gift-content">
                    <h3 class="gift-title">${gift.name}</h3>
                    <p class="gift-description">${gift.description}</p>
                    <div class="gift-reward">
                        <span class="reward-label">–ù–∞–≥—Ä–∞–¥–∞:</span>
                        <span class="reward-value">${gift.reward}</span>
                    </div>
                    <div class="gift-condition">
                        <span class="condition-label">–£—Å–ª–æ–≤–∏–µ:</span>
                        <span class="condition-value">${gift.condition}</span>
                    </div>
                    ${gift.claimed ? 
                        '<div class="gift-status claimed">‚úÖ –ü–æ–ª—É—á–µ–Ω–æ</div>' :
                        gift.available ?
                            `<button class="btn btn-primary claim-gift-btn" data-gift-id="${gift.id}">
                                –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
                            </button>` :
                            '<div class="gift-status locked">üîí –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>'
                    }
                </div>
                ${gift.progress !== undefined ? `
                    <div class="gift-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${gift.progress}%"></div>
                        </div>
                        <span class="progress-text">${gift.progress}%</span>
                    </div>
                ` : ''}
            </div>
        `).join('');
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.initEventHandlers();
    }
    
    async checkDailyGift() {
        try {
            const dailyGift = await this.api.checkDailyGift();
            const dailySection = this.container?.querySelector('.daily-gift-section');
            
            if (!dailySection) return;
            
            if (dailyGift.available) {
                dailySection.innerHTML = `
                    <div class="daily-gift-card available">
                        <h3>üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫</h3>
                        <p>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!</p>
                        <div class="daily-reward">
                            <span class="reward-icon">üí∞</span>
                            <span class="reward-amount">${dailyGift.reward} USDT</span>
                        </div>
                        <button id="claim-daily-gift" class="btn btn-success">
                            –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
                        </button>
                    </div>
                `;
            } else {
                const timeUntilNext = this.getTimeUntilNext(dailyGift.nextAvailable);
                dailySection.innerHTML = `
                    <div class="daily-gift-card claimed">
                        <h3>üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫</h3>
                        <p>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫</p>
                        <div class="next-gift-timer">
                            <span>–°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑:</span>
                            <span class="timer">${timeUntilNext}</span>
                        </div>
                        <div class="streak-info">
                            <span>–î–Ω–µ–π –ø–æ–¥—Ä—è–¥: </span>
                            <span class="streak-count">${dailyGift.streak || 0}</span>
                        </div>
                    </div>
                `;
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
                this.startDailyGiftTimer(dailyGift.nextAvailable);
            }
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.initEventHandlers();
            
        } catch (error) {
            console.error('Error checking daily gift:', error);
        }
    }
    
    getTimeUntilNext(nextTime) {
        if (!nextTime) return '00:00:00';
        
        const now = new Date();
        const next = new Date(nextTime);
        const diff = next - now;
        
        if (diff <= 0) return '00:00:00';
        
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);
        
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    startDailyGiftTimer(nextTime) {
        const timerEl = this.container?.querySelector('.timer');
        if (!timerEl) return;
        
        const interval = setInterval(() => {
            const timeRemaining = this.getTimeUntilNext(nextTime);
            timerEl.textContent = timeRemaining;
            
            if (timeRemaining === '00:00:00') {
                clearInterval(interval);
                this.checkDailyGift(); // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            }
        }, 1000);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
        this.dailyTimerInterval = interval;
    }
    
    async claimDailyGift() {
        try {
            const result = await this.api.claimDailyGift();
            
            if (result.success) {
                this.showSuccess(`–ü–æ–ª—É—á–µ–Ω–æ ${result.reward} USDT!`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.state.addClaimedGift({
                    type: 'daily',
                    reward: result.reward,
                    date: new Date()
                });
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                await this.checkDailyGift();
                
                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                if (this.context.eventBus) {
                    this.context.eventBus.emit('balance:updated', {
                        amount: result.reward,
                        type: 'gift'
                    });
                }
            } else {
                this.showError(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫');
            }
        } catch (error) {
            console.error('Error claiming daily gift:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞');
        }
    }
    
    async claimGift(giftId) {
        if (!giftId) return;
        
        try {
            const result = await this.api.claimGift(giftId);
            
            if (result.success) {
                this.showSuccess(`–ü–æ–ª—É—á–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: ${result.reward}!`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.state.markGiftClaimed(giftId);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤
                await this.loadGifts();
                
                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
                if (this.context.eventBus) {
                    this.context.eventBus.emit('gift:claimed', {
                        giftId,
                        reward: result.reward
                    });
                }
            } else {
                this.showError(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫');
            }
        } catch (error) {
            console.error('Error claiming gift:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞');
        }
    }
    
    subscribeToEvents() {
        if (this.context.eventBus) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            this.subscriptions.push(
                this.context.eventBus.on('achievement:unlocked', async (data) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    await this.loadGifts();
                })
            );
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            this.subscriptions.push(
                this.context.eventBus.on('deposit:created', async () => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
                    await this.loadGifts();
                })
            );
        }
    }
    
    showError(message) {
        if (this.context.eventBus) {
            this.context.eventBus.emit('notification:show', {
                type: 'error',
                title: '–û—à–∏–±–∫–∞',
                message
            });
        }
    }
    
    showSuccess(message) {
        if (this.context.eventBus) {
            this.context.eventBus.emit('notification:show', {
                type: 'success',
                title: '–£—Å–ø–µ—à–Ω–æ',
                message
            });
        }
    }
    
    getFallbackTemplate() {
        return `
            <div class="gifts-container">
                <div class="page-header">
                    <h2 class="page-title">üéÅ –ü–æ–¥–∞—Ä–∫–∏</h2>
                    <p class="page-subtitle">–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ</p>
                </div>
                
                <div class="daily-gift-section">
                    <!-- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ -->
                </div>
                
                <div class="gifts-section">
                    <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏</h3>
                    <div class="gifts-grid">
                        <!-- –ü–æ–¥–∞—Ä–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å—é–¥–∞ -->
                    </div>
                </div>
                
                <div class="gift-history">
                    <h3>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤</h3>
                    <div class="history-list">
                        <div class="empty-state">
                            <p>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—É—Å—Ç–∞</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    destroy() {
        console.log('üßπ Destroying Gifts Module...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.dailyTimerInterval) {
            clearInterval(this.dailyTimerInterval);
        }
        
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
        this.subscriptions.forEach(unsub => {
            if (typeof unsub === 'function') unsub();
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        const link = document.querySelector(`link[data-module="${this.name}"]`);
        if (link) link.remove();
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if (this.container) {
            this.container.innerHTML = '';
        }
        
        console.log('‚úÖ Gifts Module destroyed');
    }
}
